{"config":{"lang":["pt","en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo ao Compilador Portugol-C","text":"<p>Este projeto faz parte da disciplina de Compiladores 1 (2025/1), Ministrada pelo professor Dr. Sergio Freitas na Universidade de Bras\u00edlia e tem como objetivo desenvolver um compilador, consolidando os conceitos aprendidos ao longo do semestre. A equipe \u00e9 formada por estudantes dedicados que aplicam a metodologia Problem Based Learning (PBL) para integrar teoria e pr\u00e1tica.</p>"},{"location":"#sobre-o-projeto","title":"\ud83d\ude80 Sobre o Projeto","text":"<p>Este compilador traduz programas escritos em Portugol \u2014 com sintaxe inspirada no Portugol Studio \u2014 para a linguagem C, utilizando as ferramentas Flex (para an\u00e1lise l\u00e9xica) e Bison (para an\u00e1lise sint\u00e1tica). </p>"},{"location":"#principais-caracteristicas","title":"\u2728 Principais Caracter\u00edsticas","text":"<ul> <li>\ud83d\udd04 Tradu\u00e7\u00e3o completa: Portugol \u2192 C</li> <li>\ud83e\uddea 32 testes automatizados garantindo qualidade</li> <li>\u26a1 Otimiza\u00e7\u00f5es integradas: propaga\u00e7\u00e3o de constantes e elimina\u00e7\u00e3o de c\u00f3digo morto</li> <li>\ud83d\udcca Suporte a vetores: arrays de todos os tipos</li> <li>\ud83c\udfaf An\u00e1lise sem\u00e2ntica: verifica\u00e7\u00e3o de tipos e escopos</li> <li>\ud83d\udd0d Relat\u00f3rios de erro claros e precisos</li> </ul>"},{"location":"#funcionalidades-implementadas","title":"\ud83d\udee0\ufe0f Funcionalidades Implementadas","text":"Categoria Funcionalidades Tipos de Dados <code>inteiro</code>, <code>real</code>, <code>caracter</code>, <code>logico</code> Estruturas Vetores unidimensionais, vari\u00e1veis simples Controle <code>se/senao</code>, <code>enquanto</code>, <code>para</code>, <code>escolha/caso</code> Operadores Aritm\u00e9ticos, relacionais, l\u00f3gicos, bitwise I/O <code>leia()</code>, <code>escreva()</code> com m\u00faltiplos argumentos Fun\u00e7\u00f5es Declara\u00e7\u00e3o, par\u00e2metros, tipos de retorno"},{"location":"#nossa-equipe","title":"Nossa Equipe","text":"<sub>Jo\u00e3o Costa</sub> <sub>Jo\u00e3o Filipe</sub> <sub>Johnny Lopes</sub> <sub>Caio Lamego</sub> <sub>Mateus Orlando</sub> <sub>Pedro Braga</sub>"},{"location":"#comecando","title":"\ud83c\udfaf Come\u00e7ando","text":""},{"location":"#instalacao-rapida","title":"Instala\u00e7\u00e3o R\u00e1pida","text":"<pre><code># Clonar o reposit\u00f3rio\ngit clone https://github.com/JohnnyLopess/Portugol-C.git\ncd Portugol-C/portugol_compilador\n\n# Instalar depend\u00eancias (Ubuntu/Debian)\nsudo apt install -y gcc flex bison make\n\n# Compilar o projeto\nmake\n\n# Executar testes\nmake test\n</code></pre>"},{"location":"#primeiro-programa","title":"Primeiro Programa","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro idade\n        idade = 25\n        escreva(\"Minha idade \u00e9: \", idade)\n    }\n}\n</code></pre> <pre><code># Compilar\nmake run FILE=meu_programa.pg\n\n# Resultado em build/saida.c:\n# #include &lt;stdio.h&gt;\n# int main() {\n#     int idade;\n#     idade = 25;\n#     printf(\"Minha idade \u00e9: %d\\n\", idade);\n#     return 0;\n# }\n</code></pre>"},{"location":"#qualidade-e-testes","title":"\ud83d\udcca Qualidade e Testes","text":""},{"location":"#sistema-de-testes-robusto","title":"\ud83e\uddea Sistema de Testes Robusto","text":"<ul> <li>32 casos de teste automatizados</li> <li>100% de taxa de sucesso</li> <li>Cobertura completa das funcionalidades</li> <li>CI/CD integrado com GitHub Actions</li> </ul>"},{"location":"#metricas-de-qualidade","title":"\ud83d\udcc8 M\u00e9tricas de Qualidade","text":"<ul> <li>\u2705 Todos os tipos de dados testados</li> <li>\u2705 Estruturas de controle validadas  </li> <li>\u2705 Operadores verificados</li> <li>\u2705 Vetores completamente suportados</li> <li>\u2705 Otimiza\u00e7\u00f5es funcionais</li> </ul>"},{"location":"#links-importantes","title":"\ud83d\udd17 Links Importantes","text":"<ul> <li>\ufffd Reposit\u00f3rio: GitHub - Portugol-C</li> <li>\ud83d\udcd6 Documenta\u00e7\u00e3o Completa: Navegue pelas se\u00e7\u00f5es desta documenta\u00e7\u00e3o</li> <li>\ud83e\uddea Sistema de Testes: Veja todos os casos de teste implementados</li> <li>\ud83c\udfd7\ufe0f Arquitetura: Entenda como o compilador funciona internamente</li> </ul> <p>\ud83c\udf93 Disciplina: Compiladores 1 (2025/1) \ud83c\udfeb Universidade: Universidade de Bras\u00edlia (UnB) \ud83d\udc68\u200d\ud83c\udfeb Professor: Dr. Sergio Freitas \ud83d\udcda Metodologia: Problem Based Learning (PBL)</p>"},{"location":"funcionalidades/estrutura-controle/","title":"Estruturas de Controle","text":"<p>O Portugol-C oferece estruturas de controle para gerenciar o fluxo de execu\u00e7\u00e3o dos programas, incluindo condicionais, loops e estruturas de sele\u00e7\u00e3o.</p>"},{"location":"funcionalidades/estrutura-controle/#estruturas-condicionais","title":"Estruturas Condicionais","text":""},{"location":"funcionalidades/estrutura-controle/#se-if","title":"Se (if)","text":"<p>A estrutura <code>se</code> permite executar c\u00f3digo condicionalmente baseado em uma express\u00e3o l\u00f3gica.</p>"},{"location":"funcionalidades/estrutura-controle/#sintaxe","title":"Sintaxe","text":"<pre><code>se (condicao) {\n    // c\u00f3digo a ser executado se a condi\u00e7\u00e3o for verdadeira\n}\n</code></pre>"},{"location":"funcionalidades/estrutura-controle/#se-senao-if-else","title":"Se-Sen\u00e3o (if-else)","text":"<pre><code>se (condicao) {\n    // c\u00f3digo se verdadeiro\n} senao {\n    // c\u00f3digo se falso\n}\n</code></pre>"},{"location":"funcionalidades/estrutura-controle/#se-senao-se-if-else-if","title":"Se-Sen\u00e3o Se (if-else if)","text":"<pre><code>se (condicao1) {\n    // c\u00f3digo para condi\u00e7\u00e3o 1\n} senao se (condicao2) {\n    // c\u00f3digo para condi\u00e7\u00e3o 2\n} senao {\n    // c\u00f3digo padr\u00e3o\n}\n</code></pre>"},{"location":"funcionalidades/estrutura-controle/#exemplos","title":"Exemplos","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro idade = 18;\n\n        se (idade &gt;= 18) {\n            escreva(\"Maior de idade\\n\");\n        } senao {\n            escreva(\"Menor de idade\\n\");\n        }\n\n        // M\u00faltiplas condi\u00e7\u00f5es\n        inteiro nota = 85;\n        se (nota &gt;= 90) {\n            escreva(\"Excelente\\n\");\n        } senao se (nota &gt;= 80) {\n            escreva(\"Bom\\n\");\n        } senao se (nota &gt;= 70) {\n            escreva(\"Regular\\n\");\n        } senao {\n            escreva(\"Insuficiente\\n\");\n        }\n    }\n}\n</code></pre>"},{"location":"funcionalidades/estrutura-controle/#estruturas-de-repeticao","title":"Estruturas de Repeti\u00e7\u00e3o","text":""},{"location":"funcionalidades/estrutura-controle/#para-for","title":"Para (for)","text":"<p>O loop <code>para</code> \u00e9 usado quando o n\u00famero de itera\u00e7\u00f5es \u00e9 conhecido.</p>"},{"location":"funcionalidades/estrutura-controle/#sintaxe_1","title":"Sintaxe","text":"<pre><code>para (inicializacao; condicao; incremento) {\n    // c\u00f3digo a ser repetido\n}\n</code></pre>"},{"location":"funcionalidades/estrutura-controle/#exemplos_1","title":"Exemplos","text":"<pre><code>programa {\n    funcao inicio() {\n        // Loop b\u00e1sico\n        para (inteiro i = 0; i &lt; 10; i++) {\n            escreva(\"Valor: \", i, \"\\n\");\n        }\n\n        // Loop com decremento\n        para (inteiro j = 10; j &gt; 0; j--) {\n            escreva(\"Contagem regressiva: \", j, \"\\n\");\n        }\n\n        // Loop com incremento personalizado\n        para (inteiro k = 0; k &lt;= 100; k = k + 10) {\n            escreva(\"M\u00faltiplo de 10: \", k, \"\\n\");\n        }\n    }\n}\n</code></pre>"},{"location":"funcionalidades/estrutura-controle/#enquanto-while","title":"Enquanto (while)","text":"<p>O loop <code>enquanto</code> executa enquanto uma condi\u00e7\u00e3o for verdadeira.</p>"},{"location":"funcionalidades/estrutura-controle/#sintaxe_2","title":"Sintaxe","text":"<pre><code>enquanto (condicao) {\n    // c\u00f3digo a ser repetido\n}\n</code></pre>"},{"location":"funcionalidades/estrutura-controle/#exemplos_2","title":"Exemplos","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro contador = 0;\n\n        enquanto (contador &lt; 5) {\n            escreva(\"Contador: \", contador, \"\\n\");\n            contador++;\n        }\n\n        // Exemplo com entrada do usu\u00e1rio\n        inteiro numero;\n        escreva(\"Digite um n\u00famero (0 para sair): \");\n        leia(numero);\n\n        enquanto (numero != 0) {\n            escreva(\"Voc\u00ea digitou: \", numero, \"\\n\");\n            escreva(\"Digite outro n\u00famero (0 para sair): \");\n            leia(numero);\n        }\n    }\n}\n</code></pre>"},{"location":"funcionalidades/estrutura-controle/#estrutura-de-selecao-multipla","title":"Estrutura de Sele\u00e7\u00e3o M\u00faltipla","text":""},{"location":"funcionalidades/estrutura-controle/#escolha-caso-switch-case","title":"Escolha-Caso (switch-case)","text":"<p>A estrutura <code>escolha</code> permite selecionar entre m\u00faltiplas op\u00e7\u00f5es baseadas no valor de uma vari\u00e1vel.</p>"},{"location":"funcionalidades/estrutura-controle/#sintaxe_3","title":"Sintaxe","text":"<pre><code>escolha (variavel) {\n    caso valor1:\n        // c\u00f3digo para valor1\n        pare;\n    caso valor2:\n        // c\u00f3digo para valor2\n        pare;\n    caso contrario:\n        // c\u00f3digo padr\u00e3o\n        pare;\n}\n</code></pre>"},{"location":"funcionalidades/estrutura-controle/#exemplos_3","title":"Exemplos","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro opcao = 2;\n\n        escolha (opcao) {\n            caso 1:\n                escreva(\"Op\u00e7\u00e3o 1 selecionada\\n\");\n                pare;\n            caso 2:\n                escreva(\"Op\u00e7\u00e3o 2 selecionada\\n\");\n                pare;\n            caso 3:\n                escreva(\"Op\u00e7\u00e3o 3 selecionada\\n\");\n                pare;\n            caso contrario:\n                escreva(\"Op\u00e7\u00e3o inv\u00e1lida\\n\");\n                pare;\n        }\n\n        // Exemplo com caracteres\n        caracter grade = 'B';\n\n        escolha (grade) {\n            caso 'A':\n                escreva(\"Excelente!\\n\");\n                pare;\n            caso 'B':\n                escreva(\"Bom trabalho!\\n\");\n                pare;\n            caso 'C':\n                escreva(\"Satisfat\u00f3rio\\n\");\n                pare;\n            caso contrario:\n                escreva(\"Nota inv\u00e1lida\\n\");\n                pare;\n        }\n    }\n}\n</code></pre>"},{"location":"funcionalidades/estrutura-controle/#estruturas-aninhadas","title":"Estruturas Aninhadas","text":"<p>As estruturas de controle podem ser aninhadas para criar l\u00f3gicas mais complexas.</p>"},{"location":"funcionalidades/estrutura-controle/#exemplo-complexo","title":"Exemplo Complexo","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro idade, renda;\n\n        escreva(\"Digite sua idade: \");\n        leia(idade);\n        escreva(\"Digite sua renda: \");\n        leia(renda);\n\n        se (idade &gt;= 18) {\n            se (renda &gt;= 2000) {\n                escreva(\"Eleg\u00edvel para cr\u00e9dito premium\\n\");\n            } senao se (renda &gt;= 1000) {\n                escreva(\"Eleg\u00edvel para cr\u00e9dito b\u00e1sico\\n\");\n            } senao {\n                escreva(\"Renda insuficiente\\n\");\n            }\n        } senao {\n            escreva(\"Menor de idade - n\u00e3o eleg\u00edvel\\n\");\n        }\n\n        // Loop aninhado\n        para (inteiro i = 1; i &lt;= 3; i++) {\n            escreva(\"Tabela do \", i, \":\\n\");\n            para (inteiro j = 1; j &lt;= 10; j++) {\n                escreva(i, \" x \", j, \" = \", i * j, \"\\n\");\n            }\n            escreva(\"\\n\");\n        }\n    }\n}\n</code></pre>"},{"location":"funcionalidades/estrutura-controle/#controle-de-fluxo","title":"Controle de Fluxo","text":""},{"location":"funcionalidades/estrutura-controle/#pare-break","title":"Pare (break)","text":"<p>Interrompe a execu\u00e7\u00e3o de loops ou estruturas switch.</p> <pre><code>para (inteiro i = 0; i &lt; 10; i++) {\n    se (i == 5) {\n        pare; // Sai do loop quando i for 5\n    }\n    escreva(i, \"\\n\");\n}\n</code></pre>"},{"location":"funcionalidades/estrutura-controle/#continue","title":"Continue","text":"<p>O Portugol-C n\u00e3o possui uma palavra-chave espec\u00edfica para <code>continue</code>, mas o comportamento pode ser simulado com estruturas condicionais.</p> <pre><code>para (inteiro i = 0; i &lt; 10; i++) {\n    se (i % 2 == 0) {\n        // Pula n\u00fameros pares - simula continue\n    } senao {\n        escreva(\"N\u00famero \u00edmpar: \", i, \"\\n\");\n    }\n}\n</code></pre>"},{"location":"funcionalidades/estrutura-controle/#boas-praticas","title":"Boas Pr\u00e1ticas","text":"<ol> <li>Indenta\u00e7\u00e3o: Use indenta\u00e7\u00e3o consistente para melhorar a legibilidade</li> <li>Chaves: Sempre use chaves, mesmo para blocos de uma linha</li> <li>Condi\u00e7\u00f5es claras: Escreva condi\u00e7\u00f5es claras e leg\u00edveis</li> <li>Evite aninhamento excessivo: Limite o n\u00famero de n\u00edveis de aninhamento</li> <li>Coment\u00e1rios: Documente l\u00f3gicas complexas</li> </ol> <pre><code>// Boa pr\u00e1tica\nse (idade &gt;= 18 &amp;&amp; renda &gt; 1000) {\n    processar_credito();\n}\n// Em vez de\nse (idade &gt;= 18) {\n    se (renda &gt; 1000) {\n        processar_credito();\n    }\n}\n</code></pre>"},{"location":"funcionalidades/estrutura-controle/#operadores-em-condicoes","title":"Operadores em Condi\u00e7\u00f5es","text":""},{"location":"funcionalidades/estrutura-controle/#operadores-relacionais","title":"Operadores Relacionais","text":"<ul> <li><code>==</code> (igual)</li> <li><code>!=</code> (diferente)</li> <li><code>&lt;</code> (menor que)</li> <li><code>&gt;</code> (maior que)</li> <li><code>&lt;=</code> (menor ou igual)</li> <li><code>&gt;=</code> (maior ou igual)</li> </ul>"},{"location":"funcionalidades/estrutura-controle/#operadores-logicos","title":"Operadores L\u00f3gicos","text":"<ul> <li><code>&amp;&amp;</code> (E l\u00f3gico)</li> <li><code>||</code> (OU l\u00f3gico)</li> <li><code>!</code> (N\u00c3O l\u00f3gico)</li> </ul>"},{"location":"funcionalidades/estrutura-controle/#exemplos_4","title":"Exemplos","text":"<pre><code>se (idade &gt;= 18 &amp;&amp; idade &lt;= 65) {\n    escreva(\"Idade para trabalhar\\n\");\n}\nse (nota &lt; 60 || faltas &gt; 10) {\n    escreva(\"Reprovado\\n\");\n}\nse (!(aprovado)) {\n    escreva(\"N\u00e3o aprovado\\n\");\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/","title":"Fun\u00e7\u00f5es","text":"<p>O Portugol-C suporta a defini\u00e7\u00e3o e uso de fun\u00e7\u00f5es para modularizar c\u00f3digo e promover reutiliza\u00e7\u00e3o. As fun\u00e7\u00f5es podem ter par\u00e2metros, valores de retorno e diferentes escopos.</p>"},{"location":"funcionalidades/funcoes/#estrutura-basica","title":"Estrutura B\u00e1sica","text":""},{"location":"funcionalidades/funcoes/#sintaxe-geral","title":"Sintaxe Geral","text":"<pre><code>tipo_retorno nome_funcao(parametros) {\n    // corpo da fun\u00e7\u00e3o\n    retorne valor; // opcional\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#funcao-principal","title":"Fun\u00e7\u00e3o Principal","text":"<p>Todo programa Portugol-C deve ter uma fun\u00e7\u00e3o <code>inicio()</code> que serve como ponto de entrada:</p> <pre><code>programa {\n    funcao inicio() {\n        // c\u00f3digo principal do programa\n    }\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#tipos-de-funcoes","title":"Tipos de Fun\u00e7\u00f5es","text":""},{"location":"funcionalidades/funcoes/#funcoes-sem-retorno-void","title":"Fun\u00e7\u00f5es Sem Retorno (void)","text":"<p>Fun\u00e7\u00f5es que n\u00e3o retornam valores usam a palavra-chave <code>vazio</code> ou omitem o tipo de retorno.</p> <pre><code>funcao saudar() {\n    escreva(\"Ol\u00e1, mundo!\\n\");\n}\nfuncao exibir_menu() {\n    escreva(\"=== MENU ===\\n\");\n    escreva(\"1. Op\u00e7\u00e3o 1\\n\");\n    escreva(\"2. Op\u00e7\u00e3o 2\\n\");\n    escreva(\"3. Sair\\n\");\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#funcoes-com-retorno","title":"Fun\u00e7\u00f5es Com Retorno","text":"<p>Fun\u00e7\u00f5es que retornam valores devem especificar o tipo de retorno e usar a palavra-chave <code>retorne</code>.</p> <pre><code>inteiro somar(inteiro a, inteiro b) {\n    retorne a + b;\n}\nreal calcular_media(real nota1, real nota2, real nota3) {\n    retorne (nota1 + nota2 + nota3) / 3.0;\n}\nlogico eh_par(inteiro numero) {\n    retorne (numero % 2 == 0);\n}\ncaracter obter_conceito(real media) {\n    se (media &gt;= 9.0) {\n        retorne 'A';\n    } senao se (media &gt;= 7.0) {\n        retorne 'B';\n    } senao se (media &gt;= 5.0) {\n        retorne 'C';\n    } senao {\n        retorne 'D';\n    }\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#parametros","title":"Par\u00e2metros","text":""},{"location":"funcionalidades/funcoes/#parametros-simples","title":"Par\u00e2metros Simples","text":"<pre><code>funcao cumprimentar(caracter nome[]) {\n    escreva(\"Ol\u00e1, \", nome, \"!\\n\");\n}\nfuncao calcular_area_retangulo(real largura, real altura) {\n    real area = largura * altura;\n    escreva(\"\u00c1rea: \", area, \"\\n\");\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#multiplos-parametros","title":"M\u00faltiplos Par\u00e2metros","text":"<pre><code>inteiro encontrar_maior(inteiro a, inteiro b, inteiro c) {\n    inteiro maior = a;\n\n    se (b &gt; maior) {\n        maior = b;\n    }\n\n    se (c &gt; maior) {\n        maior = c;\n    }\n\n    retorne maior;\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#parametros-de-diferentes-tipos","title":"Par\u00e2metros de Diferentes Tipos","text":"<pre><code>funcao exibir_dados_pessoa(caracter nome[], inteiro idade, real salario, logico ativo) {\n    escreva(\"Nome: \", nome, \"\\n\");\n    escreva(\"Idade: \", idade, \"\\n\");\n    escreva(\"Sal\u00e1rio: \", salario, \"\\n\");\n    escreva(\"Ativo: \", ativo, \"\\n\");\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#exemplos-praticos","title":"Exemplos Pr\u00e1ticos","text":""},{"location":"funcionalidades/funcoes/#calculadora-simples","title":"Calculadora Simples","text":"<pre><code>programa {\n    real somar(real a, real b) {\n        retorne a + b;\n    }\n\n    real subtrair(real a, real b) {\n        retorne a - b;\n    }\n\n    real multiplicar(real a, real b) {\n        retorne a * b;\n    }\n\n    real dividir(real a, real b) {\n        se (b != 0) {\n            retorne a / b;\n        } senao {\n            escreva(\"Erro: Divis\u00e3o por zero!\\n\");\n            retorne 0.0;\n        }\n    }\n\n    funcao inicio() {\n        real num1, num2, resultado;\n        caracter operacao;\n\n        escreva(\"Digite o primeiro n\u00famero: \");\n        leia(num1);\n\n        escreva(\"Digite o segundo n\u00famero: \");\n        leia(num2);\n\n        escreva(\"Digite a opera\u00e7\u00e3o (+, -, *, /): \");\n        leia(operacao);\n\n        escolha (operacao) {\n            caso '+':\n                resultado = somar(num1, num2);\n                pare;\n            caso '-':\n                resultado = subtrair(num1, num2);\n                pare;\n            caso '*':\n                resultado = multiplicar(num1, num2);\n                pare;\n            caso '/':\n                resultado = dividir(num1, num2);\n                pare;\n            padrao:\n                escreva(\"Opera\u00e7\u00e3o inv\u00e1lida!\\n\");\n                retorne;\n        }\n\n        escreva(\"Resultado: \", resultado, \"\\n\");\n    }\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#sistema-de-validacao","title":"Sistema de Valida\u00e7\u00e3o","text":"<pre><code>programa {\n    logico validar_idade(inteiro idade) {\n        retorne (idade &gt;= 0 &amp;&amp; idade &lt;= 150);\n    }\n\n    logico validar_email(caracter email[]) {\n        // Valida\u00e7\u00e3o simples - verificar se cont\u00e9m @\n        inteiro i = 0;\n        enquanto (email[i] != '\\0') {\n            se (email[i] == '@') {\n                retorne verdadeiro;\n            }\n            i++;\n        }\n        retorne falso;\n    }\n\n    caracter classificar_idade(inteiro idade) {\n        se (idade &lt; 13) {\n            retorne 'C'; // Crian\u00e7a\n        } senao se (idade &lt; 18) {\n            retorne 'A'; // Adolescente\n        } senao se (idade &lt; 60) {\n            retorne 'J'; // Jovem/Adulto\n        } senao {\n            retorne 'I'; // Idoso\n        }\n    }\n\n    funcao inicio() {\n        inteiro idade;\n        caracter email[100];\n\n        escreva(\"Digite sua idade: \");\n        leia(idade);\n\n        se (validar_idade(idade)) {\n            caracter categoria = classificar_idade(idade);\n            escreva(\"Categoria: \", categoria, \"\\n\");\n        } senao {\n            escreva(\"Idade inv\u00e1lida!\\n\");\n        }\n\n        escreva(\"Digite seu email: \");\n        leia(email);\n\n        se (validar_email(email)) {\n            escreva(\"Email v\u00e1lido!\\n\");\n        } senao {\n            escreva(\"Email inv\u00e1lido!\\n\");\n        }\n    }\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#escopo-de-variaveis","title":"Escopo de Vari\u00e1veis","text":""},{"location":"funcionalidades/funcoes/#variaveis-locais","title":"Vari\u00e1veis Locais","text":"<p>Vari\u00e1veis declaradas dentro de fun\u00e7\u00f5es s\u00e3o locais e s\u00f3 existem no escopo da fun\u00e7\u00e3o.</p> <pre><code>funcao exemplo_escopo() {\n    inteiro local = 10; // Vari\u00e1vel local\n    escreva(\"Valor local: \", local, \"\\n\");\n}\nfuncao inicio() {\n    exemplo_escopo();\n    // local n\u00e3o existe aqui - erro de compila\u00e7\u00e3o\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#variaveis-globais","title":"Vari\u00e1veis Globais","text":"<p>Vari\u00e1veis declaradas fora de fun\u00e7\u00f5es s\u00e3o globais e podem ser acessadas por todas as fun\u00e7\u00f5es.</p> <pre><code>programa {\n    inteiro contador_global = 0; // Vari\u00e1vel global\n\n    funcao incrementar() {\n        contador_global++;\n    }\n\n    funcao obter_contador() {\n        retorne contador_global;\n    }\n\n    funcao inicio() {\n        escreva(\"Contador inicial: \", contador_global, \"\\n\");\n        incrementar();\n        escreva(\"Contador ap\u00f3s incremento: \", obter_contador(), \"\\n\");\n    }\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#recursao","title":"Recurs\u00e3o","text":"<p>O Portugol-C suporta fun\u00e7\u00f5es recursivas:</p> <pre><code>programa {\n    inteiro fatorial(inteiro n) {\n        se (n &lt;= 1) {\n            retorne 1;\n        } senao {\n            retorne n * fatorial(n - 1);\n        }\n    }\n\n    inteiro fibonacci(inteiro n) {\n        se (n &lt;= 1) {\n            retorne n;\n        } senao {\n            retorne fibonacci(n - 1) + fibonacci(n - 2);\n        }\n    }\n\n    funcao inicio() {\n        inteiro num = 5;\n\n        escreva(\"Fatorial de \", num, \": \", fatorial(num), \"\\n\");\n\n        escreva(\"Sequ\u00eancia de Fibonacci at\u00e9 \", num, \":\\n\");\n        para (inteiro i = 0; i &lt;= num; i++) {\n            escreva(fibonacci(i), \" \");\n        }\n        escreva(\"\\n\");\n    }\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#passagem-de-parametros","title":"Passagem de Par\u00e2metros","text":""},{"location":"funcionalidades/funcoes/#por-valor","title":"Por Valor","text":"<p>Por padr\u00e3o, os par\u00e2metros s\u00e3o passados por valor (c\u00f3pia).</p> <pre><code>funcao modificar_valor(inteiro x) {\n    x = 100; // Modifica apenas a c\u00f3pia local\n}\nfuncao inicio() {\n    inteiro numero = 10;\n    modificar_valor(numero);\n    escreva(\"N\u00famero: \", numero, \"\\n\"); // Ainda ser\u00e1 10\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#arrays-passagem-por-referencia","title":"Arrays (Passagem por Refer\u00eancia)","text":"<p>Arrays s\u00e3o passados por refer\u00eancia, permitindo modifica\u00e7\u00f5es.</p> <pre><code>funcao preencher_array(inteiro vetor[], inteiro tamanho) {\n    para (inteiro i = 0; i &lt; tamanho; i++) {\n        vetor[i] = i * 2;\n    }\n}\nfuncao exibir_array(inteiro vetor[], inteiro tamanho) {\n    para (inteiro i = 0; i &lt; tamanho; i++) {\n        escreva(vetor[i], \" \");\n    }\n    escreva(\"\\n\");\n}\nfuncao inicio() {\n    inteiro numeros[5];\n\n    preencher_array(numeros, 5);\n    exibir_array(numeros, 5);\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#boas-praticas","title":"Boas Pr\u00e1ticas","text":""},{"location":"funcionalidades/funcoes/#nomenclatura","title":"Nomenclatura","text":"<pre><code>// Boas pr\u00e1ticas\nfuncao calcular_media_aluno(real nota1, real nota2, real nota3) { }\nfuncao validar_cpf(caracter cpf[]) { }\nfuncao obter_idade_usuario() { }\n// Evitar\nfuncao calc(real a, real b, real c) { }\nfuncao val(caracter x[]) { }\nfuncao get() { }\n</code></pre>"},{"location":"funcionalidades/funcoes/#documentacao","title":"Documenta\u00e7\u00e3o","text":"<pre><code>/*\n * Calcula a \u00e1rea de um c\u00edrculo dado o raio\n * Par\u00e2metro: raio - o raio do c\u00edrculo\n * Retorna: a \u00e1rea calculada\n */\nreal calcular_area_circulo(real raio) {\n    real pi = 3.14159;\n    retorne pi * raio * raio;\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#modularizacao","title":"Modulariza\u00e7\u00e3o","text":"<pre><code>programa {\n    // Fun\u00e7\u00f5es de entrada e sa\u00edda\n    funcao ler_dados() { }\n    funcao exibir_resultados() { }\n\n    // Fun\u00e7\u00f5es de processamento\n    funcao processar_dados() { }\n    funcao validar_entrada() { }\n\n    // Fun\u00e7\u00f5es utilit\u00e1rias\n    funcao limpar_tela() { }\n    funcao pausar() { }\n\n    funcao inicio() {\n        // Programa principal organizado\n    }\n}\n</code></pre>"},{"location":"funcionalidades/funcoes/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ul> <li>N\u00e3o h\u00e1 sobrecarga de fun\u00e7\u00f5es (overloading)</li> <li>N\u00e3o h\u00e1 par\u00e2metros opcionais</li> <li>N\u00e3o h\u00e1 par\u00e2metros nomeados</li> <li>Fun\u00e7\u00f5es devem ser declaradas antes de serem usadas</li> <li>N\u00e3o h\u00e1 ponteiros para fun\u00e7\u00f5es</li> <li>Recurs\u00e3o limitada pelo tamanho da pilha</li> </ul>"},{"location":"funcionalidades/operadores/","title":"Operadores","text":"<p>O Portugol-C oferece um conjunto completo de operadores para realizar opera\u00e7\u00f5es aritm\u00e9ticas, relacionais, l\u00f3gicas e de atribui\u00e7\u00e3o, permitindo a constru\u00e7\u00e3o de express\u00f5es complexas.</p>"},{"location":"funcionalidades/operadores/#operadores-aritmeticos","title":"Operadores Aritm\u00e9ticos","text":""},{"location":"funcionalidades/operadores/#operadores-basicos","title":"Operadores B\u00e1sicos","text":"Operador Descri\u00e7\u00e3o Exemplo Resultado <code>+</code> Adi\u00e7\u00e3o <code>5 + 3</code> <code>8</code> <code>-</code> Subtra\u00e7\u00e3o <code>10 - 4</code> <code>6</code> <code>*</code> Multiplica\u00e7\u00e3o <code>6 * 7</code> <code>42</code> <code>/</code> Divis\u00e3o <code>15 / 3</code> <code>5</code> <code>%</code> M\u00f3dulo (resto da divis\u00e3o) <code>17 % 5</code> <code>2</code>"},{"location":"funcionalidades/operadores/#exemplos-de-uso","title":"Exemplos de Uso","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro a = 15, b = 4;\n        real x = 10.5, y = 3.2;\n\n        // Opera\u00e7\u00f5es com inteiros\n        escreva(\"Soma: \", a + b, \"\\n\");           // 19\n        escreva(\"Subtra\u00e7\u00e3o: \", a - b, \"\\n\");      // 11\n        escreva(\"Multiplica\u00e7\u00e3o: \", a * b, \"\\n\");  // 60\n        escreva(\"Divis\u00e3o: \", a / b, \"\\n\");        // 3 (divis\u00e3o inteira)\n        escreva(\"M\u00f3dulo: \", a % b, \"\\n\");         // 3\n\n        // Opera\u00e7\u00f5es com reais\n        escreva(\"Soma real: \", x + y, \"\\n\");      // 13.7\n        escreva(\"Divis\u00e3o real: \", x / y, \"\\n\");   // 3.28125\n\n        // Opera\u00e7\u00f5es mistas\n        escreva(\"Mista: \", a + x, \"\\n\");          // 25.5\n    }\n}\n</code></pre>"},{"location":"funcionalidades/operadores/#operador-unario","title":"Operador Un\u00e1rio","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro numero = 10;\n\n        escreva(\"N\u00famero original: \", numero, \"\\n\");     // 10\n        escreva(\"N\u00famero negativo: \", -numero, \"\\n\");    // -10\n        escreva(\"Positivo expl\u00edcito: \", +numero, \"\\n\"); // 10\n    }\n}\n</code></pre>"},{"location":"funcionalidades/operadores/#operadores-de-atribuicao","title":"Operadores de Atribui\u00e7\u00e3o","text":""},{"location":"funcionalidades/operadores/#atribuicao-simples","title":"Atribui\u00e7\u00e3o Simples","text":"<pre><code>inteiro x = 10;        // Atribui\u00e7\u00e3o inicial\nx = 20;                // Reatribui\u00e7\u00e3o\n</code></pre>"},{"location":"funcionalidades/operadores/#operadores-de-atribuicao-composta","title":"Operadores de Atribui\u00e7\u00e3o Composta","text":"Operador Equivalente Exemplo Significado <code>+=</code> <code>x = x + y</code> <code>x += 5</code> Adicionar e atribuir <code>-=</code> <code>x = x - y</code> <code>x -= 3</code> Subtrair e atribuir <code>*=</code> <code>x = x * y</code> <code>x *= 2</code> Multiplicar e atribuir <code>/=</code> <code>x = x / y</code> <code>x /= 4</code> Dividir e atribuir <code>%=</code> <code>x = x % y</code> <code>x %= 3</code> M\u00f3dulo e atribuir <pre><code>programa {\n    funcao inicio() {\n        inteiro valor = 10;\n\n        escreva(\"Valor inicial: \", valor, \"\\n\");  // 10\n\n        valor += 5;\n        escreva(\"Ap\u00f3s += 5: \", valor, \"\\n\");      // 15\n\n        valor -= 3;\n        escreva(\"Ap\u00f3s -= 3: \", valor, \"\\n\");      // 12\n\n        valor *= 2;\n        escreva(\"Ap\u00f3s *= 2: \", valor, \"\\n\");      // 24\n\n        valor /= 4;\n        escreva(\"Ap\u00f3s /= 4: \", valor, \"\\n\");      // 6\n\n        valor %= 4;\n        escreva(\"Ap\u00f3s %= 4: \", valor, \"\\n\");      // 2\n    }\n}\n</code></pre>"},{"location":"funcionalidades/operadores/#operadores-de-incremento-e-decremento","title":"Operadores de Incremento e Decremento","text":""},{"location":"funcionalidades/operadores/#pre-e-pos-incrementodecremento","title":"Pr\u00e9 e P\u00f3s-incremento/decremento","text":"Operador Descri\u00e7\u00e3o Exemplo Comportamento <code>++x</code> Pr\u00e9-incremento <code>++contador</code> Incrementa primeiro, depois usa <code>x++</code> P\u00f3s-incremento <code>contador++</code> Usa primeiro, depois incrementa <code>--x</code> Pr\u00e9-decremento <code>--contador</code> Decrementa primeiro, depois usa <code>x--</code> P\u00f3s-decremento <code>contador--</code> Usa primeiro, depois decrementa <pre><code>programa {\n    funcao inicio() {\n        inteiro a = 5, b = 5;\n\n        escreva(\"Valores iniciais - a: \", a, \", b: \", b, \"\\n\");\n\n        // Pr\u00e9-incremento\n        escreva(\"Pr\u00e9-incremento ++a: \", ++a, \"\\n\");  // a vira 6, mostra 6\n        escreva(\"Valor de a agora: \", a, \"\\n\");      // 6\n\n        // P\u00f3s-incremento\n        escreva(\"P\u00f3s-incremento b++: \", b++, \"\\n\");  // mostra 5, b vira 6\n        escreva(\"Valor de b agora: \", b, \"\\n\");      // 6\n\n        // Uso em loops\n        para (inteiro i = 0; i &lt; 3; i++) {\n            escreva(\"Loop: \", i, \"\\n\");\n        }\n\n        // Decremento\n        inteiro c = 10;\n        escreva(\"Pr\u00e9-decremento --c: \", --c, \"\\n\");  // 9\n        escreva(\"P\u00f3s-decremento c--: \", c--, \"\\n\");  // 9, depois vira 8\n        escreva(\"Valor final de c: \", c, \"\\n\");      // 8\n    }\n}\n</code></pre>"},{"location":"funcionalidades/operadores/#operadores-relacionais","title":"Operadores Relacionais","text":""},{"location":"funcionalidades/operadores/#comparacoes","title":"Compara\u00e7\u00f5es","text":"Operador Descri\u00e7\u00e3o Exemplo Resultado <code>==</code> Igual a <code>5 == 5</code> <code>verdadeiro</code> <code>!=</code> Diferente de <code>5 != 3</code> <code>verdadeiro</code> <code>&lt;</code> Menor que <code>3 &lt; 5</code> <code>verdadeiro</code> <code>&gt;</code> Maior que <code>7 &gt; 4</code> <code>verdadeiro</code> <code>&lt;=</code> Menor ou igual <code>5 &lt;= 5</code> <code>verdadeiro</code> <code>&gt;=</code> Maior ou igual <code>6 &gt;= 6</code> <code>verdadeiro</code> <pre><code>programa {\n    funcao inicio() {\n        inteiro x = 10, y = 20;\n\n        escreva(\"x = \", x, \", y = \", y, \"\\n\");\n\n        escreva(\"x == y: \", (x == y), \"\\n\");     // falso (0)\n        escreva(\"x != y: \", (x != y), \"\\n\");     // verdadeiro (1)\n        escreva(\"x &lt; y: \", (x &lt; y), \"\\n\");       // verdadeiro (1)\n        escreva(\"x &gt; y: \", (x &gt; y), \"\\n\");       // falso (0)\n        escreva(\"x &lt;= 10: \", (x &lt;= 10), \"\\n\");  // verdadeiro (1)\n        escreva(\"y &gt;= 20: \", (y &gt;= 20), \"\\n\");  // verdadeiro (1)\n\n        // Compara\u00e7\u00e3o de caracteres\n        caracter a = 'A', b = 'B';\n        escreva(\"'A' &lt; 'B': \", (a &lt; b), \"\\n\");  // verdadeiro (ASCII)\n    }\n}\n</code></pre>"},{"location":"funcionalidades/operadores/#operadores-logicos","title":"Operadores L\u00f3gicos","text":""},{"location":"funcionalidades/operadores/#operadores-booleanos","title":"Operadores Booleanos","text":"Operador Descri\u00e7\u00e3o Exemplo Resultado <code>&amp;&amp;</code> E l\u00f3gico (AND) <code>verdadeiro &amp;&amp; falso</code> <code>falso</code> <code>\\|\\|</code> OU l\u00f3gico (OR) <code>verdadeiro \\|\\| falso</code> <code>verdadeiro</code> <code>!</code> N\u00c3O l\u00f3gico (NOT) <code>!verdadeiro</code> <code>falso</code> <pre><code>programa {\n    funcao inicio() {\n        logico p = verdadeiro;\n        logico q = falso;\n\n        escreva(\"p = \", p, \", q = \", q, \"\\n\");\n\n        // Operador E (&amp;&amp;)\n        escreva(\"p &amp;&amp; q: \", (p &amp;&amp; q), \"\\n\");           // falso\n        escreva(\"p &amp;&amp; verdadeiro: \", (p &amp;&amp; verdadeiro), \"\\n\"); // verdadeiro\n\n        // Operador OU (||)\n        escreva(\"p || q: \", (p || q), \"\\n\");           // verdadeiro\n        escreva(\"q || falso: \", (q || falso), \"\\n\");   // falso\n\n        // Operador N\u00c3O (!)\n        escreva(\"!p: \", (!p), \"\\n\");                   // falso\n        escreva(\"!q: \", (!q), \"\\n\");                   // verdadeiro\n\n        // Combina\u00e7\u00f5es complexas\n        escreva(\"!(p &amp;&amp; q): \", (!(p &amp;&amp; q)), \"\\n\");     // verdadeiro\n        escreva(\"!p || !q: \", ((!p) || (!q)), \"\\n\");  // verdadeiro (Lei de De Morgan)\n    }\n}\n</code></pre>"},{"location":"funcionalidades/operadores/#avaliacao-de-curto-circuito","title":"Avalia\u00e7\u00e3o de Curto-Circuito","text":"<pre><code>programa {\n    logico sempre_verdadeiro() {\n        escreva(\"Fun\u00e7\u00e3o sempre_verdadeiro chamada\\n\");\n        retorne verdadeiro;\n    }\n\n    logico sempre_falso() {\n        escreva(\"Fun\u00e7\u00e3o sempre_falso chamada\\n\");\n        retorne falso;\n    }\n\n    funcao inicio() {\n        // Com &amp;&amp;, se o primeiro for falso, o segundo n\u00e3o \u00e9 avaliado\n        escreva(\"Teste 1: \");\n        se (sempre_falso() &amp;&amp; sempre_verdadeiro()) {\n            escreva(\"Condi\u00e7\u00e3o verdadeira\\n\");\n        }\n\n        // Com ||, se o primeiro for verdadeiro, o segundo n\u00e3o \u00e9 avaliado\n        escreva(\"Teste 2: \");\n        se (sempre_verdadeiro() || sempre_falso()) {\n            escreva(\"Condi\u00e7\u00e3o verdadeira\\n\");\n        }\n    }\n}\n</code></pre>"},{"location":"funcionalidades/operadores/#operadores-bitwise","title":"Operadores Bitwise","text":""},{"location":"funcionalidades/operadores/#operacoes-em-bits","title":"Opera\u00e7\u00f5es em Bits","text":"Operador Descri\u00e7\u00e3o Exemplo Resultado <code>&amp;</code> E bitwise (AND) <code>5 &amp; 3</code> <code>1</code> <code>\\|</code> OU bitwise (OR) <code>5 \\| 3</code> <code>7</code> <code>^</code> OU exclusivo (XOR) <code>5 ^ 3</code> <code>6</code> <code>~</code> Complemento (NOT) <code>~5</code> <code>-6</code> <code>&lt;&lt;</code> Deslocamento \u00e0 esquerda <code>5 &lt;&lt; 1</code> <code>10</code> <code>&gt;&gt;</code> Deslocamento \u00e0 direita <code>10 &gt;&gt; 1</code> <code>5</code> <pre><code>programa {\n    funcao inicio() {\n        inteiro a = 5;  // 101 em bin\u00e1rio\n        inteiro b = 3;  // 011 em bin\u00e1rio\n\n        escreva(\"a = \", a, \" (101 bin\u00e1rio)\\n\");\n        escreva(\"b = \", b, \" (011 bin\u00e1rio)\\n\");\n\n        // Opera\u00e7\u00f5es bitwise\n        escreva(\"a &amp; b = \", (a &amp; b), \"\\n\");    // 1 (001)\n        escreva(\"a | b = \", (a | b), \"\\n\");    // 7 (111)\n        escreva(\"a ^ b = \", (a ^ b), \"\\n\");    // 6 (110)\n        escreva(\"~a = \", (~a), \"\\n\");          // -6 (complemento de 2)\n\n        // Deslocamentos\n        escreva(\"a &lt;&lt; 1 = \", (a &lt;&lt; 1), \"\\n\"); // 10 (1010)\n        escreva(\"a &gt;&gt; 1 = \", (a &gt;&gt; 1), \"\\n\"); // 2 (10)\n\n        // Aplica\u00e7\u00f5es pr\u00e1ticas\n        inteiro numero = 16;\n        escreva(\"Testar se \", numero, \" \u00e9 par: \", ((numero &amp; 1) == 0), \"\\n\");\n        escreva(\"Multiplicar por 4 (&lt;&lt;2): \", (numero &lt;&lt; 2), \"\\n\"); // 64\n        escreva(\"Dividir por 2 (&gt;&gt;1): \", (numero &gt;&gt; 1), \"\\n\");     // 8\n    }\n}\n</code></pre>"},{"location":"funcionalidades/operadores/#precedencia-de-operadores","title":"Preced\u00eancia de Operadores","text":""},{"location":"funcionalidades/operadores/#tabela-de-precedencia-do-maior-para-o-menor","title":"Tabela de Preced\u00eancia (do maior para o menor)","text":"Preced\u00eancia Operadores Associatividade Descri\u00e7\u00e3o 1 <code>()</code> <code>[]</code> Esquerda \u2192 Direita Par\u00eanteses, \u00edndices 2 <code>!</code> <code>~</code> <code>+</code> <code>-</code> <code>++</code> <code>--</code> Direita \u2192 Esquerda Un\u00e1rios 3 <code>*</code> <code>/</code> <code>%</code> Esquerda \u2192 Direita Multiplicativos 4 <code>+</code> <code>-</code> Esquerda \u2192 Direita Aditivos 5 <code>&lt;&lt;</code> <code>&gt;&gt;</code> Esquerda \u2192 Direita Deslocamento 6 <code>&lt;</code> <code>&lt;=</code> <code>&gt;</code> <code>&gt;=</code> Esquerda \u2192 Direita Relacionais 7 <code>==</code> <code>!=</code> Esquerda \u2192 Direita Igualdade 8 <code>&amp;</code> Esquerda \u2192 Direita E bitwise 9 <code>^</code> Esquerda \u2192 Direita XOR bitwise 10 <code>\\|</code> Esquerda \u2192 Direita OU bitwise 11 <code>&amp;&amp;</code> Esquerda \u2192 Direita E l\u00f3gico 12 <code>\\|\\|</code> Esquerda \u2192 Direita OU l\u00f3gico 13 <code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> Direita \u2192 Esquerda Atribui\u00e7\u00e3o"},{"location":"funcionalidades/operadores/#exemplos-de-precedencia","title":"Exemplos de Preced\u00eancia","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro a = 5, b = 3, c = 2;\n\n        // Sem par\u00eanteses - seguindo preced\u00eancia\n        inteiro resultado1 = a + b * c;        // 5 + (3 * 2) = 11\n        escreva(\"a + b * c = \", resultado1, \"\\n\");\n\n        // Com par\u00eanteses - alterando preced\u00eancia\n        inteiro resultado2 = (a + b) * c;      // (5 + 3) * 2 = 16\n        escreva(\"(a + b) * c = \", resultado2, \"\\n\");\n\n        // Exemplo complexo\n        inteiro x = 10, y = 5, z = 2;\n        inteiro complexo = x + y * z - x / y;  // 10 + (5*2) - (10/5) = 10 + 10 - 2 = 18\n        escreva(\"x + y * z - x / y = \", complexo, \"\\n\");\n\n        // Com par\u00eanteses para clareza\n        inteiro claro = x + (y * z) - (x / y); // Mesmo resultado, mais claro\n        escreva(\"Com par\u00eanteses: \", claro, \"\\n\");\n\n        // Operadores l\u00f3gicos e relacionais\n        logico condicao = (a &gt; b) &amp;&amp; (c &lt; b) || (x == 10);\n        escreva(\"Condi\u00e7\u00e3o complexa: \", condicao, \"\\n\");\n    }\n}\n</code></pre>"},{"location":"funcionalidades/operadores/#conversoes-e-casting","title":"Convers\u00f5es e Casting","text":""},{"location":"funcionalidades/operadores/#conversoes-automaticas","title":"Convers\u00f5es Autom\u00e1ticas","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro i = 10;\n        real r = 3.14;\n        caracter c = 'A';\n\n        // Convers\u00f5es autom\u00e1ticas\n        real resultado1 = i + r;        // int \u2192 float\n        escreva(\"int + float: \", resultado1, \"\\n\");  // 13.14\n\n        inteiro resultado2 = c + i;     // char \u2192 int (ASCII)\n        escreva(\"char + int: \", resultado2, \"\\n\");   // 75 ('A' = 65)\n\n        // Divis\u00e3o inteira vs real\n        inteiro div_int = 7 / 2;        // 3 (divis\u00e3o inteira)\n        real div_real = 7.0 / 2;        // 3.5 (divis\u00e3o real)\n        escreva(\"Divis\u00e3o inteira: \", div_int, \"\\n\");\n        escreva(\"Divis\u00e3o real: \", div_real, \"\\n\");\n    }\n}\n</code></pre>"},{"location":"funcionalidades/operadores/#boas-praticas","title":"Boas Pr\u00e1ticas","text":""},{"location":"funcionalidades/operadores/#clareza-nas-expressoes","title":"Clareza nas Express\u00f5es","text":"<pre><code>// Bom: uso de par\u00eanteses para clareza\nse ((idade &gt;= 18) &amp;&amp; (renda &gt; 1000)) {\n    processar_credito();\n}\n// Melhor ainda: vari\u00e1veis descritivas\nlogico maior_idade = (idade &gt;= 18);\nlogico renda_suficiente = (renda &gt; 1000);\nse (maior_idade &amp;&amp; renda_suficiente) {\n    processar_credito();\n}\n</code></pre>"},{"location":"funcionalidades/operadores/#evitar-efeitos-colaterais","title":"Evitar Efeitos Colaterais","text":"<pre><code>// Evitar: m\u00faltiplos incrementos na mesma express\u00e3o\ninteiro x = 5;\ninteiro resultado = ++x + x++; // Comportamento indefinido\n// Preferir: opera\u00e7\u00f5es separadas\nx = 5;\n++x;                           // x = 6\nresultado = x + x;             // 12\nx++;                           // x = 7\n</code></pre>"},{"location":"funcionalidades/operadores/#comparacoes-seguras","title":"Compara\u00e7\u00f5es Seguras","text":"<pre><code>// Para n\u00fameros reais, evitar compara\u00e7\u00e3o exata\nreal a = 0.1 + 0.2;\nreal b = 0.3;\n// Evitar\nse (a == b) { /* pode falhar devido \u00e0 precis\u00e3o */ }\n// Preferir\nreal tolerancia = 0.0001;\nse ((a - b) &lt; tolerancia &amp;&amp; (a - b) &gt; -tolerancia) {\n    // compara\u00e7\u00e3o com toler\u00e2ncia\n}\n</code></pre>"},{"location":"funcionalidades/operadores/#exemplos-praticos","title":"Exemplos Pr\u00e1ticos","text":""},{"location":"funcionalidades/operadores/#calculadora-com-todos-os-operadores","title":"Calculadora com Todos os Operadores","text":"<pre><code>programa {\n    funcao menu() {\n        escreva(\"\\n=== CALCULADORA ===\\n\");\n        escreva(\"1. Opera\u00e7\u00f5es b\u00e1sicas (+, -, *, /, %)\\n\");\n        escreva(\"2. Opera\u00e7\u00f5es l\u00f3gicas (&amp;&amp;, ||, !)\\n\");\n        escreva(\"3. Opera\u00e7\u00f5es bitwise (&amp;, |, ^, ~, &lt;&lt;, &gt;&gt;)\\n\");\n        escreva(\"4. Compara\u00e7\u00f5es (&lt;, &gt;, ==, !=, &lt;=, &gt;=)\\n\");\n        escreva(\"0. Sair\\n\");\n        escreva(\"Escolha: \");\n    }\n\n    funcao operacoes_basicas() {\n        real a, b;\n        escreva(\"Digite dois n\u00fameros: \");\n        leia(a);\n        leia(b);\n\n        escreva(\"Soma: \", (a + b), \"\\n\");\n        escreva(\"Subtra\u00e7\u00e3o: \", (a - b), \"\\n\");\n        escreva(\"Multiplica\u00e7\u00e3o: \", (a * b), \"\\n\");\n\n        se (b != 0) {\n            escreva(\"Divis\u00e3o: \", (a / b), \"\\n\");\n            escreva(\"M\u00f3dulo: \", ((inteiro)a % (inteiro)b), \"\\n\");\n        } senao {\n            escreva(\"Divis\u00e3o por zero n\u00e3o \u00e9 poss\u00edvel\\n\");\n        }\n    }\n\n    funcao inicio() {\n        inteiro opcao;\n\n        faca {\n            menu();\n            leia(opcao);\n\n            escolha (opcao) {\n                caso 1:\n                    operacoes_basicas();\n                    pare;\n                caso 0:\n                    escreva(\"Saindo...\\n\");\n                    pare;\n                padrao:\n                    escreva(\"Op\u00e7\u00e3o inv\u00e1lida!\\n\");\n                    pare;\n            }\n        } enquanto (opcao != 0);\n    }\n}\n</code></pre>"},{"location":"funcionalidades/tipos-dados/","title":"Tipos de Dados","text":"<p>O compilador Portugol-C oferece suporte a diferentes tipos de dados primitivos, permitindo a cria\u00e7\u00e3o de programas robustos e vers\u00e1teis.</p>"},{"location":"funcionalidades/tipos-dados/#tipos-suportados","title":"Tipos Suportados","text":""},{"location":"funcionalidades/tipos-dados/#inteiro","title":"Inteiro","text":"<ul> <li>Palavra-chave: <code>inteiro</code></li> <li>Equivalente em C: <code>int</code></li> <li>Descri\u00e7\u00e3o: N\u00fameros inteiros com sinal</li> <li>Exemplo: <pre><code>inteiro idade;\ninteiro contador = 10;\n</code></pre></li> </ul>"},{"location":"funcionalidades/tipos-dados/#real","title":"Real","text":"<ul> <li>Palavra-chave: <code>real</code></li> <li>Equivalente em C: <code>float</code></li> <li>Descri\u00e7\u00e3o: N\u00fameros de ponto flutuante</li> <li>Exemplo: <pre><code>real altura;\nreal preco = 19.99;\nreal pi = 3.14159;\n</code></pre></li> </ul>"},{"location":"funcionalidades/tipos-dados/#caracter","title":"Caracter","text":"<ul> <li>Palavra-chave: <code>caracter</code></li> <li>Equivalente em C: <code>char</code></li> <li>Descri\u00e7\u00e3o: Caracteres ASCII individuais</li> <li>Exemplo: <pre><code>caracter letra;\ncaracter inicial = 'A';\ncaracter simbolo = '@';\n</code></pre></li> </ul>"},{"location":"funcionalidades/tipos-dados/#logico","title":"Logico","text":"<ul> <li>Palavra-chave: <code>logico</code></li> <li>Equivalente em C: <code>int</code> (0 ou 1)</li> <li>Descri\u00e7\u00e3o: Valores booleanos verdadeiro ou falso</li> <li>Exemplo: <pre><code>logico ativo;\nlogico valido = verdadeiro;\nlogico concluido = falso;\n</code></pre></li> </ul>"},{"location":"funcionalidades/tipos-dados/#declaracao-de-variaveis","title":"Declara\u00e7\u00e3o de Vari\u00e1veis","text":""},{"location":"funcionalidades/tipos-dados/#sintaxe-basica","title":"Sintaxe B\u00e1sica","text":"<pre><code>tipo nome_variavel;\ntipo nome_variavel = valor_inicial;\n</code></pre>"},{"location":"funcionalidades/tipos-dados/#exemplos-de-declaracoes","title":"Exemplos de Declara\u00e7\u00f5es","text":"<pre><code>// Declara\u00e7\u00f5es simples\ninteiro x;\nreal nota;\ncaracter grade;\nlogico aprovado;\n// Declara\u00e7\u00f5es com inicializa\u00e7\u00e3o\ninteiro idade = 25;\nreal salario = 3500.50;\ncaracter categoria = 'A';\nlogico ativo = verdadeiro;\n</code></pre>"},{"location":"funcionalidades/tipos-dados/#inicializacao","title":"Inicializa\u00e7\u00e3o","text":"<p>Todas as vari\u00e1veis podem ser inicializadas no momento da declara\u00e7\u00e3o ou receber valores posteriormente atrav\u00e9s de atribui\u00e7\u00f5es.</p>"},{"location":"funcionalidades/tipos-dados/#valores-padrao","title":"Valores Padr\u00e3o","text":"<ul> <li>inteiro: 0 (quando n\u00e3o inicializado explicitamente)</li> <li>real: 0.0</li> <li>caracter: '\\0' (caractere nulo)</li> <li>logico: falso</li> </ul>"},{"location":"funcionalidades/tipos-dados/#literais","title":"Literais","text":""},{"location":"funcionalidades/tipos-dados/#inteiros","title":"Inteiros","text":"<ul> <li>N\u00fameros inteiros positivos ou negativos</li> <li>Exemplos: <code>42</code>, <code>-15</code>, <code>0</code>, <code>1000</code></li> </ul>"},{"location":"funcionalidades/tipos-dados/#reais","title":"Reais","text":"<ul> <li>N\u00fameros decimais com ponto como separador</li> <li>Exemplos: <code>3.14</code>, <code>-2.5</code>, <code>0.0</code>, <code>100.99</code></li> </ul>"},{"location":"funcionalidades/tipos-dados/#caracteres","title":"Caracteres","text":"<ul> <li>Caracteres entre aspas simples</li> <li>Exemplos: <code>'a'</code>, <code>'Z'</code>, <code>'9'</code>, <code>'@'</code></li> </ul>"},{"location":"funcionalidades/tipos-dados/#logicos","title":"L\u00f3gicos","text":"<ul> <li>Palavras-chave: <code>verdadeiro</code> e <code>falso</code></li> <li>Equivalem a 1 e 0 respectivamente em C</li> </ul>"},{"location":"funcionalidades/tipos-dados/#conversoes-de-tipo","title":"Convers\u00f5es de Tipo","text":"<p>O compilador realiza convers\u00f5es autom\u00e1ticas quando necess\u00e1rio:</p>"},{"location":"funcionalidades/tipos-dados/#conversoes-implicitas","title":"Convers\u00f5es Impl\u00edcitas","text":"<ul> <li><code>inteiro</code> \u2192 <code>real</code>: Autom\u00e1tica quando necess\u00e1rio</li> <li><code>caracter</code> \u2192 <code>inteiro</code>: Valor ASCII do caractere</li> <li><code>logico</code> \u2192 <code>inteiro</code>: verdadeiro=1, falso=0</li> </ul>"},{"location":"funcionalidades/tipos-dados/#exemplos-de-uso","title":"Exemplos de Uso","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro num = 42;\n        real decimal = 3.14;\n        caracter letra = 'A';\n        logico status = verdadeiro;\n\n        escreva(\"N\u00famero: \", num, \"\\n\");\n        escreva(\"Decimal: \", decimal, \"\\n\");\n        escreva(\"Letra: \", letra, \"\\n\");\n        escreva(\"Status: \", status, \"\\n\");\n    }\n}\n</code></pre>"},{"location":"funcionalidades/tipos-dados/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ul> <li>N\u00e3o h\u00e1 verifica\u00e7\u00e3o de overflow/underflow em tempo de execu\u00e7\u00e3o</li> <li>Strings devem ser implementadas como vetores de caracteres</li> <li>N\u00e3o h\u00e1 garbage collection autom\u00e1tico</li> <li>Precis\u00e3o de n\u00fameros reais limitada pelo tipo <code>float</code> do C</li> </ul>"},{"location":"funcionalidades/tipos-dados/#boas-praticas","title":"Boas Pr\u00e1ticas","text":"<ol> <li>Inicialize vari\u00e1veis: Sempre inicialize vari\u00e1veis antes do uso</li> <li>Nomes descritivos: Use nomes que descrevam o prop\u00f3sito da vari\u00e1vel</li> <li>Tipo apropriado: Escolha o tipo mais adequado para cada situa\u00e7\u00e3o</li> <li>Convers\u00f5es expl\u00edcitas: Seja expl\u00edcito em convers\u00f5es quando poss\u00edvel</li> </ol> <pre><code>// Boa pr\u00e1tica\ninteiro idade = 0;\nreal salario = 0.0;\ncaracter categoria = 'N';\nlogico ativo = falso;\n// Em vez de\ninteiro x;\nreal y;\ncaracter z;\nlogico w;\n</code></pre>"},{"location":"funcionalidades/vetores/","title":"Vetores","text":"<p>O Portugol-C oferece suporte completo a vetores (arrays) para todos os tipos de dados suportados. Vetores permitem armazenar m\u00faltiplos valores do mesmo tipo em uma \u00fanica estrutura de dados.</p>"},{"location":"funcionalidades/vetores/#declaracao-de-vetores","title":"Declara\u00e7\u00e3o de Vetores","text":""},{"location":"funcionalidades/vetores/#sintaxe-basica","title":"Sintaxe B\u00e1sica","text":"<pre><code>tipo nome_vetor[tamanho];\ntipo nome_vetor[tamanho] = {valores_iniciais};\n</code></pre>"},{"location":"funcionalidades/vetores/#exemplos-de-declaracao","title":"Exemplos de Declara\u00e7\u00e3o","text":"<pre><code>// Declara\u00e7\u00e3o simples\ninteiro numeros[10];\nreal notas[5];\ncaracter nome[50];\nlogico flags[8];\n// Declara\u00e7\u00e3o com inicializa\u00e7\u00e3o\ninteiro pares[5] = {2, 4, 6, 8, 10};\nreal temperaturas[3] = {25.5, 30.0, 28.2};\ncaracter vogais[5] = {'a', 'e', 'i', 'o', 'u'};\nlogico estados[4] = {verdadeiro, falso, verdadeiro, falso};\n</code></pre>"},{"location":"funcionalidades/vetores/#tipos-de-vetores-suportados","title":"Tipos de Vetores Suportados","text":""},{"location":"funcionalidades/vetores/#vetores-de-inteiros","title":"Vetores de Inteiros","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro numeros[5];\n\n        // Preenchimento manual\n        numeros[0] = 10;\n        numeros[1] = 20;\n        numeros[2] = 30;\n        numeros[3] = 40;\n        numeros[4] = 50;\n\n        // Exibi\u00e7\u00e3o\n        para (inteiro i = 0; i &lt; 5; i++) {\n            escreva(\"numeros[\", i, \"] = \", numeros[i], \"\\n\");\n        }\n    }\n}\n</code></pre>"},{"location":"funcionalidades/vetores/#vetores-de-reais","title":"Vetores de Reais","text":"<pre><code>programa {\n    funcao inicio() {\n        real precos[4] = {15.99, 25.50, 8.75, 42.30};\n        real soma = 0.0;\n\n        // Calcular soma\n        para (inteiro i = 0; i &lt; 4; i++) {\n            soma = soma + precos[i];\n        }\n\n        real media = soma / 4.0;\n        escreva(\"M\u00e9dia dos pre\u00e7os: \", media, \"\\n\");\n    }\n}\n</code></pre>"},{"location":"funcionalidades/vetores/#vetores-de-caracteres","title":"Vetores de Caracteres","text":"<pre><code>programa {\n    funcao inicio() {\n        caracter palavra[10] = {'P', 'o', 'r', 't', 'u', 'g', 'o', 'l', '\\0'};\n\n        // Exibir como string\n        escreva(\"Palavra: \");\n        inteiro i = 0;\n        enquanto (palavra[i] != '\\0') {\n            escreva(palavra[i]);\n            i++;\n        }\n        escreva(\"\\n\");\n\n        // Contar caracteres\n        inteiro tamanho = 0;\n        enquanto (palavra[tamanho] != '\\0') {\n            tamanho++;\n        }\n        escreva(\"Tamanho: \", tamanho, \"\\n\");\n    }\n}\n</code></pre>"},{"location":"funcionalidades/vetores/#vetores-logicos","title":"Vetores L\u00f3gicos","text":"<pre><code>programa {\n    funcao inicio() {\n        logico respostas[5];\n        inteiro corretas = 0;\n\n        // Simular respostas de um quiz\n        respostas[0] = verdadeiro;\n        respostas[1] = falso;\n        respostas[2] = verdadeiro;\n        respostas[3] = verdadeiro;\n        respostas[4] = falso;\n\n        // Contar respostas corretas\n        para (inteiro i = 0; i &lt; 5; i++) {\n            se (respostas[i] == verdadeiro) {\n                corretas++;\n            }\n        }\n\n        escreva(\"Respostas corretas: \", corretas, \" de 5\\n\");\n    }\n}\n</code></pre>"},{"location":"funcionalidades/vetores/#operacoes-com-vetores","title":"Opera\u00e7\u00f5es com Vetores","text":""},{"location":"funcionalidades/vetores/#leitura-de-dados","title":"Leitura de Dados","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro tamanho = 5;\n        real valores[5];\n\n        // Ler valores do usu\u00e1rio\n        escreva(\"Digite \", tamanho, \" valores:\\n\");\n        para (inteiro i = 0; i &lt; tamanho; i++) {\n            escreva(\"Valor \", (i + 1), \": \");\n            leia(valores[i]);\n        }\n\n        // Exibir valores lidos\n        escreva(\"\\nValores digitados:\\n\");\n        para (inteiro i = 0; i &lt; tamanho; i++) {\n            escreva(valores[i], \" \");\n        }\n        escreva(\"\\n\");\n    }\n}\n</code></pre>"},{"location":"funcionalidades/vetores/#busca-em-vetores","title":"Busca em Vetores","text":"<pre><code>programa {\n    inteiro buscar(inteiro vetor[], inteiro tamanho, inteiro valor) {\n        para (inteiro i = 0; i &lt; tamanho; i++) {\n            se (vetor[i] == valor) {\n                retorne i; // Retorna o \u00edndice\n            }\n        }\n        retorne -1; // N\u00e3o encontrado\n    }\n\n    funcao inicio() {\n        inteiro numeros[8] = {10, 25, 33, 47, 52, 68, 74, 89};\n        inteiro procurado = 47;\n\n        inteiro posicao = buscar(numeros, 8, procurado);\n\n        se (posicao != -1) {\n            escreva(\"Valor \", procurado, \" encontrado na posi\u00e7\u00e3o \", posicao, \"\\n\");\n        } senao {\n            escreva(\"Valor \", procurado, \" n\u00e3o encontrado\\n\");\n        }\n    }\n}\n</code></pre>"},{"location":"funcionalidades/vetores/#ordenacao-de-vetores","title":"Ordena\u00e7\u00e3o de Vetores","text":"<pre><code>programa {\n    funcao ordenar_bubble_sort(inteiro vetor[], inteiro tamanho) {\n        para (inteiro i = 0; i &lt; tamanho - 1; i++) {\n            para (inteiro j = 0; j &lt; tamanho - i - 1; j++) {\n                se (vetor[j] &gt; vetor[j + 1]) {\n                    // Trocar elementos\n                    inteiro temp = vetor[j];\n                    vetor[j] = vetor[j + 1];\n                    vetor[j + 1] = temp;\n                }\n            }\n        }\n    }\n\n    funcao exibir_vetor(inteiro vetor[], inteiro tamanho) {\n        para (inteiro i = 0; i &lt; tamanho; i++) {\n            escreva(vetor[i], \" \");\n        }\n        escreva(\"\\n\");\n    }\n\n    funcao inicio() {\n        inteiro numeros[6] = {64, 34, 25, 12, 22, 11};\n\n        escreva(\"Vetor original: \");\n        exibir_vetor(numeros, 6);\n\n        ordenar_bubble_sort(numeros, 6);\n\n        escreva(\"Vetor ordenado: \");\n        exibir_vetor(numeros, 6);\n    }\n}\n</code></pre>"},{"location":"funcionalidades/vetores/#funcoes-com-vetores","title":"Fun\u00e7\u00f5es com Vetores","text":""},{"location":"funcionalidades/vetores/#passagem-de-vetores-para-funcoes","title":"Passagem de Vetores para Fun\u00e7\u00f5es","text":"<pre><code>programa {\n    real calcular_media(real notas[], inteiro quantidade) {\n        real soma = 0.0;\n\n        para (inteiro i = 0; i &lt; quantidade; i++) {\n            soma = soma + notas[i];\n        }\n\n        retorne soma / quantidade;\n    }\n\n    inteiro encontrar_maior(inteiro valores[], inteiro tamanho) {\n        inteiro maior = valores[0];\n\n        para (inteiro i = 1; i &lt; tamanho; i++) {\n            se (valores[i] &gt; maior) {\n                maior = valores[i];\n            }\n        }\n\n        retorne maior;\n    }\n\n    funcao preencher_sequencial(inteiro vetor[], inteiro tamanho) {\n        para (inteiro i = 0; i &lt; tamanho; i++) {\n            vetor[i] = (i + 1) * 10;\n        }\n    }\n\n    funcao inicio() {\n        real notas[4] = {8.5, 7.2, 9.1, 6.8};\n        inteiro valores[5];\n\n        // Calcular m\u00e9dia\n        real media = calcular_media(notas, 4);\n        escreva(\"M\u00e9dia das notas: \", media, \"\\n\");\n\n        // Preencher e encontrar maior\n        preencher_sequencial(valores, 5);\n        inteiro maior = encontrar_maior(valores, 5);\n        escreva(\"Maior valor: \", maior, \"\\n\");\n    }\n}\n</code></pre>"},{"location":"funcionalidades/vetores/#algoritmos-comuns","title":"Algoritmos Comuns","text":""},{"location":"funcionalidades/vetores/#inversao-de-vetor","title":"Invers\u00e3o de Vetor","text":"<pre><code>programa {\n    funcao inverter_vetor(inteiro vetor[], inteiro tamanho) {\n        inteiro inicio = 0;\n        inteiro fim = tamanho - 1;\n\n        enquanto (inicio &lt; fim) {\n            // Trocar elementos\n            inteiro temp = vetor[inicio];\n            vetor[inicio] = vetor[fim];\n            vetor[fim] = temp;\n\n            inicio++;\n            fim--;\n        }\n    }\n\n    funcao inicio() {\n        inteiro numeros[5] = {1, 2, 3, 4, 5};\n\n        escreva(\"Vetor original: \");\n        para (inteiro i = 0; i &lt; 5; i++) {\n            escreva(numeros[i], \" \");\n        }\n        escreva(\"\\n\");\n\n        inverter_vetor(numeros, 5);\n\n        escreva(\"Vetor invertido: \");\n        para (inteiro i = 0; i &lt; 5; i++) {\n            escreva(numeros[i], \" \");\n        }\n        escreva(\"\\n\");\n    }\n}\n</code></pre>"},{"location":"funcionalidades/vetores/#remocao-de-duplicatas","title":"Remo\u00e7\u00e3o de Duplicatas","text":"<pre><code>programa {\n    inteiro remover_duplicatas(inteiro vetor[], inteiro tamanho) {\n        inteiro novo_tamanho = 0;\n\n        para (inteiro i = 0; i &lt; tamanho; i++) {\n            logico eh_duplicata = falso;\n\n            // Verificar se o elemento j\u00e1 existe\n            para (inteiro j = 0; j &lt; novo_tamanho; j++) {\n                se (vetor[i] == vetor[j]) {\n                    eh_duplicata = verdadeiro;\n                    pare;\n                }\n            }\n\n            // Se n\u00e3o \u00e9 duplicata, manter no vetor\n            se (!eh_duplicata) {\n                vetor[novo_tamanho] = vetor[i];\n                novo_tamanho++;\n            }\n        }\n\n        retorne novo_tamanho;\n    }\n\n    funcao inicio() {\n        inteiro numeros[8] = {1, 2, 2, 3, 4, 3, 5, 1};\n\n        escreva(\"Vetor original: \");\n        para (inteiro i = 0; i &lt; 8; i++) {\n            escreva(numeros[i], \" \");\n        }\n        escreva(\"\\n\");\n\n        inteiro novo_tamanho = remover_duplicatas(numeros, 8);\n\n        escreva(\"Vetor sem duplicatas: \");\n        para (inteiro i = 0; i &lt; novo_tamanho; i++) {\n            escreva(numeros[i], \" \");\n        }\n        escreva(\"\\n\");\n    }\n}\n</code></pre>"},{"location":"funcionalidades/vetores/#strings-como-vetores-de-caracteres","title":"Strings como Vetores de Caracteres","text":""},{"location":"funcionalidades/vetores/#manipulacao-de-strings","title":"Manipula\u00e7\u00e3o de Strings","text":"<pre><code>programa {\n    inteiro tamanho_string(caracter str[]) {\n        inteiro tamanho = 0;\n        enquanto (str[tamanho] != '\\0') {\n            tamanho++;\n        }\n        retorne tamanho;\n    }\n\n    funcao copiar_string(caracter origem[], caracter destino[]) {\n        inteiro i = 0;\n        enquanto (origem[i] != '\\0') {\n            destino[i] = origem[i];\n            i++;\n        }\n        destino[i] = '\\0'; // Terminar string\n    }\n\n    logico comparar_strings(caracter str1[], caracter str2[]) {\n        inteiro i = 0;\n        enquanto (str1[i] != '\\0' &amp;&amp; str2[i] != '\\0') {\n            se (str1[i] != str2[i]) {\n                retorne falso;\n            }\n            i++;\n        }\n        retorne (str1[i] == str2[i]); // Ambas devem ter terminado\n    }\n\n    funcao inicio() {\n        caracter nome1[20] = {'J', 'o', 'a', 'o', '\\0'};\n        caracter nome2[20];\n        caracter nome3[20] = {'J', 'o', 'a', 'o', '\\0'};\n\n        escreva(\"Tamanho de nome1: \", tamanho_string(nome1), \"\\n\");\n\n        copiar_string(nome1, nome2);\n        escreva(\"Nome copiado: \");\n        inteiro i = 0;\n        enquanto (nome2[i] != '\\0') {\n            escreva(nome2[i]);\n            i++;\n        }\n        escreva(\"\\n\");\n\n        se (comparar_strings(nome1, nome3)) {\n            escreva(\"Os nomes s\u00e3o iguais\\n\");\n        } senao {\n            escreva(\"Os nomes s\u00e3o diferentes\\n\");\n        }\n    }\n}\n</code></pre>"},{"location":"funcionalidades/vetores/#limitacoes-e-consideracoes","title":"Limita\u00e7\u00f5es e Considera\u00e7\u00f5es","text":""},{"location":"funcionalidades/vetores/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ul> <li>Tamanho fixo definido em tempo de compila\u00e7\u00e3o</li> <li>N\u00e3o h\u00e1 verifica\u00e7\u00e3o autom\u00e1tica de limites (bounds checking)</li> <li>N\u00e3o h\u00e1 redimensionamento din\u00e2mico</li> <li>\u00cdndices come\u00e7am em 0 (zero-indexed)</li> </ul>"},{"location":"funcionalidades/vetores/#boas-praticas","title":"Boas Pr\u00e1ticas","text":"<pre><code>// 1. Sempre verificar limites\nfuncao acesso_seguro(inteiro vetor[], inteiro tamanho, inteiro indice) {\n    se (indice &gt;= 0 &amp;&amp; indice &lt; tamanho) {\n        retorne vetor[indice];\n    } senao {\n        escreva(\"Erro: \u00cdndice fora dos limites!\\n\");\n        retorne -1; // Valor de erro\n    }\n}\n// 2. Inicializar vetores\ninteiro numeros[10] = {0}; // Inicializar todos com 0\n// 3. Usar constantes para tamanhos\nprograma {\n    funcao inicio() {\n        inteiro TAMANHO = 5;\n        inteiro valores[5]; // Use TAMANHO se a linguagem permitir\n\n        para (inteiro i = 0; i &lt; TAMANHO; i++) {\n            valores[i] = 0;\n        }\n    }\n}\n// 4. Documentar o prop\u00f3sito dos vetores\ninteiro idades_alunos[30];     // Armazena idades de at\u00e9 30 alunos\nreal notas_provas[4];          // Armazena notas das 4 provas\ncaracter buffer_entrada[256];  // Buffer para entrada do usu\u00e1rio\n</code></pre>"},{"location":"funcionalidades/vetores/#exemplo-completo-sistema-de-notas","title":"Exemplo Completo: Sistema de Notas","text":"<pre><code>programa {\n    funcao entrada_notas(real notas[], inteiro quantidade) {\n        para (inteiro i = 0; i &lt; quantidade; i++) {\n            escreva(\"Digite a nota \", (i + 1), \": \");\n            leia(notas[i]);\n\n            // Valida\u00e7\u00e3o\n            enquanto (notas[i] &lt; 0.0 || notas[i] &gt; 10.0) {\n                escreva(\"Nota inv\u00e1lida. Digite entre 0 e 10: \");\n                leia(notas[i]);\n            }\n        }\n    }\n\n    real calcular_media(real notas[], inteiro quantidade) {\n        real soma = 0.0;\n        para (inteiro i = 0; i &lt; quantidade; i++) {\n            soma = soma + notas[i];\n        }\n        retorne soma / quantidade;\n    }\n\n    inteiro contar_aprovados(real notas[], inteiro quantidade, real media_minima) {\n        inteiro aprovados = 0;\n        para (inteiro i = 0; i &lt; quantidade; i++) {\n            se (notas[i] &gt;= media_minima) {\n                aprovados++;\n            }\n        }\n        retorne aprovados;\n    }\n\n    funcao relatorio(real notas[], inteiro quantidade) {\n        real media = calcular_media(notas, quantidade);\n        inteiro aprovados = contar_aprovados(notas, quantidade, 6.0);\n\n        escreva(\"\\n=== RELAT\u00d3RIO ===\\n\");\n        escreva(\"M\u00e9dia da turma: \", media, \"\\n\");\n        escreva(\"Aprovados (nota &gt;= 6.0): \", aprovados, \"\\n\");\n        escreva(\"Reprovados: \", (quantidade - aprovados), \"\\n\");\n\n        escreva(\"\\nNotas individuais:\\n\");\n        para (inteiro i = 0; i &lt; quantidade; i++) {\n            escreva(\"Aluno \", (i + 1), \": \", notas[i]);\n            se (notas[i] &gt;= 6.0) {\n                escreva(\" (Aprovado)\\n\");\n            } senao {\n                escreva(\" (Reprovado)\\n\");\n            }\n        }\n    }\n\n    funcao inicio() {\n        inteiro quantidade = 5;\n        real notas[5];\n\n        escreva(\"Sistema de Notas - Digite as notas dos alunos\\n\\n\");\n\n        entrada_notas(notas, quantidade);\n        relatorio(notas, quantidade);\n    }\n}\n</code></pre>"},{"location":"funcionalidades/vetores/#performance-e-otimizacao","title":"Performance e Otimiza\u00e7\u00e3o","text":""},{"location":"funcionalidades/vetores/#acesso-sequencial-vs-aleatorio","title":"Acesso Sequencial vs Aleat\u00f3rio","text":"<ul> <li>Acesso sequencial \u00e9 mais eficiente devido \u00e0 localidade de mem\u00f3ria</li> <li>Evite acessos aleat\u00f3rios desnecess\u00e1rios em loops</li> </ul>"},{"location":"funcionalidades/vetores/#algoritmos-eficientes","title":"Algoritmos Eficientes","text":"<ul> <li>Use algoritmos de ordena\u00e7\u00e3o eficientes para vetores grandes</li> <li>Considere busca bin\u00e1ria em vetores ordenados</li> <li>Minimize c\u00f3pias desnecess\u00e1rias de vetores</li> </ul>"},{"location":"funcionalidades/visao-geral/","title":"Vis\u00e3o Geral das Funcionalidades","text":"<p>O Compilador Portugol-C oferece um conjunto abrangente de funcionalidades para tradu\u00e7\u00e3o de c\u00f3digo Portugol para C, mantendo a sem\u00e2ntica e funcionalidade originais.</p>"},{"location":"funcionalidades/visao-geral/#arquitetura-do-compilador","title":"Arquitetura do Compilador","text":"<pre><code>graph TD\n    A[C\u00f3digo Portugol] --&gt; B[An\u00e1lise L\u00e9xica - Flex]\n    B --&gt; C[An\u00e1lise Sint\u00e1tica - Bison]\n    C --&gt; D[\u00c1rvore Sint\u00e1tica Abstrata - AST]\n    D --&gt; E[An\u00e1lise Sem\u00e2ntica]\n    E --&gt; F[Otimiza\u00e7\u00f5es]\n    F --&gt; G[Gera\u00e7\u00e3o de C\u00f3digo C]\n    G --&gt; H[C\u00f3digo C]\n</code></pre>"},{"location":"funcionalidades/visao-geral/#funcionalidades-principais","title":"Funcionalidades Principais","text":""},{"location":"funcionalidades/visao-geral/#analise-lexica-lexer","title":"\ud83d\udd0d An\u00e1lise L\u00e9xica (Lexer)","text":"<ul> <li>Reconhecimento de tokens: identificadores, n\u00fameros, operadores, palavras-chave</li> <li>Suporte a coment\u00e1rios: linha (<code>//</code>) e bloco (<code>/* */</code>)</li> <li>Strings e caracteres: aspas duplas e simples</li> <li>N\u00fameros: inteiros e decimais</li> <li>Operadores especiais: bitwise, incremento/decremento</li> </ul>"},{"location":"funcionalidades/visao-geral/#analise-sintatica-parser","title":"\ud83c\udf33 An\u00e1lise Sint\u00e1tica (Parser)","text":"<ul> <li>Estrutura de programa: valida\u00e7\u00e3o da sintaxe Portugol</li> <li>Constru\u00e7\u00e3o de AST: \u00e1rvore sint\u00e1tica abstrata para an\u00e1lise sem\u00e2ntica</li> <li>Detec\u00e7\u00e3o de erros: identifica\u00e7\u00e3o e relat\u00f3rio de erros sint\u00e1ticos</li> <li>Preced\u00eancia de operadores: tratamento correto da preced\u00eancia</li> </ul>"},{"location":"funcionalidades/visao-geral/#analise-semantica","title":"\ud83e\udde0 An\u00e1lise Sem\u00e2ntica","text":"<ul> <li>Tabela de s\u00edmbolos: gerenciamento de vari\u00e1veis e fun\u00e7\u00f5es</li> <li>Verifica\u00e7\u00e3o de tipos: compatibilidade entre tipos de dados</li> <li>Escopo de vari\u00e1veis: controle de visibilidade</li> <li>Inicializa\u00e7\u00e3o: verifica\u00e7\u00e3o de vari\u00e1veis n\u00e3o inicializadas</li> </ul>"},{"location":"funcionalidades/visao-geral/#otimizacoes","title":"\u26a1 Otimiza\u00e7\u00f5es","text":"<ul> <li>Propaga\u00e7\u00e3o de constantes: substitui\u00e7\u00e3o de express\u00f5es por valores constantes</li> <li>Elimina\u00e7\u00e3o de c\u00f3digo morto: remo\u00e7\u00e3o de c\u00f3digo inalcan\u00e7\u00e1vel</li> <li>Folding de constantes: avalia\u00e7\u00e3o de express\u00f5es constantes em tempo de compila\u00e7\u00e3o</li> </ul>"},{"location":"funcionalidades/visao-geral/#geracao-de-codigo","title":"\ud83c\udfaf Gera\u00e7\u00e3o de C\u00f3digo","text":"<ul> <li>Tradu\u00e7\u00e3o direta: convers\u00e3o fiel do Portugol para C</li> <li>Formata\u00e7\u00e3o: c\u00f3digo C bem formatado e leg\u00edvel</li> <li>Includes autom\u00e1ticos: adi\u00e7\u00e3o autom\u00e1tica de bibliotecas necess\u00e1rias</li> </ul>"},{"location":"funcionalidades/visao-geral/#recursos-suportados","title":"Recursos Suportados","text":""},{"location":"funcionalidades/visao-geral/#tipos-de-dados","title":"\u2705 Tipos de Dados","text":"Portugol C Descri\u00e7\u00e3o <code>inteiro</code> <code>int</code> N\u00fameros inteiros <code>real</code> <code>float</code> N\u00fameros de ponto flutuante <code>caracter</code> <code>char</code> Caracteres ASCII <code>logico</code> <code>bool</code> Valores booleanos"},{"location":"funcionalidades/visao-geral/#estruturas-de-dados","title":"\u2705 Estruturas de Dados","text":"<ul> <li>Vetores: Arrays unidimensionais de tamanho fixo</li> <li>Vari\u00e1veis: Declara\u00e7\u00e3o e inicializa\u00e7\u00e3o</li> <li>Constantes: Valores literais</li> </ul>"},{"location":"funcionalidades/visao-geral/#operadores","title":"\u2705 Operadores","text":""},{"location":"funcionalidades/visao-geral/#aritmeticos","title":"Aritm\u00e9ticos","text":"<ul> <li><code>+</code> (soma)</li> <li><code>-</code> (subtra\u00e7\u00e3o)</li> <li><code>*</code> (multiplica\u00e7\u00e3o)</li> <li><code>/</code> (divis\u00e3o)</li> <li><code>%</code> (m\u00f3dulo)</li> </ul>"},{"location":"funcionalidades/visao-geral/#relacionais","title":"Relacionais","text":"<ul> <li><code>==</code> (igual)</li> <li><code>!=</code> (diferente)</li> <li><code>&lt;</code> (menor)</li> <li><code>&gt;</code> (maior)</li> <li><code>&lt;=</code> (menor ou igual)</li> <li><code>&gt;=</code> (maior ou igual)</li> </ul>"},{"location":"funcionalidades/visao-geral/#logicos","title":"L\u00f3gicos","text":"<ul> <li><code>&amp;&amp;</code> (E l\u00f3gico)</li> <li><code>||</code> (OU l\u00f3gico)</li> <li><code>!</code> (N\u00c3O l\u00f3gico)</li> </ul>"},{"location":"funcionalidades/visao-geral/#bitwise","title":"Bitwise","text":"<ul> <li><code>&amp;</code> (E bitwise)</li> <li><code>|</code> (OU bitwise)</li> <li><code>^</code> (XOR bitwise)</li> <li><code>~</code> (NOT bitwise)</li> <li><code>&lt;&lt;</code> (shift left)</li> <li><code>&gt;&gt;</code> (shift right)</li> </ul>"},{"location":"funcionalidades/visao-geral/#unarios","title":"Un\u00e1rios","text":"<ul> <li><code>++</code> (incremento)</li> <li><code>--</code> (decremento)</li> <li><code>-</code> (nega\u00e7\u00e3o)</li> </ul>"},{"location":"funcionalidades/visao-geral/#estruturas-de-controle","title":"\u2705 Estruturas de Controle","text":""},{"location":"funcionalidades/visao-geral/#condicionais","title":"Condicionais","text":"<ul> <li><code>se</code> / <code>senao</code> (if/else)</li> <li><code>escolha</code> / <code>caso</code> (switch/case)</li> </ul>"},{"location":"funcionalidades/visao-geral/#lacos","title":"La\u00e7os","text":"<ul> <li><code>enquanto</code> (while)</li> <li><code>para</code> (for)</li> </ul>"},{"location":"funcionalidades/visao-geral/#controle-de-fluxo","title":"Controle de Fluxo","text":"<ul> <li><code>retorne</code> (return)</li> <li><code>pare</code> (break)</li> </ul>"},{"location":"funcionalidades/visao-geral/#entrada-e-saida","title":"\u2705 Entrada e Sa\u00edda","text":"<ul> <li><code>leia()</code> - Leitura de dados do usu\u00e1rio</li> <li><code>escreva()</code> - Escrita de dados na tela</li> <li>Suporte a m\u00faltiplos argumentos</li> <li>Formata\u00e7\u00e3o autom\u00e1tica por tipo</li> </ul>"},{"location":"funcionalidades/visao-geral/#funcoes","title":"\u2705 Fun\u00e7\u00f5es","text":"<ul> <li>Declara\u00e7\u00e3o de fun\u00e7\u00f5es</li> <li>Par\u00e2metros por valor e refer\u00eancia</li> <li>Tipos de retorno</li> <li>Fun\u00e7\u00e3o principal <code>inicio()</code></li> </ul>"},{"location":"funcionalidades/visao-geral/#limitacoes-conhecidas","title":"Limita\u00e7\u00f5es Conhecidas","text":""},{"location":"funcionalidades/visao-geral/#nao-suportado-ainda","title":"\u274c N\u00e3o Suportado (ainda)","text":"<ul> <li>Arrays multidimensionais</li> <li>Strings como tipo nativo</li> <li>Structs/registros</li> <li>Ponteiros expl\u00edcitos</li> <li>Aloca\u00e7\u00e3o din\u00e2mica de mem\u00f3ria</li> <li>Bibliotecas externas</li> </ul>"},{"location":"funcionalidades/visao-geral/#qualidade-e-confiabilidade","title":"Qualidade e Confiabilidade","text":""},{"location":"funcionalidades/visao-geral/#sistema-de-testes","title":"\ud83e\uddea Sistema de Testes","text":"<ul> <li>32 casos de teste automatizados</li> <li>100% de cobertura das funcionalidades implementadas</li> <li>CI/CD integrado com GitHub Actions</li> <li>Valida\u00e7\u00e3o autom\u00e1tica de cada commit</li> </ul>"},{"location":"funcionalidades/visao-geral/#metricas","title":"\ud83d\udcca M\u00e9tricas","text":"<ul> <li>Taxa de sucesso: 100% nos testes automatizados</li> <li>Tempo de compila\u00e7\u00e3o: &lt; 1s para programas t\u00edpicos</li> <li>Compatibilidade: GCC 11.4.0+, Flex 2.6.4+, Bison 3.8.2+</li> </ul>"},{"location":"funcionalidades/visao-geral/#robustez","title":"\ud83d\udd27 Robustez","text":"<ul> <li>Tratamento de erros: Mensagens claras e precisas</li> <li>Recupera\u00e7\u00e3o: Continua\u00e7\u00e3o ap\u00f3s erros n\u00e3o fatais</li> <li>Valida\u00e7\u00e3o: Verifica\u00e7\u00e3o de entrada em tempo de compila\u00e7\u00e3o</li> </ul>"},{"location":"funcionalidades/visao-geral/#roadmap-futuro","title":"Roadmap Futuro","text":""},{"location":"funcionalidades/visao-geral/#proximas-funcionalidades","title":"\ud83d\ude80 Pr\u00f3ximas Funcionalidades","text":"<ol> <li>Strings nativas: Suporte completo a strings</li> <li>Arrays multidimensionais: Matrizes e tensores</li> <li>Structs: Tipos de dados compostos</li> <li>Fun\u00e7\u00f5es avan\u00e7adas: Recurs\u00e3o, sobrecarga</li> <li>Bibliotecas: Sistema de m\u00f3dulos</li> </ol>"},{"location":"funcionalidades/visao-geral/#melhorias-planejadas","title":"\ud83c\udfaf Melhorias Planejadas","text":"<ol> <li>Performance: Otimiza\u00e7\u00f5es adicionais</li> <li>Diagn\u00f3sticos: Mensagens de erro mais precisas</li> <li>IDE: Plugin para editores populares</li> <li>Debugging: Gera\u00e7\u00e3o de informa\u00e7\u00f5es de debug</li> </ol>"},{"location":"guia-usuario/como-usar/","title":"Como Usar o Compilador","text":""},{"location":"guia-usuario/como-usar/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O Compilador Portugol-C traduz programas escrititos em Portugol para c\u00f3digo C equivalente. O processo \u00e9 simples e direto.</p>"},{"location":"guia-usuario/como-usar/#estrutura-basica-de-um-programa-portugol","title":"Estrutura B\u00e1sica de um Programa Portugol","text":"<p>Todo programa Portugol deve seguir esta estrutura:</p> <pre><code>programa {\n    funcao inicio() {\n        // Seu c\u00f3digo aqui\n    }\n}\n</code></pre>"},{"location":"guia-usuario/como-usar/#compilando-um-arquivo","title":"Compilando um Arquivo","text":""},{"location":"guia-usuario/como-usar/#passo-1-criar-um-arquivo-portugol","title":"Passo 1: Criar um arquivo Portugol","text":"<p>Crie um arquivo com extens\u00e3o <code>.pg</code>:</p> <pre><code># Exemplo: criar hello.pg\necho 'programa {\n    funcao inicio() {\n        escreva(\"Hello, World!\")\n    }\n}' &gt; hello.pg\n</code></pre>"},{"location":"guia-usuario/como-usar/#passo-2-compilar-o-arquivo","title":"Passo 2: Compilar o arquivo","text":"<pre><code># Compilar um arquivo espec\u00edfico\nmake run FILE=hello.pg\n\n# Ou usar um arquivo da pasta de exemplos\nmake run FILE=exemplos/exemplo1.pg\n</code></pre>"},{"location":"guia-usuario/como-usar/#passo-3-executar-o-codigo-c-gerado","title":"Passo 3: Executar o c\u00f3digo C gerado","text":"<pre><code># Compilar o c\u00f3digo C gerado\ngcc build/saida.c -o programa\n\n# Executar o programa\n./programa\n</code></pre>"},{"location":"guia-usuario/como-usar/#comandos-disponiveis","title":"Comandos Dispon\u00edveis","text":""},{"location":"guia-usuario/como-usar/#compilacao","title":"Compila\u00e7\u00e3o","text":"<pre><code># Compilar o compilador\nmake\n\n# Compilar e executar um arquivo Portugol\nmake run FILE=&lt;caminho_para_arquivo.pg&gt;\n\n# Limpar arquivos gerados\nmake clean\n</code></pre>"},{"location":"guia-usuario/como-usar/#testes","title":"Testes","text":"<pre><code># Executar todos os testes\nmake test\n\n# Verificar vers\u00e3o do GCC\nmake check_gcc_version\n</code></pre>"},{"location":"guia-usuario/como-usar/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"guia-usuario/como-usar/#exemplo-1-variaveis-e-operacoes","title":"Exemplo 1: Vari\u00e1veis e Opera\u00e7\u00f5es","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro idade\n        real altura\n        idade = 25\n        altura = 1.75\n        escreva(\"Idade: \", idade)\n        escreva(\"Altura: \", altura)\n    }\n}\n</code></pre>"},{"location":"guia-usuario/como-usar/#exemplo-2-estruturas-de-controle","title":"Exemplo 2: Estruturas de Controle","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro numero\n        leia(numero)\n\n        se (numero &gt; 0) {\n            escreva(\"N\u00famero positivo\")\n        } senao {\n            escreva(\"N\u00famero n\u00e3o positivo\")\n        }\n    }\n}\n</code></pre>"},{"location":"guia-usuario/como-usar/#exemplo-3-vetores","title":"Exemplo 3: Vetores","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro v[3]\n        v[0] = 10\n        v[1] = 20\n        v[2] = 30\n\n        escreva(\"Primeiro elemento: \", v[0])\n    }\n}\n</code></pre>"},{"location":"guia-usuario/como-usar/#exemplo-4-lacos","title":"Exemplo 4: La\u00e7os","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro i\n\n        para (i = 1; i &lt;= 5; i = i + 1) {\n            escreva(\"N\u00famero: \", i)\n        }\n    }\n}\n</code></pre>"},{"location":"guia-usuario/como-usar/#saida-esperada","title":"Sa\u00edda Esperada","text":"<p>Ap\u00f3s a compila\u00e7\u00e3o, o compilador gera:</p> <ol> <li>build/saida.c - C\u00f3digo C equivalente</li> <li>Mensagens de debug - Durante a compila\u00e7\u00e3o (opcional)</li> <li>Verifica\u00e7\u00e3o de erros - An\u00e1lise l\u00e9xica e sint\u00e1tica</li> </ol>"},{"location":"guia-usuario/como-usar/#fluxo-completo","title":"Fluxo Completo","text":"<pre><code># 1. Escrever c\u00f3digo Portugol\nnano meu_programa.pg\n\n# 2. Compilar\nmake run FILE=meu_programa.pg\n\n# 3. Verificar sa\u00edda C gerada\ncat build/saida.c\n\n# 4. Compilar e executar o C\ngcc build/saida.c -o meu_programa\n./meu_programa\n</code></pre>"},{"location":"guia-usuario/como-usar/#dicas-importantes","title":"Dicas Importantes","text":"<p>Sintaxe</p> <ul> <li>Use chaves <code>{}</code> para delimitar blocos</li> <li>Termine comandos com ponto e v\u00edrgula quando necess\u00e1rio</li> <li>Declare vari\u00e1veis antes de usar</li> </ul> <p>Cuidados</p> <ul> <li>Nomes de vari\u00e1veis devem come\u00e7ar com letra</li> <li>Tipos de dados devem ser declarados explicitamente</li> <li>Arrays precisam ter tamanho fixo definido</li> </ul> <p>Observa\u00e7\u00e3o</p> <ul> <li>O compilador gera c\u00f3digo C otimizado</li> <li>Verifica\u00e7\u00f5es de erro s\u00e3o feitas automaticamente</li> <li>Suporte a coment\u00e1rios de linha (<code>//</code>) e bloco (<code>/* */</code>)</li> </ul>"},{"location":"guia-usuario/exemplos/","title":"Exemplos de C\u00f3digo","text":"<p>Esta se\u00e7\u00e3o apresenta diversos exemplos pr\u00e1ticos de programas em Portugol e sua tradu\u00e7\u00e3o para C.</p>"},{"location":"guia-usuario/exemplos/#programas-basicos","title":"Programas B\u00e1sicos","text":""},{"location":"guia-usuario/exemplos/#hello-world","title":"Hello World","text":"<p>=== \"Portugol\"     <pre><code>programa {\n    funcao inicio() {\n        escreva(\"Hello, World!\")\n    }\n}\n</code></pre></p> <p>=== \"C Gerado\"     <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"Hello, World!\");\n    return 0;\n}\n</code></pre></p>"},{"location":"guia-usuario/exemplos/#variaveis-e-tipos","title":"Vari\u00e1veis e Tipos","text":"<p>=== \"Portugol\"     <pre><code>programa {\n    funcao inicio() {\n        inteiro idade\n        caracter inicial\n        logico ativo\n\n        idade = 25\n        inicial = 65  // 'A'\n        ativo = 1     // verdadeiro\n\n        escreva(\"Idade: \", idade)\n        escreva(\"Inicial: \", inicial)\n        escreva(\"Ativo: \", ativo)\n    }\n}\n</code></pre></p> <p>=== \"C Gerado\"     <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int idade;\n    char inicial;\n    bool ativo;\n    idade = 25;\n    inicial = 65;\n    ativo = 1;\n    printf(\"Idade: %d\\n\", idade);\n    printf(\"Inicial: %c\\n\", inicial);\n    printf(\"Ativo: %d\\n\", ativo);\n    return 0;\n}\n</code></pre></p>"},{"location":"guia-usuario/exemplos/#estruturas-de-controle","title":"Estruturas de Controle","text":""},{"location":"guia-usuario/exemplos/#condicionais","title":"Condicionais","text":"<p>=== \"Portugol\"     <pre><code>programa {\n    funcao inicio() {\n        inteiro numero\n        leia(numero)\n\n        se (numero &gt; 0) {\n            escreva(\"N\u00famero positivo\")\n        } senao se (numero &lt; 0) {\n            escreva(\"N\u00famero negativo\")\n        } senao {\n            escreva(\"N\u00famero \u00e9 zero\")\n        }\n    }\n}\n</code></pre></p> <p>=== \"C Gerado\"     <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int numero;\n    scanf(\"%d\", &amp;numero);\n    if (numero &gt; 0) {\n        printf(\"N\u00famero positivo\");\n    } else if (numero &lt; 0) {\n        printf(\"N\u00famero negativo\");\n    } else {\n        printf(\"N\u00famero \u00e9 zero\");\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"guia-usuario/exemplos/#laco-while","title":"La\u00e7o While","text":"<p>=== \"Portugol\"     <pre><code>programa {\n    funcao inicio() {\n        inteiro contador\n        contador = 1\n\n        enquanto (contador &lt;= 5) {\n            escreva(\"Contador: \", contador)\n            contador = contador + 1\n        }\n    }\n}\n</code></pre></p> <p>=== \"C Gerado\"     <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int contador;\n    contador = 1;\n    while (contador &lt;= 5) {\n        printf(\"Contador: %d\\n\", contador);\n        contador = contador + 1;\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"guia-usuario/exemplos/#laco-for","title":"La\u00e7o For","text":"<p>=== \"Portugol\"     <pre><code>programa {\n    funcao inicio() {\n        inteiro i\n\n        para (inteiro i = 1; i &lt;= 10; i++) {\n            escreva(\"N\u00famero: \", i)\n        }\n    }\n}\n</code></pre></p> <p>=== \"C Gerado\"     <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    for (int i = 1; i &lt;= 10; i++) {\n        printf(\"N\u00famero: %d\\n\", i);\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"guia-usuario/exemplos/#vetores-arrays","title":"Vetores (Arrays)","text":""},{"location":"guia-usuario/exemplos/#vetor-de-inteiros","title":"Vetor de Inteiros","text":"<p>=== \"Portugol\"     <pre><code>programa {\n    funcao inicio() {\n        inteiro numeros[5]\n        inteiro i\n\n        // Preenchendo o vetor\n        para (inteiro i = 0; i &lt; 5; i++) {\n            numeros[i] = i * 10\n        }\n\n        // Exibindo o vetor\n        para (inteiro i = 0; i &lt; 5; i++) {\n            escreva(\"numeros[\", i, \"] = \", numeros[i])\n        }\n    }\n}\n</code></pre></p> <p>=== \"C Gerado\"     <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int numeros[5];\n    int i;\n    for (int i = 0; i &lt; 5; i++) {\n        numeros[i] = i * 10;\n    }\n    for (int i = 0; i &lt; 5; i++) {\n        printf(\"numeros[%d] = %d\\n\", i, numeros[i]);\n    }\n    return 0;\n}\n</code></pre></p>"},{"location":"guia-usuario/exemplos/#vetor-de-reais","title":"Vetor de Reais","text":"<p>=== \"Portugol\"     <pre><code>programa {\n    funcao inicio() {\n        real notas[3]\n        real media\n\n        notas[0] = 8.5\n        notas[1] = 9.0\n        notas[2] = 7.5\n\n        media = (notas[0] + notas[1] + notas[2]) / 3\n        escreva(\"M\u00e9dia: \", media)\n    }\n}\n</code></pre></p> <p>=== \"C Gerado\"     <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    float notas[3];\n    float media;\n    notas[0] = 8.5;\n    notas[1] = 9.0;\n    notas[2] = 7.5;\n    media = (notas[0] + notas[1] + notas[2]) / 3;\n    printf(\"M\u00e9dia: %f\\n\", media);\n    return 0;\n}\n</code></pre></p>"},{"location":"guia-usuario/exemplos/#operacoes-avancadas","title":"Opera\u00e7\u00f5es Avan\u00e7adas","text":""},{"location":"guia-usuario/exemplos/#operadores-bitwise","title":"Operadores Bitwise","text":"<p>=== \"Portugol\"     <pre><code>programa {\n    funcao inicio() {\n        inteiro a, b, resultado\n        a = 12  // 1100 em bin\u00e1rio\n        b = 7   // 0111 em bin\u00e1rio\n\n        resultado = a &amp; b  // AND\n        escreva(\"AND: \", resultado)\n\n        resultado = a | b  // OR\n        escreva(\"OR: \", resultado)\n\n        resultado = a ^ b  // XOR\n        escreva(\"XOR: \", resultado)\n    }\n}\n</code></pre></p> <p>=== \"C Gerado\"     <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int a, b, resultado;\n    a = 12;\n    b = 7;\n    resultado = a &amp; b;\n    printf(\"AND: %d\\n\", resultado);\n    resultado = a | b;\n    printf(\"OR: %d\\n\", resultado);\n    resultado = a ^ b;\n    printf(\"XOR: %d\\n\", resultado);\n    return 0;\n}\n</code></pre></p>"},{"location":"guia-usuario/exemplos/#incremento-e-decremento","title":"Incremento e Decremento","text":"<p>=== \"Portugol\"     <pre><code>programa {\n    funcao inicio() {\n        inteiro contador\n        contador = 5\n\n        escreva(\"Valor inicial: \", contador)\n        contador++\n        escreva(\"Ap\u00f3s incremento: \", contador)\n        contador--\n        escreva(\"Ap\u00f3s decremento: \", contador)\n    }\n}\n</code></pre></p> <p>=== \"C Gerado\"     <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int contador;\n    contador = 5;\n    printf(\"Valor inicial: %d\\n\", contador);\n    contador++;\n    printf(\"Ap\u00f3s incremento: %d\\n\", contador);\n    contador--;\n    printf(\"Ap\u00f3s decremento: %d\\n\", contador);\n    return 0;\n}\n</code></pre></p>"},{"location":"guia-usuario/exemplos/#programas-completos","title":"Programas Completos","text":""},{"location":"guia-usuario/exemplos/#calculadora-simples","title":"Calculadora Simples","text":"<p>=== \"Portugol\"     <pre><code>programa {\n    funcao inicio() {\n        real num1, num2, resultado\n        caracter operacao\n\n        escreva(\"Digite o primeiro n\u00famero: \")\n        leia(num1)\n        escreva(\"Digite a opera\u00e7\u00e3o (+, -, *, /): \")\n        leia(operacao)\n        escreva(\"Digite o segundo n\u00famero: \")\n        leia(num2)\n\n        escolha(operacao) {\n            caso '+':\n                resultado = num1 + num2\n            pare\n            caso '-':\n                resultado = num1 - num2\n            pare\n            caso '*':\n                resultado = num1 * num2\n            pare\n            caso '/':\n                se (num2 != 0) {\n                    resultado = num1 / num2\n                } senao {\n                    escreva(\"Erro: Divis\u00e3o por zero!\")\n                    retorne 1\n                }\n            pare\n            caso contrario:\n                escreva(\"Opera\u00e7\u00e3o inv\u00e1lida!\")\n                retorne 1\n        }\n\n        escreva(\"Resultado: \", resultado)\n    }\n}\n</code></pre></p> <p>Nota sobre os Exemplos</p> <p>Todos estes exemplos foram testados e validados pelo nosso sistema automatizado de testes. Voc\u00ea pode encontrar mais exemplos na pasta <code>exemplos/</code> do reposit\u00f3rio.</p>"},{"location":"guia-usuario/instalacao/","title":"Instala\u00e7\u00e3o","text":""},{"location":"guia-usuario/instalacao/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Para compilar e executar o Compilador Portugol-C, voc\u00ea precisa ter instalado:</p>"},{"location":"guia-usuario/instalacao/#ferramentas-obrigatorias","title":"Ferramentas Obrigat\u00f3rias","text":"<ul> <li>GCC (vers\u00e3o 11.4.0 ou superior)</li> <li>Flex (vers\u00e3o 2.6.4 ou superior) - Gerador de analisadores l\u00e9xicos</li> <li>Bison (vers\u00e3o 3.8.2 ou superior) - Gerador de analisadores sint\u00e1ticos</li> <li>Make - Para automatizar o processo de compila\u00e7\u00e3o</li> </ul>"},{"location":"guia-usuario/instalacao/#sistema-operacional","title":"Sistema Operacional","text":"<p>O compilador foi testado e funciona em: - Linux (Ubuntu 20.04+) - macOS (com Homebrew) - Windows (com WSL2)</p>"},{"location":"guia-usuario/instalacao/#instalacao-no-ubuntudebian","title":"Instala\u00e7\u00e3o no Ubuntu/Debian","text":"<pre><code># Atualizar reposit\u00f3rios\nsudo apt update\n\n# Instalar depend\u00eancias\nsudo apt install -y gcc flex bison make\n\n# Verificar vers\u00f5es\ngcc --version\nflex --version\nbison --version\nmake --version\n</code></pre>"},{"location":"guia-usuario/instalacao/#instalacao-no-macos","title":"Instala\u00e7\u00e3o no macOS","text":"<pre><code># Instalar Homebrew (se n\u00e3o tiver)\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Instalar depend\u00eancias\nbrew install gcc flex bison make\n\n# Verificar vers\u00f5es\ngcc --version\nflex --version\nbison --version\nmake --version\n</code></pre>"},{"location":"guia-usuario/instalacao/#instalacao-no-windows-wsl2","title":"Instala\u00e7\u00e3o no Windows (WSL2)","text":"<ol> <li>Instalar o WSL2 seguindo a documenta\u00e7\u00e3o oficial da Microsoft</li> <li>Escolher uma distribui\u00e7\u00e3o Linux (recomendamos Ubuntu)</li> <li>Seguir os passos da instala\u00e7\u00e3o no Ubuntu/Debian</li> </ol>"},{"location":"guia-usuario/instalacao/#clonando-o-repositorio","title":"Clonando o Reposit\u00f3rio","text":"<pre><code># Clonar o reposit\u00f3rio\ngit clone https://github.com/JohnnyLopess/Portugol-C.git\n\n# Entrar no diret\u00f3rio\ncd Portugol-C/portugol_compilador\n</code></pre>"},{"location":"guia-usuario/instalacao/#compilacao-do-projeto","title":"Compila\u00e7\u00e3o do Projeto","text":"<pre><code># Compilar o compilador\nmake\n\n# Verificar se a compila\u00e7\u00e3o foi bem-sucedida\nls build/\n# Deve mostrar: compilador, lex.yy.c, y.tab.c, y.tab.h\n</code></pre>"},{"location":"guia-usuario/instalacao/#verificacao-da-instalacao","title":"Verifica\u00e7\u00e3o da Instala\u00e7\u00e3o","text":"<p>Para verificar se tudo foi instalado corretamente:</p> <pre><code># Executar os testes automatizados\nmake test\n\n# Se todos os testes passarem, a instala\u00e7\u00e3o est\u00e1 correta\n</code></pre>"},{"location":"guia-usuario/instalacao/#problemas-comuns","title":"Problemas Comuns","text":""},{"location":"guia-usuario/instalacao/#erro-de-versao-do-gcc","title":"Erro de vers\u00e3o do GCC","text":"<pre><code>Erro: Vers\u00e3o do GCC incorreta.\n</code></pre> <p>Solu\u00e7\u00e3o: Instale o GCC vers\u00e3o 11 ou superior:</p> <pre><code>sudo apt install gcc-11\nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100\n</code></pre>"},{"location":"guia-usuario/instalacao/#flex-ou-bison-nao-encontrado","title":"Flex ou Bison n\u00e3o encontrado","text":"<pre><code>command not found: flex\ncommand not found: bison\n</code></pre> <p>Solu\u00e7\u00e3o: Instale as ferramentas:</p> <pre><code>sudo apt install flex bison\n</code></pre>"},{"location":"guia-usuario/instalacao/#problemas-de-permissao","title":"Problemas de permiss\u00e3o","text":"<pre><code>Permission denied\n</code></pre> <p>Solu\u00e7\u00e3o: Verifique as permiss\u00f5es do diret\u00f3rio:</p> <pre><code>chmod +x portugol_compilador/\ncd portugol_compilador/\n</code></pre>"},{"location":"resultados/sprint1/","title":"Sprint 1 \u2014 Setup do Compilador e Primeiros Comandos (30/03 - 05/04)","text":"Matr\u00edcula Nome Nick no GitHub \ud83d\udcf8 x x x"},{"location":"resultados/sprint1/#objetivo","title":"\u2705 Objetivo:","text":"<ul> <li>Construir a base funcional do compilador utilizando Flex e Bison, com tradu\u00e7\u00e3o de comandos b\u00e1sicos do Portugol (de acordo com o Portugol Studio) para c\u00f3digo C v\u00e1lido.</li> </ul>"},{"location":"resultados/sprint1/#estrutura-de-diretorios","title":"\ud83d\uddc2\ufe0f Estrutura de Diret\u00f3rios","text":"<pre><code>portugol_compilador/\n\u251c\u2500\u2500 exemplos/\n\u2502   \u2514\u2500\u2500 exemplo1.pg          # Arquivo de entrada em Portugol usado para testes\n\u251c\u2500\u2500 lex.l                    # Arquivo Flex com regras l\u00e9xicas\n\u251c\u2500\u2500 yacc.y                   # Arquivo Bison com a gram\u00e1tica e gera\u00e7\u00e3o de c\u00f3digo C\n\u251c\u2500\u2500 main.c                   # Fun\u00e7\u00e3o principal que inicia o compilador\n\u251c\u2500\u2500 makefile                 # Script de compila\u00e7\u00e3o automatizada\n\u251c\u2500\u2500 lex.yy.c                 # Gerado pelo Flex a partir de lex.l\n\u251c\u2500\u2500 y.tab.c                  # Gerado pelo Bison a partir de yacc.y\n\u251c\u2500\u2500 y.tab.h                  # Header gerado pelo Bison com defini\u00e7\u00f5es de tokens\n\u251c\u2500\u2500 saida.c                  # C\u00f3digo C gerado como sa\u00edda pelo compilador\n</code></pre>"},{"location":"resultados/sprint1/#descricao-dos-arquivos","title":"\ud83d\udcdd Descri\u00e7\u00e3o dos Arquivos","text":"<ul> <li><code>lex.l</code>: Define os padr\u00f5es l\u00e9xicos (tokens) usados no Portugol, como palavras-chave, identificadores, n\u00fameros, operadores, etc.</li> <li><code>yacc.y</code>: Define a gram\u00e1tica do Portugol e traduz comandos como <code>var</code>, <code>leia</code>, <code>escreva</code> e express\u00f5es aritm\u00e9ticas para C.</li> <li><code>main.c</code>: Inicia a an\u00e1lise sint\u00e1tica, imprimindo mensagens e lidando com erros.</li> <li><code>makefile</code>: Automatiza a gera\u00e7\u00e3o do compilador (<code>make</code>, <code>flex</code>, <code>bison</code>, <code>gcc</code>).</li> <li><code>exemplos/exemplo1.pg</code>: Um programa de teste escrito em Portugol para alimentar o compilador.</li> <li><code>lex.yy.c</code>, <code>y.tab.c</code>, <code>y.tab.h</code>: Arquivos intermedi\u00e1rios gerados automaticamente por Flex e Bison.</li> <li><code>saida.c</code>: Arquivo final de sa\u00edda contendo o c\u00f3digo C traduzido.</li> </ul>"},{"location":"resultados/sprint1/#funcionalidades-concluidas","title":"\ud83e\uddea Funcionalidades Conclu\u00eddas","text":"<ul> <li>Reconhecimento e tradu\u00e7\u00e3o de:</li> <li>Declara\u00e7\u00f5es de vari\u00e1veis (<code>var</code>)</li> <li>Leitura de dados (<code>leia</code>)</li> <li>Escrita de dados (<code>escreva</code>)</li> <li>Atribui\u00e7\u00f5es com express\u00f5es aritm\u00e9ticas (<code>=</code>, <code>+</code>, <code>-</code>)</li> <li>Gera\u00e7\u00e3o de c\u00f3digo C pronto para compila\u00e7\u00e3o com <code>gcc</code>.</li> </ul>"},{"location":"resultados/sprint1/#status-da-sprint","title":"\ud83c\udfc1 Status da Sprint","text":"<ul> <li>\ud83c\udfaf Sprint 1 conclu\u00edda com sucesso. A base do compilador est\u00e1 funcional e preparada para evolu\u00e7\u00f5es.</li> </ul>"},{"location":"resultados/sprint1/#como-testar-o-compilador","title":"\ud83d\ude80 Como testar o compilador","text":""},{"location":"resultados/sprint1/#1-compile-o-compilador-com-o-makefile","title":"1. Compile o compilador com o Makefile","text":"<pre><code>make\n</code></pre> <p>Isso ir\u00e1 rodar <code>flex</code>, <code>bison</code> e <code>gcc</code> automaticamente para gerar o bin\u00e1rio <code>compilador</code>.</p>"},{"location":"resultados/sprint1/#2-execute-com-um-arquivo-de-exemplo","title":"2. Execute com um arquivo de exemplo","text":"<pre><code>./compilador &lt; exemplos/exemplo1.pg\n</code></pre> <p>O compilador ir\u00e1 gerar um arquivo chamado <code>saida.c</code> com o c\u00f3digo equivalente em C.</p>"},{"location":"resultados/sprint1/#3-compile-o-codigo-c-gerado","title":"3. Compile o c\u00f3digo C gerado","text":"<pre><code>gcc saida.c -o programa\n./programa\n</code></pre>"},{"location":"resultados/sprint1/#limpando-arquivos-gerados","title":"\ud83e\uddf9 Limpando arquivos gerados","text":"<p>Caso necess\u00e1rio, voc\u00ea pode executar o comando abaixo para remover todos os arquivos gerados automaticamente (como <code>lex.yy.c</code>, <code>y.tab.c</code>, <code>y.tab.h</code>, <code>saida.c</code>, etc.):</p>"},{"location":"resultados/sprint1/#make-clean","title":"<pre><code>make clean\n</code></pre>","text":""},{"location":"resultados/sprint2/","title":"\ud83d\udce6 Sprint 2 \u2014 Controle de Fluxo (Condicionais) (06/04 - 12/04)","text":"Matr\u00edcula Nome Nick no GitHub \ud83d\udcf8 x x x"},{"location":"resultados/sprint2/#objetivo","title":"Objetivo:","text":"<ul> <li>Adicionar suporte a estruturas condicionais <code>se</code>, <code>senao</code>, <code>fimse</code> e operadores relacionais, gerando c\u00f3digo C v\u00e1lido com blocos <code>if</code> e <code>else</code>.</li> </ul>"},{"location":"resultados/sprint2/#funcionalidades-concluidas","title":"\ud83e\uddea Funcionalidades Conclu\u00eddas","text":""},{"location":"resultados/sprint2/#palavras-chave-adicionadas","title":"\ud83e\udde9 Palavras-chave adicionadas","text":"<ul> <li><code>se</code></li> <li><code>entao</code></li> <li><code>senao</code></li> <li><code>fimse</code></li> </ul>"},{"location":"resultados/sprint2/#operadores-relacionais-reconhecidos","title":"\ud83d\udd22 Operadores relacionais reconhecidos","text":"<ul> <li><code>==</code> (igual)</li> <li><code>!=</code> (diferente)</li> <li><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></li> </ul>"},{"location":"resultados/sprint2/#como-testar-as-novas-funcionalidades","title":"\ud83d\ude80 Como testar as novas funcionalidades ?","text":""},{"location":"resultados/sprint2/#1-compile-o-compilador-com-o-makefile","title":"1. Compile o compilador com o Makefile","text":"<pre><code>make\n</code></pre> <p>Isso ir\u00e1 rodar <code>flex</code>, <code>bison</code> e <code>gcc</code> automaticamente para gerar o bin\u00e1rio <code>compilador</code>.</p>"},{"location":"resultados/sprint2/#2-execute-com-um-arquivo-de-exemplo","title":"2. Execute com um arquivo de exemplo","text":"<pre><code>./compilador &lt; exemplos/exemplo2.pg\n</code></pre> <p>O compilador ir\u00e1 gerar um arquivo chamado <code>saida.c</code> com o c\u00f3digo equivalente em C.</p>"},{"location":"resultados/sprint2/#3-compile-o-codigo-c-gerado","title":"3. Compile o c\u00f3digo C gerado","text":"<pre><code>gcc saida.c -o programa\n./programa\n</code></pre>"},{"location":"resultados/sprint2/#limpando-arquivos-gerados","title":"\ud83e\uddf9 Limpando arquivos gerados","text":"<p>Caso necess\u00e1rio, voc\u00ea pode executar o comando abaixo para remover todos os arquivos gerados automaticamente (como <code>lex.yy.c</code>, <code>y.tab.c</code>, <code>y.tab.h</code>, <code>saida.c</code>, etc.):</p>"},{"location":"resultados/sprint2/#make-clean","title":"<pre><code>make clean\n</code></pre>","text":""},{"location":"resultados/sprint2/#criterios-de-aceitacao","title":"\u2705 Crit\u00e9rios de aceita\u00e7\u00e3o","text":"Crit\u00e9rio Descri\u00e7\u00e3o Status \ud83d\udd24 L\u00e9xico Tokens para <code>se</code>, <code>entao</code>, <code>senao</code>, <code>fimse</code> e operadores relacionais \u2705 \ud83e\udde0 Sint\u00e1tico Regras no <code>yacc.y</code> para condicionais \u2705 \ud83d\udd01 Blocos de decis\u00e3o Suporte a <code>if</code> simples e <code>if/else</code> com m\u00faltiplos comandos \u2705 \ud83d\udcac Express\u00f5es relacionais Suporte completo a compara\u00e7\u00f5es entre express\u00f5es \u2705 \ud83e\uddea Exemplo testado Arquivo <code>exemplo2.pg</code> executado e traduzido corretamente \u2705 \ud83e\uddfe saida.c funcional Arquivo C gerado compila e executa corretamente \u2705"},{"location":"resultados/sprint2/#arquivos-modificados","title":"\ud83d\udcc1 Arquivos modificados","text":"<ul> <li><code>lex.l</code>: Adi\u00e7\u00e3o de tokens relacionais e palavras-chave de decis\u00e3o</li> <li><code>yacc.y</code>: Regras novas para blocos condicionais e operadores l\u00f3gicos</li> <li><code>exemplos/exemplo2.pg</code>: Script Portugol usado como teste da sprint</li> </ul>"},{"location":"resultados/sprint2/#conclusao","title":"\ud83d\udd1a Conclus\u00e3o","text":"<p>A Sprint 2 foi conclu\u00edda com sucesso, consolidando a base do compilador com controle de fluxo condicional. O sistema agora suporta decis\u00f5es simples e compostas, sendo poss\u00edvel testar condi\u00e7\u00f5es usando operadores relacionais com tradu\u00e7\u00e3o correta para C.</p>"},{"location":"resultados/sprint3/","title":"Sprint 3 \u2014 Estruturas de Repeti\u00e7\u00e3o (enquanto ... faca ... fimenquanto) (13/04 - 19/04)","text":"Matr\u00edcula Nome Nick no GitHub \ud83d\udcf8 x x x"},{"location":"resultados/sprint3/#objetivo","title":"Objetivo:","text":"<ul> <li>Adicionar suporte \u00e0 estrutura de repeti\u00e7\u00f5es <code>enquanto</code>, <code>faca</code> e <code>fimenquanto</code> e operadores relacionais, gerando c\u00f3digo C v\u00e1lido com blocos <code>while</code>.</li> </ul>"},{"location":"resultados/sprint3/#funcionalidades-concluidas","title":"\ud83e\uddea Funcionalidades Conclu\u00eddas","text":""},{"location":"resultados/sprint3/#palavras-chave-adicionadas","title":"\ud83e\udde9 Palavras-chave adicionadas","text":"<ul> <li><code>enquanto</code></li> <li><code>faca</code></li> <li><code>fimenquanto</code></li> </ul>"},{"location":"resultados/sprint3/#como-testar-as-novas-funcionalidades","title":"\ud83d\ude80 Como testar as novas funcionalidades ?","text":""},{"location":"resultados/sprint3/#1-compile-o-compilador-com-o-makefile","title":"1. Compile o compilador com o Makefile","text":"<pre><code>make\n</code></pre> <p>Isso ir\u00e1 rodar <code>flex</code>, <code>bison</code> e <code>gcc</code> automaticamente para gerar o bin\u00e1rio <code>compilador</code>.</p>"},{"location":"resultados/sprint3/#2-execute-com-um-arquivo-de-exemplo","title":"2. Execute com um arquivo de exemplo","text":"<pre><code>./compilador &lt; exemplos/exemplo3.pg\n</code></pre> <p>O compilador ir\u00e1 gerar um arquivo chamado <code>saida.c</code> com o c\u00f3digo equivalente em C.</p>"},{"location":"resultados/sprint3/#3-compile-o-codigo-c-gerado","title":"3. Compile o c\u00f3digo C gerado","text":"<pre><code>gcc saida.c -o programa\n./programa\n</code></pre>"},{"location":"resultados/sprint3/#limpando-arquivos-gerados","title":"\ud83e\uddf9 Limpando arquivos gerados","text":"<p>Caso necess\u00e1rio, voc\u00ea pode executar o comando abaixo para remover todos os arquivos gerados automaticamente (como <code>lex.yy.c</code>, <code>y.tab.c</code>, <code>y.tab.h</code>, <code>saida.c</code>, etc.):</p>"},{"location":"resultados/sprint3/#make-clean","title":"<pre><code>make clean\n</code></pre>","text":""},{"location":"resultados/sprint3/#criterios-de-aceitacao","title":"\u2705 Crit\u00e9rios de aceita\u00e7\u00e3o","text":"Crit\u00e9rio Descri\u00e7\u00e3o Status \ud83d\udd24 La\u00e7os de repeti\u00e7\u00e3o s\u00e3o reconhecidos e compilados corretamente. Tokens para <code>enquanto</code>, <code>faca</code> e <code>fimenquanto</code> e operadores de repeti\u00e7\u00e3o \u2705 \ud83e\uddfe saida.c funcional Arquivo C gerado compila e executa corretamente \u2705"},{"location":"resultados/sprint3/#arquivos-modificados","title":"\ud83d\udcc1 Arquivos modificados","text":"<ul> <li><code>lex.l</code>: Adi\u00e7\u00e3o de tokens relacionais e palavras-chave de decis\u00e3o</li> <li><code>yacc.y</code>: Regras novas para blocos de repeti\u00e7\u00e3o e operadores l\u00f3gicos</li> <li><code>exemplos/exemplo3.pg</code>: Script Portugol usado como teste da sprint</li> </ul>"},{"location":"resultados/sprint3/#conclusao","title":"\ud83d\udd1a Conclus\u00e3o","text":"<p>A Sprint 3 foi conclu\u00edda com sucesso, consolidando a base do compilador com controle de fluxo de repeti\u00e7\u00e3o. O sistema agora suporta repeti\u00e7\u00f5es simples e compostas, sendo poss\u00edvel testar condi\u00e7\u00f5es usando operadores de repeti\u00e7\u00e3o com tradu\u00e7\u00e3o correta para C.</p>"},{"location":"resultados/sprint4/","title":"Sprint 4 \u2014 Estruturas de Repeti\u00e7\u00e3o: Para (23/04 a 29/04)","text":"Matr\u00edcula Nome Nick no GitHub \ud83d\udcf8 x x x"},{"location":"resultados/sprint4/#objetivo","title":"Objetivo:","text":"<ul> <li>Adicionar suporte \u00e0s estruturas de repeti\u00e7\u00e3o <code>para</code>, <code>de</code>, <code>ate</code>, <code>fimpara</code>  e operadores relacionais, gerando c\u00f3digo C v\u00e1lido.</li> </ul>"},{"location":"resultados/sprint4/#funcionalidades-concluidas","title":"\ud83e\uddea Funcionalidades Conclu\u00eddas","text":""},{"location":"resultados/sprint4/#palavras-chave-adicionadas","title":"\ud83e\udde9 Palavras-chave adicionadas","text":"<ul> <li><code>para</code></li> <li><code>de</code></li> <li><code>ate</code></li> <li><code>fimpara</code></li> </ul>"},{"location":"resultados/sprint4/#como-testar-as-novas-funcionalidades","title":"\ud83d\ude80 Como testar as novas funcionalidades ?","text":""},{"location":"resultados/sprint4/#1-compile-o-compilador-com-o-makefile","title":"1. Compile o compilador com o Makefile","text":"<pre><code>make\n</code></pre> <p>Isso ir\u00e1 rodar <code>flex</code>, <code>bison</code> e <code>gcc</code> automaticamente para gerar o bin\u00e1rio <code>compilador</code>.</p>"},{"location":"resultados/sprint4/#2-execute-com-um-arquivo-de-exemplo","title":"2. Execute com um arquivo de exemplo","text":"<pre><code>./compilador &lt; exemplos/exemplo4.pg\n</code></pre> <p>O compilador ir\u00e1 gerar um arquivo chamado <code>saida.c</code> com o c\u00f3digo equivalente em C.</p>"},{"location":"resultados/sprint4/#3-compile-o-codigo-c-gerado","title":"3. Compile o c\u00f3digo C gerado","text":"<pre><code>gcc saida.c -o programa\n./programa\n</code></pre>"},{"location":"resultados/sprint4/#limpando-arquivos-gerados","title":"\ud83e\uddf9 Limpando arquivos gerados","text":"<p>Caso necess\u00e1rio, voc\u00ea pode executar o comando abaixo para remover todos os arquivos gerados automaticamente (como <code>lex.yy.c</code>, <code>y.tab.c</code>, <code>y.tab.h</code>, <code>saida.c</code>, etc.):</p>"},{"location":"resultados/sprint4/#make-clean","title":"<pre><code>make clean\n</code></pre>","text":""},{"location":"resultados/sprint4/#criterios-de-aceitacao","title":"\u2705 Crit\u00e9rios de aceita\u00e7\u00e3o","text":"Crit\u00e9rio Descri\u00e7\u00e3o Status \ud83d\udd24 La\u00e7os de repeti\u00e7\u00e3o s\u00e3o reconhecidos e compilados corretamente. Tokens para <code>para</code>, <code>de</code>, <code>ate</code>, <code>fimpara</code> e operadores de repeti\u00e7\u00e3o \u2705 \ud83e\uddfe saida.c funcional Quarto exemplo <code>exemplo4.pg</code>, que teste as funcionalidades implementadas, compilado e executado corretamente. \u2705"},{"location":"resultados/sprint4/#arquivos-modificados","title":"\ud83d\udcc1 Arquivos modificados","text":"<ul> <li><code>lex.l</code>: Adi\u00e7\u00e3o de tokens relacionais e palavras-chave de decis\u00e3o</li> <li><code>yacc.y</code>: Regras novas para blocos condicionais e operadores l\u00f3gicos</li> <li><code>exemplos/exemplo4.pg</code>: Script Portugol usado como teste da sprint</li> </ul>"},{"location":"resultados/sprint4/#conclusao","title":"Conclus\u00e3o","text":"<p>A Sprint 2 foi conclu\u00edda com sucesso, consolidando a base do compilador com controle de fluxo condicional. O sistema agora suporta decis\u00f5es simples e compostas, sendo poss\u00edvel testar condi\u00e7\u00f5es usando operadores relacionais com tradu\u00e7\u00e3o correta para C.</p>"},{"location":"resultados/sprint5/","title":"Sprint 5 \u2014 Tipagem e Robustez + P1 (27/04 - 03/05)","text":"Matr\u00edcula Nome Nick no GitHub \ud83d\udcf8 211061977 Jo\u00e3o Victor Costa Andrade jvcostta"},{"location":"resultados/sprint5/#objetivo","title":"Objetivo:","text":"<ul> <li>Ampliar o suporte para novos tipos de dados <code>inteiro</code>, <code>real</code> e <code>caracter</code> e corrigir a regra de declara\u00e7\u00e3o de vari\u00e1veis no analisador sint\u00e1tico.</li> </ul>"},{"location":"resultados/sprint5/#funcionalidades-concluidas","title":"\ud83e\uddea Funcionalidades Conclu\u00eddas","text":"<ul> <li>Suporte mais robusto para tipagem de dados <code>inteiro</code>, <code>real</code> e <code>caracter</code> e regra de declara\u00e7\u00e3o corrigida</li> </ul>"},{"location":"resultados/sprint5/#como-testar-as-novas-funcionalidades","title":"\ud83d\ude80 Como testar as novas funcionalidades ?","text":""},{"location":"resultados/sprint5/#1-compile-o-compilador-com-o-makefile","title":"1. Compile o compilador com o Makefile","text":"<pre><code>make\n</code></pre> <p>Isso ir\u00e1 rodar <code>flex</code>, <code>bison</code> e <code>gcc</code> automaticamente para gerar o bin\u00e1rio <code>compilador</code>.</p>"},{"location":"resultados/sprint5/#2-execute-com-um-arquivo-de-exemplo","title":"2. Execute com um arquivo de exemplo","text":"<pre><code>./compilador &lt; exemplos/exemplo5.pg\n</code></pre> <p>O compilador ir\u00e1 gerar um arquivo chamado <code>saida.c</code> com o c\u00f3digo equivalente em C.</p>"},{"location":"resultados/sprint5/#3-compile-o-codigo-c-gerado","title":"3. Compile o c\u00f3digo C gerado","text":"<pre><code>gcc saida.c -o programa\n./programa\n</code></pre>"},{"location":"resultados/sprint5/#limpando-arquivos-gerados","title":"\ud83e\uddf9 Limpando arquivos gerados","text":"<p>Caso necess\u00e1rio, voc\u00ea pode executar o comando abaixo para remover todos os arquivos gerados automaticamente (como <code>lex.yy.c</code>, <code>y.tab.c</code>, <code>y.tab.h</code>, <code>saida.c</code>, etc.):</p>"},{"location":"resultados/sprint5/#make-clean","title":"<pre><code>make clean\n</code></pre>","text":""},{"location":"resultados/sprint5/#criterios-de-aceitacao","title":"\u2705 Crit\u00e9rios de aceita\u00e7\u00e3o","text":"Crit\u00e9rio Descri\u00e7\u00e3o Status \ud83d\udd24 Declara\u00e7\u00e3o Declara\u00e7\u00e3o de vari\u00e1veis com tipo funcionando corretamente. \u2705 \ud83e\udde0 Compila\u00e7\u00e3o Compila\u00e7\u00e3o correta no C (int, float, char). \u2705 \ud83e\uddea Exemplo testado Arquivo <code>exemplo5.pg</code> executado e traduzido corretamente \u2705"},{"location":"resultados/sprint5/#arquivos-modificados","title":"\ud83d\udcc1 Arquivos modificados","text":"<ul> <li><code>lex.l</code>: Adi\u00e7\u00e3o de tokens relacionais e palavras-chave de decis\u00e3o</li> <li><code>yacc.y</code>: Regras novas para blocos condicionais e operadores l\u00f3gicos</li> <li><code>exemplos/exemplo5.pg</code>: Script Portugol usado como teste da sprint</li> </ul>"},{"location":"resultados/sprint5/#conclusao","title":"Conclus\u00e3o","text":"<ul> <li>A Sprint 5 foi conclu\u00edda com sucesso, consolidando a amplia\u00e7\u00e3o do suporte a novos tipos de dados \u2014 <code>inteiro</code>, <code>real</code> e <code>caracter</code> \u2014 e a corre\u00e7\u00e3o da regra de declara\u00e7\u00e3o de vari\u00e1veis no analisador sint\u00e1tico, tornando a an\u00e1lise mais robusta e alinhada \u00e0 sintaxe da linguagem Portugol.</li> </ul>"},{"location":"resultados/sprint6/","title":"\ud83d\udce6 Sprint 6 \u2014 Sistema de Testes Automatizados (04/05 - 10/05)","text":"Matr\u00edcula Nome Nick no GitHub \ud83d\udcf8 x x x"},{"location":"resultados/sprint6/#objetivo","title":"Objetivo:","text":"<ul> <li>Implementar um sistema de testes automatizados completo para o compilador Portugol-C que permite verificar se a gera\u00e7\u00e3o de c\u00f3digo C est\u00e1 funcionando conforme o esperado.</li> </ul>"},{"location":"resultados/sprint6/#funcionalidades-concluidas","title":"\ud83e\uddea Funcionalidades Conclu\u00eddas","text":""},{"location":"resultados/sprint6/#palavras-chave-adicionadas","title":"\ud83e\udde9 Palavras-chave adicionadas","text":""},{"location":"resultados/sprint6/#operadores-relacionais-reconhecidos","title":"\ud83d\udd22 Operadores relacionais reconhecidos","text":""},{"location":"resultados/sprint6/#como-testar-as-novas-funcionalidades","title":"\ud83d\ude80 Como testar as novas funcionalidades ?","text":""},{"location":"resultados/sprint6/#4-executar-os-testes-automatizados","title":"4. \ud83e\uddea Executar os testes automatizados","text":"<p>Para executar os testes automatizados, siga os passos abaixo:</p> <ol> <li> <p>Execute o comando: <pre><code>make test\n</code></pre></p> </li> <li> <p>O sistema ir\u00e1:</p> </li> <li>Compilar o compilador se necess\u00e1rio</li> <li>Executar cada arquivo <code>.pg</code> da pasta <code>testes/inputs</code></li> <li>Gerar o c\u00f3digo C correspondente em <code>build/test_outputs</code></li> <li>Comparar o resultado com o arquivo esperado em <code>testes/expected</code></li> <li>Exibir o resultado:<ul> <li>\u2705 Indica que o teste passou</li> <li>\u274c Indica que o teste falhou, mostrando as diferen\u00e7as</li> </ul> </li> </ol>"},{"location":"resultados/sprint6/#41-adicionar-novos-casos-de-teste","title":"4.1 \ud83e\udde9 Adicionar novos casos de teste","text":"<p>Para adicionar um novo caso de teste:</p> <ol> <li>Crie um arquivo de entrada na pasta <code>testes/inputs</code> com extens\u00e3o <code>.pg</code></li> <li> <p>Exemplo: <code>testes/inputs/meu_teste.pg</code></p> </li> <li> <p>Crie o arquivo com a sa\u00edda esperada na pasta <code>testes/expected</code> com o mesmo nome base e extens\u00e3o <code>.expected</code></p> </li> <li> <p>Exemplo: <code>testes/expected/meu_teste.expected</code></p> </li> <li> <p>Execute <code>make test</code> para verificar se o compilador gera o resultado esperado</p> </li> </ol> <p>Nota: O compilador gera os arquivos de sa\u00edda na pasta <code>build/saida.c</code> durante o teste, e esses s\u00e3o copiados para <code>build/test_outputs/nome_do_teste.c</code> para verifica\u00e7\u00e3o.</p>"},{"location":"resultados/sprint6/#limpando-arquivos-gerados","title":"\ud83e\uddf9 Limpando arquivos gerados","text":"<p>Caso necess\u00e1rio, voc\u00ea pode executar o comando abaixo para remover todos os arquivos gerados automaticamente (como <code>lex.yy.c</code>, <code>y.tab.c</code>, <code>y.tab.h</code>, <code>saida.c</code>, etc.):</p>"},{"location":"resultados/sprint6/#make-clean","title":"<pre><code>make clean\n</code></pre>","text":""},{"location":"resultados/sprint6/#criterios-de-aceitacao","title":"\u2705 Crit\u00e9rios de aceita\u00e7\u00e3o","text":"Crit\u00e9rio Descri\u00e7\u00e3o Status \ud83d\udd24 Testes Sistema de Testes Automatizados funcionando corretamente. \u2705"},{"location":"resultados/sprint6/#arquivos-modificados","title":"\ud83d\udcc1 Arquivos modificados","text":"<ul> <li><code>lex.l</code>: Adi\u00e7\u00e3o de tokens relacionais e palavras-chave de decis\u00e3o</li> <li><code>yacc.y</code>: Regras novas para blocos condicionais e operadores l\u00f3gicos</li> <li><code>exemplos/exemplo2.pg</code>: Script Portugol usado como teste da sprint</li> </ul>"},{"location":"resultados/sprint6/#conclusao","title":"\ud83d\udd1a Conclus\u00e3o","text":"<p>A Sprint 6 foi conclu\u00edda com sucesso, consolidando a implementa\u00e7\u00e3o de um sistema de testes automatizados completo para o compilador Portugol-C, permitindo verificar de forma eficiente se a gera\u00e7\u00e3o de c\u00f3digo C est\u00e1 ocorrendo conforme o esperado e garantindo maior confiabilidade ao processo de tradu\u00e7\u00e3o.</p>"},{"location":"resultados/sprint7/","title":"\ud83d\udce6 Sprint 7 \u2014 \u00c1rore de deriva\u00e7\u00e3o sint\u00e1tica AST (11/05 - 17/05)","text":""},{"location":"resultados/sprint7/#responsavel-pela-sprint","title":"Respons\u00e1vel pela Sprint","text":"Matr\u00edcula Nome Nick no GitHub \ud83d\udcf8 x x x"},{"location":"resultados/sprint7/#objetivo","title":"Objetivo:","text":"<ul> <li>Constru\u00e7\u00e3o da \u00c1rvore de Deriva\u00e7\u00e3o Sint\u00e1tica</li> </ul>"},{"location":"resultados/sprint7/#funcionalidades-concluidas","title":"\ud83e\uddea Funcionalidades Conclu\u00eddas","text":""},{"location":"resultados/sprint7/#palavras-chave-adicionadas","title":"\ud83e\udde9 Palavras-chave adicionadas","text":""},{"location":"resultados/sprint7/#operadores-relacionais-reconhecidos","title":"\ud83d\udd22 Operadores relacionais reconhecidos","text":""},{"location":"resultados/sprint7/#como-testar-as-novas-funcionalidades","title":"\ud83d\ude80 Como testar as novas funcionalidades ?","text":""},{"location":"resultados/sprint7/#4-executar","title":"4. \ud83e\uddea Executar ...","text":""},{"location":"resultados/sprint7/#limpando-arquivos-gerados","title":"\ud83e\uddf9 Limpando arquivos gerados","text":"<p>Caso necess\u00e1rio, voc\u00ea pode executar o comando abaixo para remover todos os arquivos gerados automaticamente (como <code>lex.yy.c</code>, <code>y.tab.c</code>, <code>y.tab.h</code>, <code>saida.c</code>, etc.):</p>"},{"location":"resultados/sprint7/#make-clean","title":"<pre><code>make clean\n</code></pre>","text":""},{"location":"resultados/sprint7/#criterios-de-aceitacao","title":"\u2705 Crit\u00e9rios de aceita\u00e7\u00e3o","text":"Crit\u00e9rio Descri\u00e7\u00e3o Status \ud83d\udd24 Testes Sistema de Testes Automatizados funcionando corretamente. \u2705"},{"location":"resultados/sprint7/#arquivos-modificados","title":"\ud83d\udcc1 Arquivos modificados","text":"<ul> <li><code>lex.l</code>: ...</li> </ul>"},{"location":"resultados/sprint7/#conclusao","title":"\ud83d\udd1a Conclus\u00e3o","text":"<p>A Sprint 6 foi conclu\u00edda com sucesso, consolidando a implementa\u00e7\u00e3o de uma \u00e1rvore de deriva\u00e7\u00e3o sint\u00e1tica que...</p>"},{"location":"resultados/sprint8/","title":"\ud83d\udce6 Sprint 8 \u2014 Recursos Avan\u00e7ados do Portugol (18/05 - 24/05)","text":"Matr\u00edcula Nome Nick no GitHub \ud83d\udcf8 x x x"},{"location":"resultados/sprint8/#objetivo","title":"Objetivo:","text":"<ul> <li>Implementar recursos <code>senaose</code>, <code>escolha</code>, <code>caso</code>, <code>fimcaso</code>, gerando c\u00f3digo C v\u00e1lido com blocos <code>switch/case</code>.</li> </ul>"},{"location":"resultados/sprint8/#funcionalidades-concluidas","title":"\ud83e\uddea Funcionalidades Conclu\u00eddas","text":""},{"location":"resultados/sprint8/#palavras-chave-adicionadas","title":"\ud83e\udde9 Palavras-chave adicionadas","text":"<ul> <li><code>senaose</code></li> <li><code>escolha</code></li> <li><code>caso</code></li> <li><code>fimcaso</code></li> </ul>"},{"location":"resultados/sprint8/#como-testar-as-novas-funcionalidades","title":"\ud83d\ude80 Como testar as novas funcionalidades ?","text":""},{"location":"resultados/sprint8/#4-executar-os-testes-automatizados","title":"4. \ud83e\uddea Executar os testes automatizados","text":"<p>Para executar os testes automatizados, siga os passos abaixo:</p> <ol> <li> <p>Execute o comando: <pre><code>make test\n</code></pre></p> </li> <li> <p>O sistema ir\u00e1:</p> </li> <li>Compilar o compilador se necess\u00e1rio</li> <li>Executar cada arquivo <code>.pg</code> da pasta <code>testes/inputs</code></li> <li>Gerar o c\u00f3digo C correspondente em <code>build/test_outputs</code></li> <li>Comparar o resultado com o arquivo esperado em <code>testes/expected</code></li> <li>Exibir o resultado:<ul> <li>\u2705 Indica que o teste passou</li> <li>\u274c Indica que o teste falhou, mostrando as diferen\u00e7as</li> </ul> </li> </ol>"},{"location":"resultados/sprint8/#41-adicionar-novos-casos-de-teste","title":"4.1 \ud83e\udde9 Adicionar novos casos de teste","text":"<p>Para adicionar um novo caso de teste:</p> <ol> <li>Crie um arquivo de entrada na pasta <code>testes/inputs</code> com extens\u00e3o <code>.pg</code></li> <li> <p>Exemplo: <code>testes/inputs/meu_teste.pg</code></p> </li> <li> <p>Crie o arquivo com a sa\u00edda esperada na pasta <code>testes/expected</code> com o mesmo nome base e extens\u00e3o <code>.expected</code></p> </li> <li> <p>Exemplo: <code>testes/expected/meu_teste.expected</code></p> </li> <li> <p>Execute <code>make test</code> para verificar se o compilador gera o resultado esperado</p> </li> </ol> <p>Nota: O compilador gera os arquivos de sa\u00edda na pasta <code>build/saida.c</code> durante o teste, e esses s\u00e3o copiados para <code>build/test_outputs/nome_do_teste.c</code> para verifica\u00e7\u00e3o.</p>"},{"location":"resultados/sprint8/#limpando-arquivos-gerados","title":"\ud83e\uddf9 Limpando arquivos gerados","text":"<p>Caso necess\u00e1rio, voc\u00ea pode executar o comando abaixo para remover todos os arquivos gerados automaticamente (como <code>lex.yy.c</code>, <code>y.tab.c</code>, <code>y.tab.h</code>, <code>saida.c</code>, etc.):</p>"},{"location":"resultados/sprint8/#make-clean","title":"<pre><code>make clean\n</code></pre>","text":""},{"location":"resultados/sprint8/#criterios-de-aceitacao","title":"\u2705 Crit\u00e9rios de aceita\u00e7\u00e3o","text":"Crit\u00e9rio Descri\u00e7\u00e3o Status \ud83d\udd24 Testes Implementar casos de testes para cada um dos recursos \u2705 \ud83d\udd24 Testes2 Todos testes devem estar funcionando \u2705"},{"location":"resultados/sprint8/#arquivos-modificados","title":"\ud83d\udcc1 Arquivos modificados","text":"<ul> <li><code>lex.l</code>: ..</li> </ul>"},{"location":"resultados/sprint8/#conclusao","title":"\ud83d\udd1a Conclus\u00e3o","text":"<p>A Sprint 8 foi conclu\u00edda com sucesso, consolidando a implementa\u00e7\u00e3o dos recursos <code>senaose</code>, <code>escolha</code>, <code>caso</code> e <code>fimcaso</code>, com a gera\u00e7\u00e3o de c\u00f3digo C equivalente utilizando estruturas <code>switch/case</code>, ampliando significativamente o suporte a comandos condicionais no compilador Portugol-C.</p>"},{"location":"resultados/sprint9/","title":"\ud83d\udce6 Sprint 9 \u2014 Coment\u00e1rios em Portugol ((25/05 - 31/05))","text":"Matr\u00edcula Nome Nick no GitHub \ud83d\udcf8 x x x"},{"location":"resultados/sprint9/#objetivo","title":"Objetivo:","text":"<ul> <li>Implementar um sistema de convers\u00e3o de coment\u00e1rios do Portugol <code>//</code>, <code>/*</code> <code>*/</code> para C.</li> </ul>"},{"location":"resultados/sprint9/#funcionalidades-concluidas","title":"\ud83e\uddea Funcionalidades Conclu\u00eddas","text":""},{"location":"resultados/sprint9/#palavras-chave-adicionadas","title":"\ud83e\udde9 Palavras-chave adicionadas","text":"<ul> <li><code>//</code></li> <li><code>/*</code></li> <li><code>*/</code></li> </ul>"},{"location":"resultados/sprint9/#operadores-relacionais-reconhecidos","title":"\ud83d\udd22 Operadores relacionais reconhecidos","text":"<ul> <li><code>//</code></li> <li><code>/*</code></li> <li><code>*/</code></li> </ul>"},{"location":"resultados/sprint9/#como-testar-as-novas-funcionalidades","title":"\ud83d\ude80 Como testar as novas funcionalidades ?","text":""},{"location":"resultados/sprint9/#1-compile-o-compilador-com-o-makefile","title":"1. Compile o compilador com o Makefile","text":"<pre><code>make\n</code></pre> <p>Isso ir\u00e1 rodar <code>flex</code>, <code>bison</code> e <code>gcc</code> automaticamente para gerar o bin\u00e1rio <code>compilador</code>.</p>"},{"location":"resultados/sprint9/#2-execute-com-um-arquivo-de-exemplo","title":"2. Execute com um arquivo de exemplo","text":"<pre><code>./compilador &lt; exemplos/exemploX.pg\n</code></pre> <p>O compilador ir\u00e1 gerar um arquivo chamado <code>saida.c</code> com o c\u00f3digo equivalente em C.</p>"},{"location":"resultados/sprint9/#3-compile-o-codigo-c-gerado","title":"3. Compile o c\u00f3digo C gerado","text":"<pre><code>gcc saida.c -o programa\n./programa\n</code></pre>"},{"location":"resultados/sprint9/#limpando-arquivos-gerados","title":"\ud83e\uddf9 Limpando arquivos gerados","text":"<p>Caso necess\u00e1rio, voc\u00ea pode executar o comando abaixo para remover todos os arquivos gerados automaticamente (como <code>lex.yy.c</code>, <code>y.tab.c</code>, <code>y.tab.h</code>, <code>saida.c</code>, etc.):</p>"},{"location":"resultados/sprint9/#make-clean","title":"<pre><code>make clean\n</code></pre>","text":""},{"location":"resultados/sprint9/#criterios-de-aceitacao","title":"\u2705 Crit\u00e9rios de aceita\u00e7\u00e3o","text":"Crit\u00e9rio Descri\u00e7\u00e3o Status \ud83d\udd24 Coment\u00e1rios C\u00f3digo comentado, limpo e modular. \u2705 \ud83d\udd24 Testes Implementar casos de testes para cada um dos recursos \u2705"},{"location":"resultados/sprint9/#arquivos-modificados","title":"\ud83d\udcc1 Arquivos modificados","text":"<ul> <li><code>lex.l</code>: Adi\u00e7\u00e3o de tokens relacionais e palavras-chave de decis\u00e3o</li> <li><code>yacc.y</code>: Regras novas para blocos condicionais e operadores l\u00f3gicos</li> <li><code>exemplos/exemploX.pg</code>: Script Portugol usado como teste da sprint</li> </ul>"},{"location":"resultados/sprint9/#conclusao","title":"\ud83d\udd1a Conclus\u00e3o","text":"<p>A Sprint 9 foi conclu\u00edda com sucesso, consolidando a implementa\u00e7\u00e3o de um sistema de convers\u00e3o de coment\u00e1rios da linguagem Portugol \u2014 <code>//</code>, <code>/*</code> e <code>*/</code> \u2014 para a sintaxe equivalente da linguagem C, garantindo que os coment\u00e1rios sejam preservados corretamente no c\u00f3digo traduzido.</p>"},{"location":"tecnica/analise-lexica/","title":"An\u00e1lise L\u00e9xica","text":"<p>A an\u00e1lise l\u00e9xica \u00e9 a primeira fase do compilador Portugol-C, respons\u00e1vel por transformar o c\u00f3digo fonte em uma sequ\u00eancia de tokens. Este documento descreve o analisador l\u00e9xico implementado usando Flex (lex).</p>"},{"location":"tecnica/analise-lexica/#visao-geral","title":"Vis\u00e3o Geral","text":""},{"location":"tecnica/analise-lexica/#arquivo-principal","title":"Arquivo Principal","text":"<ul> <li>Localiza\u00e7\u00e3o: <code>src/lex.l</code></li> <li>Ferramenta: Flex (Fast Lexical Analyzer Generator)</li> <li>Sa\u00edda: <code>lex.yy.c</code> (c\u00f3digo C gerado)</li> </ul>"},{"location":"tecnica/analise-lexica/#funcao-principal","title":"Fun\u00e7\u00e3o Principal","text":"<p><pre><code>int yylex(void)\n</code></pre> - Retorna o pr\u00f3ximo token do c\u00f3digo fonte - Atualiza a vari\u00e1vel global <code>yylval</code> com o valor do token - Incrementa contadores de linha e coluna para mensagens de erro</p>"},{"location":"tecnica/analise-lexica/#estrutura-do-arquivo-lexl","title":"Estrutura do Arquivo <code>lex.l</code>","text":""},{"location":"tecnica/analise-lexica/#1-secao-de-definicoes","title":"1. Se\u00e7\u00e3o de Defini\u00e7\u00f5es","text":""},{"location":"tecnica/analise-lexica/#inclusoes-e-declaracoes","title":"Inclus\u00f5es e Declara\u00e7\u00f5es","text":"<pre><code>%{\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include \"y.tab.h\"  // Tokens definidos pelo parser\nextern int yylval;\nint linha = 1;      // Contador de linhas\nint coluna = 1;     // Contador de colunas\n%}\n</code></pre>"},{"location":"tecnica/analise-lexica/#definicoes-de-padroes","title":"Defini\u00e7\u00f5es de Padr\u00f5es","text":"<pre><code>DIGITO          [0-9]\nLETRA           [a-zA-Z_]\nIDENTIFICADOR   {LETRA}({LETRA}|{DIGITO})*\nINTEIRO         {DIGITO}+\nREAL            {DIGITO}+\\.{DIGITO}+\nCARACTER        '([^'\\\\]|\\\\.|\\\\[0-7]{1,3}|\\\\x[0-9a-fA-F]{1,2})'\nESPACO          [ \\t]+\nNOVA_LINHA      \\n\nCOMENTARIO_LINHA \"//\".*\nCOMENTARIO_BLOCO \"/*\"([^*]|\\*+[^*/])*\\*+\"/\"\n</code></pre>"},{"location":"tecnica/analise-lexica/#2-secao-de-regras","title":"2. Se\u00e7\u00e3o de Regras","text":""},{"location":"tecnica/analise-lexica/#palavras-chave","title":"Palavras-chave","text":"<pre><code>\"programa\"      { return PROGRAMA; }\n\"funcao\"        { return FUNCAO; }\n\"inicio\"        { return INICIO; }\n\"se\"            { return SE; }\n\"senao\"         { return SENAO; }\n\"para\"          { return PARA; }\n\"enquanto\"      { return ENQUANTO; }\n\"faca\"          { return FACA; }\n\"escolha\"       { return ESCOLHA; }\n\"caso\"          { return CASO; }\n\"padrao\"        { return PADRAO; }\n\"pare\"          { return PARE; }\n\"retorne\"       { return RETORNE; }\n\"leia\"          { return LEIA; }\n\"escreva\"       { return ESCREVA; }\n</code></pre>"},{"location":"tecnica/analise-lexica/#tipos-de-dados","title":"Tipos de Dados","text":"<pre><code>\"inteiro\"       { return TIPO_INTEIRO; }\n\"real\"          { return TIPO_REAL; }\n\"caracter\"      { return TIPO_CARACTER; }\n\"logico\"        { return TIPO_LOGICO; }\n\"verdadeiro\"    { yylval = 1; return VERDADEIRO; }\n\"falso\"         { yylval = 0; return FALSO; }\n</code></pre>"},{"location":"tecnica/analise-lexica/#operadores-aritmeticos","title":"Operadores Aritm\u00e9ticos","text":"<pre><code>\"+\"             { return MAIS; }\n\"-\"             { return MENOS; }\n\"*\"             { return MULTIPLICACAO; }\n\"/\"             { return DIVISAO; }\n\"%\"             { return MODULO; }\n\"++\"            { return INCREMENTO; }\n\"--\"            { return DECREMENTO; }\n</code></pre>"},{"location":"tecnica/analise-lexica/#operadores-de-atribuicao","title":"Operadores de Atribui\u00e7\u00e3o","text":"<pre><code>\"=\"             { return ATRIBUICAO; }\n\"+=\"            { return MAIS_IGUAL; }\n\"-=\"            { return MENOS_IGUAL; }\n\"*=\"            { return MULT_IGUAL; }\n\"/=\"            { return DIV_IGUAL; }\n\"%=\"            { return MOD_IGUAL; }\n</code></pre>"},{"location":"tecnica/analise-lexica/#operadores-relacionais","title":"Operadores Relacionais","text":"<pre><code>\"==\"            { return IGUAL; }\n\"!=\"            { return DIFERENTE; }\n\"&lt;\"             { return MENOR; }\n\"&lt;=\"            { return MENOR_IGUAL; }\n\"&gt;\"             { return MAIOR; }\n\"&gt;=\"            { return MAIOR_IGUAL; }\n</code></pre>"},{"location":"tecnica/analise-lexica/#operadores-logicos","title":"Operadores L\u00f3gicos","text":"<pre><code>\"&amp;&amp;\"            { return E_LOGICO; }\n\"||\"            { return OU_LOGICO; }\n\"!\"             { return NAO_LOGICO; }\n</code></pre>"},{"location":"tecnica/analise-lexica/#operadores-bitwise","title":"Operadores Bitwise","text":"<pre><code>\"&amp;\"             { return E_BITWISE; }\n\"|\"             { return OU_BITWISE; }\n\"^\"             { return XOR_BITWISE; }\n\"~\"             { return COMPLEMENTO; }\n\"&lt;&lt;\"            { return DESLOC_ESQUERDA; }\n\"&gt;&gt;\"            { return DESLOC_DIREITA; }\n</code></pre>"},{"location":"tecnica/analise-lexica/#delimitadores","title":"Delimitadores","text":"<pre><code>\"(\"             { return ABRE_PARENTESES; }\n\")\"             { return FECHA_PARENTESES; }\n\"{\"             { return ABRE_CHAVES; }\n\"}\"             { return FECHA_CHAVES; }\n\"[\"             { return ABRE_COLCHETES; }\n\"]\"             { return FECHA_COLCHETES; }\n\";\"             { return PONTO_VIRGULA; }\n\",\"             { return VIRGULA; }\n\":\"             { return DOIS_PONTOS; }\n</code></pre>"},{"location":"tecnica/analise-lexica/#literais","title":"Literais","text":"<pre><code>{INTEIRO}       { \n                  yylval = atoi(yytext); \n                  return NUM_INTEIRO; \n                }\n{REAL}          { \n                  yylval = (int)(atof(yytext) * 1000); // Para preservar decimais\n                  return NUM_REAL; \n                }\n{CARACTER}      { \n                  yylval = yytext[1]; // Caractere entre aspas\n                  return CARACTER_LITERAL; \n                }\n{IDENTIFICADOR} { \n                  yylval = (int)strdup(yytext);\n                  return IDENTIFICADOR; \n                }\n</code></pre>"},{"location":"tecnica/analise-lexica/#tratamento-de-espacos-e-comentarios","title":"Tratamento de Espa\u00e7os e Coment\u00e1rios","text":"<pre><code>{ESPACO}        { coluna += yyleng; }\n{NOVA_LINHA}    { linha++; coluna = 1; }\n{COMENTARIO_LINHA}      { /* Ignora coment\u00e1rios de linha */ }\n{COMENTARIO_BLOCO}      { \n                          // Conta linhas em coment\u00e1rios de bloco\n                          char *p = yytext;\n                          while (*p) {\n                              if (*p == '\\n') linha++;\n                              p++;\n                          }\n                        }\n</code></pre>"},{"location":"tecnica/analise-lexica/#3-secao-de-codigo-do-usuario","title":"3. Se\u00e7\u00e3o de C\u00f3digo do Usu\u00e1rio","text":"<pre><code>int yywrap() {\n    return 1; // Indica fim do arquivo\n}\n\nvoid yyerror(const char *msg) {\n    fprintf(stderr, \"Erro l\u00e9xico na linha %d, coluna %d: %s\\n\", \n            linha, coluna, msg);\n}\n</code></pre>"},{"location":"tecnica/analise-lexica/#tokens-definidos","title":"Tokens Definidos","text":""},{"location":"tecnica/analise-lexica/#classificacao-dos-tokens","title":"Classifica\u00e7\u00e3o dos Tokens","text":"Categoria Tokens Quantidade Palavras-chave <code>programa</code>, <code>funcao</code>, <code>inicio</code>, <code>se</code>, <code>senao</code>, etc. 14 Tipos <code>inteiro</code>, <code>real</code>, <code>caracter</code>, <code>logico</code> 4 Operadores <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>==</code>, <code>!=</code>, <code>&amp;&amp;</code>, <code>||</code>, etc. 25 Delimitadores <code>(</code>, <code>)</code>, <code>{</code>, <code>}</code>, <code>[</code>, <code>]</code>, <code>;</code>, <code>,</code> 8 Literais N\u00fameros, caracteres, booleanos 4 Identificadores Nomes de vari\u00e1veis e fun\u00e7\u00f5es 1 ### C\u00f3digos de Token (em <code>y.tab.h</code>) <pre><code>// Palavras-chave\n#define PROGRAMA        256\n#define FUNCAO          257\n#define INICIO          258\n#define SE              259\n#define SENAO           260\n// ... outros tokens\n// Tipos\n#define TIPO_INTEIRO    300\n#define TIPO_REAL       301\n#define TIPO_CARACTER   302\n#define TIPO_LOGICO     303\n// Operadores\n#define MAIS            400\n#define MENOS           401\n#define MULTIPLICACAO   402\n// ... outros operadores\n// Literais\n#define NUM_INTEIRO     500\n#define NUM_REAL        501\n#define CARACTER_LITERAL 502\n#define VERDADEIRO      503\n#define FALSO           504\n#define IDENTIFICADOR   505\n</code></pre>"},{"location":"tecnica/analise-lexica/#tratamento-de-caracteres-especiais","title":"Tratamento de Caracteres Especiais","text":""},{"location":"tecnica/analise-lexica/#escape-sequences-em-caracteres","title":"Escape Sequences em Caracteres","text":"<pre><code>// Sequ\u00eancias de escape suportadas\n'a'     // Caractere normal\n'\\n'    // Nova linha\n'\\t'    // Tab\n'\\\\'    // Barra invertida\n'\\''    // Aspas simples\n'\\\"'    // Aspas duplas (em strings)\n'\\0'    // Caractere nulo\n'\\123'  // Octal (at\u00e9 3 d\u00edgitos)\n'\\x41'  // Hexadecimal (at\u00e9 2 d\u00edgitos)\n</code></pre>"},{"location":"tecnica/analise-lexica/#implementacao-no-lexer","title":"Implementa\u00e7\u00e3o no Lexer","text":"<pre><code>CARACTER        '([^'\\\\]|\\\\.|\\\\[0-7]{1,3}|\\\\x[0-9a-fA-F]{1,2})'\n{CARACTER}      { \n                  char c = yytext[1];\n                  if (c == '\\\\') {\n                      // Tratar escape sequences\n                      switch (yytext[2]) {\n                          case 'n': c = '\\n'; break;\n                          case 't': c = '\\t'; break;\n                          case '\\\\': c = '\\\\'; break;\n                          case '\\'': c = '\\''; break;\n                          case '0': c = '\\0'; break;\n                          // Casos octais e hexadecimais...\n                      }\n                  }\n                  yylval = (int)c;\n                  return CARACTER_LITERAL;\n                }\n</code></pre>"},{"location":"tecnica/analise-lexica/#tratamento-de-numeros","title":"Tratamento de N\u00fameros","text":""},{"location":"tecnica/analise-lexica/#numeros-inteiros","title":"N\u00fameros Inteiros","text":"<pre><code>INTEIRO         [0-9]+\nINTEIRO_NEG     -[0-9]+\n{INTEIRO}       { \n                  yylval = atoi(yytext);\n                  return NUM_INTEIRO;\n                }\n{INTEIRO_NEG}   {\n                  yylval = atoi(yytext);\n                  return NUM_INTEIRO;\n                }\n</code></pre>"},{"location":"tecnica/analise-lexica/#numeros-reais","title":"N\u00fameros Reais","text":"<pre><code>REAL            [0-9]+\\.[0-9]+\nREAL_NEG        -[0-9]+\\.[0-9]+\n{REAL}          {\n                  // Multiplica por 1000 para preservar 3 casas decimais\n                  double valor = atof(yytext);\n                  yylval = (int)(valor * 1000);\n                  return NUM_REAL;\n                }\n</code></pre>"},{"location":"tecnica/analise-lexica/#validacao-de-numeros","title":"Valida\u00e7\u00e3o de N\u00fameros","text":"<pre><code>// Fun\u00e7\u00e3o auxiliar para validar limites\nint validar_inteiro(const char* texto) {\n    long valor = strtol(texto, NULL, 10);\n    if (valor &gt; INT_MAX || valor &lt; INT_MIN) {\n        yyerror(\"N\u00famero inteiro fora dos limites\");\n        return 0;\n    }\n    return (int)valor;\n}\n</code></pre>"},{"location":"tecnica/analise-lexica/#tratamento-de-comentarios","title":"Tratamento de Coment\u00e1rios","text":""},{"location":"tecnica/analise-lexica/#comentarios-de-linha","title":"Coment\u00e1rios de Linha","text":"<pre><code>COMENTARIO_LINHA    \"//\".*$\n{COMENTARIO_LINHA}  { \n                      // Ignora at\u00e9 o final da linha\n                      coluna += yyleng;\n                    }\n</code></pre>"},{"location":"tecnica/analise-lexica/#comentarios-de-bloco","title":"Coment\u00e1rios de Bloco","text":"<pre><code>COMENTARIO_BLOCO    \"/*\"([^*]|\\*+[^*/])*\\*+\"/\"\n{COMENTARIO_BLOCO}  {\n                      // Conta linhas dentro do coment\u00e1rio\n                      for (int i = 0; i &lt; yyleng; i++) {\n                          if (yytext[i] == '\\n') {\n                              linha++;\n                              coluna = 1;\n                          } else {\n                              coluna++;\n                          }\n                      }\n                    }\n</code></pre>"},{"location":"tecnica/analise-lexica/#comentarios-aninhados-nao-suportado","title":"Coment\u00e1rios Aninhados (N\u00e3o Suportado)","text":"<pre><code>// Coment\u00e1rios aninhados n\u00e3o s\u00e3o suportados\n/* Coment\u00e1rio externo /* interno */ ainda externo */ // ERRO!\n</code></pre>"},{"location":"tecnica/analise-lexica/#gerenciamento-de-estados","title":"Gerenciamento de Estados","text":""},{"location":"tecnica/analise-lexica/#estados-do-lexer","title":"Estados do Lexer","text":"<pre><code>%x COMENTARIO_BLOCO\n%%\n\"/*\"                { BEGIN(COMENTARIO_BLOCO); }\n&lt;COMENTARIO_BLOCO&gt;\"*/\"  { BEGIN(INITIAL); }\n&lt;COMENTARIO_BLOCO&gt;\\n    { linha++; coluna = 1; }\n&lt;COMENTARIO_BLOCO&gt;.     { coluna++; }\n&lt;COMENTARIO_BLOCO&gt;&lt;&lt;EOF&gt;&gt; { \n                          yyerror(\"Coment\u00e1rio de bloco n\u00e3o fechado\"); \n                          return 0; \n                        }\n</code></pre>"},{"location":"tecnica/analise-lexica/#tratamento-de-erros-lexicos","title":"Tratamento de Erros L\u00e9xicos","text":""},{"location":"tecnica/analise-lexica/#caracteres-invalidos","title":"Caracteres Inv\u00e1lidos","text":"<pre><code>.               { \n                  char msg[100];\n                  sprintf(msg, \"Caractere inv\u00e1lido: '%c' (ASCII %d)\", \n                          yytext[0], yytext[0]);\n                  yyerror(msg);\n                  coluna++;\n                }\n</code></pre>"},{"location":"tecnica/analise-lexica/#strings-nao-fechadas","title":"Strings N\u00e3o Fechadas","text":"<pre><code>\"               { \n                  yyerror(\"String literal n\u00e3o fechada\");\n                  return 0;\n                }\n</code></pre>"},{"location":"tecnica/analise-lexica/#funcao-de-erro-personalizada","title":"Fun\u00e7\u00e3o de Erro Personalizada","text":"<pre><code>void erro_lexico(const char* mensagem, const char* token) {\n    fprintf(stderr, \"ERRO L\u00c9XICO [%d:%d]: %s\\n\", linha, coluna, mensagem);\n    if (token) {\n        fprintf(stderr, \"Token problem\u00e1tico: '%s'\\n\", token);\n    }\n    exit(1);\n}\n</code></pre>"},{"location":"tecnica/analise-lexica/#interface-com-o-parser","title":"Interface com o Parser","text":""},{"location":"tecnica/analise-lexica/#variaveis-globais-compartilhadas","title":"Vari\u00e1veis Globais Compartilhadas","text":"<pre><code>extern YYSTYPE yylval;  // Valor sem\u00e2ntico do token\nextern int yylineno;    // N\u00famero da linha atual\nextern char* yytext;    // Texto do token atual\nextern int yyleng;      // Tamanho do token atual\n</code></pre>"},{"location":"tecnica/analise-lexica/#funcao-principal-do-lexer","title":"Fun\u00e7\u00e3o Principal do Lexer","text":"<pre><code>int yylex(void) {\n    int token = flex_yylex();\n\n    // Log de debugging (opcional)\n    #ifdef DEBUG_LEXER\n    printf(\"Token: %d, Texto: '%s', Linha: %d, Coluna: %d\\n\", \n           token, yytext, linha, coluna);\n    #endif\n\n    return token;\n}\n</code></pre>"},{"location":"tecnica/analise-lexica/#otimizacoes-e-performance","title":"Otimiza\u00e7\u00f5es e Performance","text":""},{"location":"tecnica/analise-lexica/#buffering","title":"Buffering","text":"<pre><code>// Flex usa buffering autom\u00e1tico, mas pode ser configurado\n#define YY_BUF_SIZE 16384  // Tamanho do buffer (padr\u00e3o: 8192)\n</code></pre>"},{"location":"tecnica/analise-lexica/#compilacao-otimizada","title":"Compila\u00e7\u00e3o Otimizada","text":"<pre><code># Flags para otimiza\u00e7\u00e3o do lexer\nFLEX_FLAGS = -8 -f -i -s\n# -8: Gerar tabelas de 8 bits\n# -f: Scanner mais r\u00e1pido\n# -i: Case-insensitive (se necess\u00e1rio)\n# -s: Suprimir warnings\n</code></pre>"},{"location":"tecnica/analise-lexica/#medicao-de-performance","title":"Medi\u00e7\u00e3o de Performance","text":"<pre><code>#include &lt;time.h&gt;\n\nvoid medir_performance_lexer(const char* arquivo) {\n    clock_t inicio = clock();\n\n    FILE* fp = fopen(arquivo, \"r\");\n    yyin = fp;\n\n    int token;\n    int contador = 0;\n\n    while ((token = yylex()) != 0) {\n        contador++;\n    }\n\n    fclose(fp);\n\n    clock_t fim = clock();\n    double tempo = ((double)(fim - inicio)) / CLOCKS_PER_SEC;\n\n    printf(\"Tokens processados: %d\\n\", contador);\n    printf(\"Tempo de an\u00e1lise: %.4f segundos\\n\", tempo);\n    printf(\"Tokens/segundo: %.0f\\n\", contador / tempo);\n}\n</code></pre>"},{"location":"tecnica/analise-lexica/#exemplo-de-uso","title":"Exemplo de Uso","text":""},{"location":"tecnica/analise-lexica/#codigo-portugol-de-entrada","title":"C\u00f3digo Portugol de Entrada","text":"<pre><code>programa {\n    funcao inicio() {\n        inteiro idade = 25;\n        real salario = 3500.50;\n        caracter inicial = 'J';\n        logico ativo = verdadeiro;\n\n        se (idade &gt;= 18 &amp;&amp; ativo) {\n            escreva(\"Usu\u00e1rio v\u00e1lido\\n\");\n        } senao {\n            escreva(\"Usu\u00e1rio inv\u00e1lido\\n\");\n        }\n    }\n}\n</code></pre>"},{"location":"tecnica/analise-lexica/#sequencia-de-tokens-gerados","title":"Sequ\u00eancia de Tokens Gerados","text":"<pre><code>PROGRAMA (256)\nABRE_CHAVES (123)\nFUNCAO (257)\nIDENTIFICADOR (505) -&gt; \"inicio\"\nABRE_PARENTESES (40)\nFECHA_PARENTESES (41)\nABRE_CHAVES (123)\nTIPO_INTEIRO (300)\nIDENTIFICADOR (505) -&gt; \"idade\"\nATRIBUICAO (61)\nNUM_INTEIRO (500) -&gt; 25\nPONTO_VIRGULA (59)\nTIPO_REAL (301)\nIDENTIFICADOR (505) -&gt; \"salario\"\nATRIBUICAO (61)\nNUM_REAL (501) -&gt; 3500500  // (3500.50 * 1000)\nPONTO_VIRGULA (59)\n// ... continua\u00e7\u00e3o\n</code></pre>"},{"location":"tecnica/analise-lexica/#debugging-e-testes","title":"Debugging e Testes","text":""},{"location":"tecnica/analise-lexica/#modo-debug","title":"Modo Debug","text":"<pre><code># Compilar com debug\nflex -d lex.l\ngcc -DDEBUG_LEXER lex.yy.c -o lexer_debug\n\n# Executar teste\necho \"inteiro x = 42;\" | ./lexer_debug\n</code></pre>"},{"location":"tecnica/analise-lexica/#testes-unitarios-do-lexer","title":"Testes Unit\u00e1rios do Lexer","text":"<pre><code>// Teste individual de tokens\nvoid teste_token(const char* entrada, int token_esperado) {\n    yy_scan_string(entrada);\n    int token = yylex();\n\n    if (token == token_esperado) {\n        printf(\"\u2713 '%s' -&gt; %d\\n\", entrada, token);\n    } else {\n        printf(\"\u2717 '%s' -&gt; %d (esperado %d)\\n\", entrada, token, token_esperado);\n    }\n}\n\nint main() {\n    teste_token(\"programa\", PROGRAMA);\n    teste_token(\"123\", NUM_INTEIRO);\n    teste_token(\"3.14\", NUM_REAL);\n    teste_token(\"'A'\", CARACTER_LITERAL);\n    teste_token(\"verdadeiro\", VERDADEIRO);\n    return 0;\n}\n</code></pre>"},{"location":"tecnica/analise-lexica/#manutencao-e-extensoes","title":"Manuten\u00e7\u00e3o e Extens\u00f5es","text":""},{"location":"tecnica/analise-lexica/#adicionando-novos-tokens","title":"Adicionando Novos Tokens","text":"<ol> <li> <p>Definir padr\u00e3o em <code>lex.l</code>: <pre><code>\"nova_palavra\"  { return NOVA_PALAVRA; }\n</code></pre></p> </li> <li> <p>Adicionar token em <code>yacc.y</code>: <pre><code>%token NOVA_PALAVRA\n</code></pre></p> </li> <li> <p>Atualizar gram\u00e1tica conforme necess\u00e1rio</p> </li> </ol>"},{"location":"tecnica/analise-lexica/#modificando-comportamento","title":"Modificando Comportamento","text":"<pre><code>// Exemplo: Tornar palavras-chave case-insensitive\n(?i:programa)   { return PROGRAMA; }\n(?i:funcao)     { return FUNCAO; }\n</code></pre> <p>O analisador l\u00e9xico \u00e9 fundamental para o funcionamento do compilador, transformando o texto source em tokens que o parser pode processar. Sua implementa\u00e7\u00e3o robusta garante que todos os elementos da linguagem Portugol sejam corretamente reconhecidos e categorizados.</p>"},{"location":"tecnica/analise-sintatica/","title":"An\u00e1lise Sint\u00e1tica","text":"<p>A an\u00e1lise sint\u00e1tica \u00e9 a segunda fase do compilador Portugol-C, respons\u00e1vel por verificar se a sequ\u00eancia de tokens segue a gram\u00e1tica da linguagem e construir a \u00e1rvore sint\u00e1tica abstrata (AST). Este documento descreve o analisador sint\u00e1tico implementado usando Yacc/Bison.</p>"},{"location":"tecnica/analise-sintatica/#visao-geral","title":"Vis\u00e3o Geral","text":""},{"location":"tecnica/analise-sintatica/#arquivo-principal","title":"Arquivo Principal","text":"<ul> <li>Localiza\u00e7\u00e3o: <code>src/yacc.y</code></li> <li>Ferramenta: GNU Bison (Yet Another Compiler Compiler)</li> <li>Sa\u00edda: <code>y.tab.c</code> e <code>y.tab.h</code> (c\u00f3digo C gerado)</li> </ul>"},{"location":"tecnica/analise-sintatica/#funcao-principal","title":"Fun\u00e7\u00e3o Principal","text":"<p><pre><code>int yyparse(void)\n</code></pre> - Analisa a sequ\u00eancia de tokens do lexer - Constr\u00f3i a \u00e1rvore sint\u00e1tica abstrata (AST) - Retorna 0 em caso de sucesso, 1 em caso de erro</p>"},{"location":"tecnica/analise-sintatica/#estrutura-do-arquivo-yaccy","title":"Estrutura do Arquivo <code>yacc.y</code>","text":""},{"location":"tecnica/analise-sintatica/#1-secao-de-declaracoes","title":"1. Se\u00e7\u00e3o de Declara\u00e7\u00f5es","text":""},{"location":"tecnica/analise-sintatica/#inclusoes-e-definicoes","title":"Inclus\u00f5es e Defini\u00e7\u00f5es","text":"<pre><code>%{\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include \"ast.h\"        // Estruturas da AST\n#include \"simbolos.h\"   // Tabela de s\u00edmbolos\n#include \"tipos.h\"      // Defini\u00e7\u00f5es de tipos\nextern int yylex();\nextern int yylineno;\nextern char* yytext;\nvoid yyerror(const char* msg);\nAST_Node* raiz_programa = NULL;\n%}\n</code></pre>"},{"location":"tecnica/analise-sintatica/#uniao-de-valores-semanticos","title":"Uni\u00e3o de Valores Sem\u00e2nticos","text":"<pre><code>%union {\n    int intval;              // Valores inteiros\n    float realval;           // Valores reais\n    char charval;            // Valores de caractere\n    char* strval;            // Strings/identificadores\n    struct AST_Node* node;   // N\u00f3s da AST\n    struct Lista_Params* params;  // Lista de par\u00e2metros\n    struct Lista_Args* args;      // Lista de argumentos\n    int tipo;                     // C\u00f3digos de tipo\n}\n</code></pre>"},{"location":"tecnica/analise-sintatica/#declaracao-de-tokens","title":"Declara\u00e7\u00e3o de Tokens","text":"<pre><code>// Tokens b\u00e1sicos\n%token &lt;intval&gt; NUM_INTEIRO\n%token &lt;realval&gt; NUM_REAL\n%token &lt;charval&gt; CARACTER_LITERAL\n%token &lt;strval&gt; IDENTIFICADOR\n%token &lt;intval&gt; VERDADEIRO FALSO\n// Palavras-chave\n%token PROGRAMA FUNCAO INICIO\n%token SE SENAO PARA ENQUANTO FACA\n%token ESCOLHA CASO PADRAO PARE\n%token RETORNE LEIA ESCREVA\n// Tipos\n%token TIPO_INTEIRO TIPO_REAL TIPO_CARACTER TIPO_LOGICO\n// Operadores\n%token MAIS MENOS MULTIPLICACAO DIVISAO MODULO\n%token INCREMENTO DECREMENTO\n%token ATRIBUICAO MAIS_IGUAL MENOS_IGUAL MULT_IGUAL DIV_IGUAL MOD_IGUAL\n%token IGUAL DIFERENTE MENOR MENOR_IGUAL MAIOR MAIOR_IGUAL\n%token E_LOGICO OU_LOGICO NAO_LOGICO\n%token E_BITWISE OU_BITWISE XOR_BITWISE COMPLEMENTO\n%token DESLOC_ESQUERDA DESLOC_DIREITA\n// Delimitadores\n%token ABRE_PARENTESES FECHA_PARENTESES\n%token ABRE_CHAVES FECHA_CHAVES\n%token ABRE_COLCHETES FECHA_COLCHETES\n%token PONTO_VIRGULA VIRGULA DOIS_PONTOS\n</code></pre>"},{"location":"tecnica/analise-sintatica/#tipos-de-nao-terminais","title":"Tipos de N\u00e3o-Terminais","text":"<pre><code>%type &lt;node&gt; programa\n%type &lt;node&gt; lista_funcoes funcao\n%type &lt;node&gt; lista_parametros parametro\n%type &lt;node&gt; bloco lista_comandos comando\n%type &lt;node&gt; declaracao_variavel inicializacao_vetor\n%type &lt;node&gt; comando_atribuicao comando_se comando_para\n%type &lt;node&gt; comando_enquanto comando_escolha\n%type &lt;node&gt; comando_retorne comando_escreva comando_leia\n%type &lt;node&gt; expressao expressao_logica expressao_relacional\n%type &lt;node&gt; expressao_aritmetica termo fator\n%type &lt;node&gt; chamada_funcao lista_argumentos\n%type &lt;tipo&gt; tipo especificador_tipo\n</code></pre>"},{"location":"tecnica/analise-sintatica/#precedencia-e-associatividade","title":"Preced\u00eancia e Associatividade","text":"<pre><code>// Preced\u00eancia (menor para maior)\n%right ATRIBUICAO MAIS_IGUAL MENOS_IGUAL MULT_IGUAL DIV_IGUAL MOD_IGUAL\n%left OU_LOGICO\n%left E_LOGICO\n%left OU_BITWISE\n%left XOR_BITWISE\n%left E_BITWISE\n%left IGUAL DIFERENTE\n%left MENOR MENOR_IGUAL MAIOR MAIOR_IGUAL\n%left DESLOC_ESQUERDA DESLOC_DIREITA\n%left MAIS MENOS\n%left MULTIPLICACAO DIVISAO MODULO\n%right NAO_LOGICO COMPLEMENTO MENOS_UNARIO\n%left INCREMENTO DECREMENTO\n%left ABRE_COLCHETES\n%left ABRE_PARENTESES\n</code></pre>"},{"location":"tecnica/analise-sintatica/#2-gramatica-da-linguagem","title":"2. Gram\u00e1tica da Linguagem","text":""},{"location":"tecnica/analise-sintatica/#programa-principal","title":"Programa Principal","text":"<pre><code>programa: PROGRAMA ABRE_CHAVES lista_funcoes FECHA_CHAVES\n        {\n            $$ = criar_no_programa($3);\n            raiz_programa = $$;\n        }\n        ;\nlista_funcoes: funcao\n             {\n                 $$ = criar_lista_funcoes($1);\n             }\n             | lista_funcoes funcao\n             {\n                 $$ = adicionar_funcao($1, $2);\n             }\n             ;\n</code></pre>"},{"location":"tecnica/analise-sintatica/#declaracao-de-funcoes","title":"Declara\u00e7\u00e3o de Fun\u00e7\u00f5es","text":"<pre><code>funcao: tipo IDENTIFICADOR ABRE_PARENTESES lista_parametros FECHA_PARENTESES bloco\n      {\n          $$ = criar_no_funcao($1, $2, $4, $6);\n          adicionar_simbolo($2, $1, SIMBOLO_FUNCAO);\n      }\n      | FUNCAO IDENTIFICADOR ABRE_PARENTESES lista_parametros FECHA_PARENTESES bloco\n      {\n          $$ = criar_no_funcao(TIPO_VOID, $2, $4, $6);\n          adicionar_simbolo($2, TIPO_VOID, SIMBOLO_FUNCAO);\n      }\n      ;\nlista_parametros: /* vazio */\n                {\n                    $$ = NULL;\n                }\n                | parametro\n                {\n                    $$ = criar_lista_parametros($1);\n                }\n                | lista_parametros VIRGULA parametro\n                {\n                    $$ = adicionar_parametro($1, $3);\n                }\n                ;\nparametro: tipo IDENTIFICADOR\n         {\n             $$ = criar_no_parametro($1, $2);\n             adicionar_simbolo($2, $1, SIMBOLO_PARAMETRO);\n         }\n         | tipo IDENTIFICADOR ABRE_COLCHETES FECHA_COLCHETES\n         {\n             $$ = criar_no_parametro_vetor($1, $2);\n             adicionar_simbolo($2, $1 | TIPO_VETOR, SIMBOLO_PARAMETRO);\n         }\n         ;\n</code></pre>"},{"location":"tecnica/analise-sintatica/#tipos-e-declaracoes","title":"Tipos e Declara\u00e7\u00f5es","text":"<pre><code>tipo: especificador_tipo\n    {\n        $$ = $1;\n    }\n    ;\nespecificador_tipo: TIPO_INTEIRO    { $$ = TIPO_INT; }\n                  | TIPO_REAL       { $$ = TIPO_FLOAT; }\n                  | TIPO_CARACTER   { $$ = TIPO_CHAR; }\n                  | TIPO_LOGICO     { $$ = TIPO_BOOL; }\n                  ;\ndeclaracao_variavel: tipo IDENTIFICADOR PONTO_VIRGULA\n                   {\n                       $$ = criar_no_declaracao($1, $2, NULL);\n                       adicionar_simbolo($2, $1, SIMBOLO_VARIAVEL);\n                   }\n                   | tipo IDENTIFICADOR ATRIBUICAO expressao PONTO_VIRGULA\n                   {\n                       $$ = criar_no_declaracao($1, $2, $4);\n                       adicionar_simbolo($2, $1, SIMBOLO_VARIAVEL);\n                   }\n                   | tipo IDENTIFICADOR ABRE_COLCHETES NUM_INTEIRO FECHA_COLCHETES PONTO_VIRGULA\n                   {\n                       $$ = criar_no_declaracao_vetor($1, $2, $4, NULL);\n                       adicionar_simbolo($2, $1 | TIPO_VETOR, SIMBOLO_VARIAVEL);\n                   }\n                   | tipo IDENTIFICADOR ABRE_COLCHETES NUM_INTEIRO FECHA_COLCHETES ATRIBUICAO inicializacao_vetor PONTO_VIRGULA\n                   {\n                       $$ = criar_no_declaracao_vetor($1, $2, $4, $7);\n                       adicionar_simbolo($2, $1 | TIPO_VETOR, SIMBOLO_VARIAVEL);\n                   }\n                   ;\ninicializacao_vetor: ABRE_CHAVES lista_expressoes FECHA_CHAVES\n                   {\n                       $$ = criar_no_inicializacao_vetor($2);\n                   }\n                   ;\n</code></pre>"},{"location":"tecnica/analise-sintatica/#comandos-e-estruturas-de-controle","title":"Comandos e Estruturas de Controle","text":"<pre><code>comando: declaracao_variavel\n       | comando_atribuicao\n       | comando_se\n       | comando_para\n       | comando_enquanto\n       | comando_escolha\n       | comando_retorne\n       | comando_escreva\n       | comando_leia\n       | chamada_funcao PONTO_VIRGULA\n       | bloco\n       ;\ncomando_se: SE ABRE_PARENTESES expressao FECHA_PARENTESES comando\n          {\n              $$ = criar_no_se($3, $5, NULL);\n          }\n          | SE ABRE_PARENTESES expressao FECHA_PARENTESES comando SENAO comando\n          {\n              $$ = criar_no_se($3, $5, $7);\n          }\n          ;\ncomando_para: PARA ABRE_PARENTESES comando_atribuicao expressao PONTO_VIRGULA expressao FECHA_PARENTESES comando\n            {\n                $$ = criar_no_para($3, $4, $6, $8);\n            }\n            ;\ncomando_enquanto: ENQUANTO ABRE_PARENTESES expressao FECHA_PARENTESES comando\n                {\n                    $$ = criar_no_enquanto($3, $5);\n                }\n                ;\ncomando_escolha: ESCOLHA ABRE_PARENTESES expressao FECHA_PARENTESES ABRE_CHAVES lista_casos FECHA_CHAVES\n               {\n                   $$ = criar_no_escolha($3, $6);\n               }\n               ;\n</code></pre>"},{"location":"tecnica/analise-sintatica/#expressoes","title":"Express\u00f5es","text":"<pre><code>expressao: expressao_logica\n         {\n             $$ = $1;\n         }\n         ;\nexpressao_logica: expressao_relacional\n                {\n                    $$ = $1;\n                }\n                | expressao_logica E_LOGICO expressao_relacional\n                {\n                    $$ = criar_no_operacao(OP_E_LOGICO, $1, $3);\n                }\n                | expressao_logica OU_LOGICO expressao_relacional\n                {\n                    $$ = criar_no_operacao(OP_OU_LOGICO, $1, $3);\n                }\n                | NAO_LOGICO expressao_relacional\n                {\n                    $$ = criar_no_operacao_unaria(OP_NAO_LOGICO, $2);\n                }\n                ;\nexpressao_relacional: expressao_aritmetica\n                    {\n                        $$ = $1;\n                    }\n                    | expressao_aritmetica IGUAL expressao_aritmetica\n                    {\n                        $$ = criar_no_operacao(OP_IGUAL, $1, $3);\n                    }\n                    | expressao_aritmetica DIFERENTE expressao_aritmetica\n                    {\n                        $$ = criar_no_operacao(OP_DIFERENTE, $1, $3);\n                    }\n                    | expressao_aritmetica MENOR expressao_aritmetica\n                    {\n                        $$ = criar_no_operacao(OP_MENOR, $1, $3);\n                    }\n                    | expressao_aritmetica MENOR_IGUAL expressao_aritmetica\n                    {\n                        $$ = criar_no_operacao(OP_MENOR_IGUAL, $1, $3);\n                    }\n                    | expressao_aritmetica MAIOR expressao_aritmetica\n                    {\n                        $$ = criar_no_operacao(OP_MAIOR, $1, $3);\n                    }\n                    | expressao_aritmetica MAIOR_IGUAL expressao_aritmetica\n                    {\n                        $$ = criar_no_operacao(OP_MAIOR_IGUAL, $1, $3);\n                    }\n                    ;\nexpressao_aritmetica: termo\n                    {\n                        $$ = $1;\n                    }\n                    | expressao_aritmetica MAIS termo\n                    {\n                        $$ = criar_no_operacao(OP_SOMA, $1, $3);\n                    }\n                    | expressao_aritmetica MENOS termo\n                    {\n                        $$ = criar_no_operacao(OP_SUBTRACAO, $1, $3);\n                    }\n                    ;\ntermo: fator\n     {\n         $$ = $1;\n     }\n     | termo MULTIPLICACAO fator\n     {\n         $$ = criar_no_operacao(OP_MULTIPLICACAO, $1, $3);\n     }\n     | termo DIVISAO fator\n     {\n         $$ = criar_no_operacao(OP_DIVISAO, $1, $3);\n     }\n     | termo MODULO fator\n     {\n         $$ = criar_no_operacao(OP_MODULO, $1, $3);\n     }\n     ;\nfator: NUM_INTEIRO\n     {\n         $$ = criar_no_literal_int($1);\n     }\n     | NUM_REAL\n     {\n         $$ = criar_no_literal_float($1);\n     }\n     | CARACTER_LITERAL\n     {\n         $$ = criar_no_literal_char($1);\n     }\n     | VERDADEIRO\n     {\n         $$ = criar_no_literal_bool(1);\n     }\n     | FALSO\n     {\n         $$ = criar_no_literal_bool(0);\n     }\n     | IDENTIFICADOR\n     {\n         $$ = criar_no_identificador($1);\n     }\n     | IDENTIFICADOR ABRE_COLCHETES expressao FECHA_COLCHETES\n     {\n         $$ = criar_no_acesso_vetor($1, $3);\n     }\n     | chamada_funcao\n     {\n         $$ = $1;\n     }\n     | ABRE_PARENTESES expressao FECHA_PARENTESES\n     {\n         $$ = $2;\n     }\n     | MENOS fator %prec MENOS_UNARIO\n     {\n         $$ = criar_no_operacao_unaria(OP_MENOS_UNARIO, $2);\n     }\n     ;\n</code></pre>"},{"location":"tecnica/analise-sintatica/#3-tratamento-de-erros","title":"3. Tratamento de Erros","text":""},{"location":"tecnica/analise-sintatica/#funcao-de-erro","title":"Fun\u00e7\u00e3o de Erro","text":"<pre><code>void yyerror(const char* msg) {\n    fprintf(stderr, \"Erro sint\u00e1tico na linha %d: %s\\n\", yylineno, msg);\n    fprintf(stderr, \"Pr\u00f3ximo ao token: '%s'\\n\", yytext);\n\n    // Log adicional para debugging\n    #ifdef DEBUG_PARSER\n    fprintf(stderr, \"Estado do parser: %d\\n\", yystate);\n    imprimir_pilha_parser();\n    #endif\n}\n</code></pre>"},{"location":"tecnica/analise-sintatica/#recuperacao-de-erros","title":"Recupera\u00e7\u00e3o de Erros","text":"<pre><code>// Recupera\u00e7\u00e3o em comandos\ncomando: error PONTO_VIRGULA\n       {\n           yyerror(\"Comando inv\u00e1lido, recuperando...\");\n           $$ = criar_no_erro();\n           yyerrok;\n       }\n       ;\n// Recupera\u00e7\u00e3o em blocos\nbloco: ABRE_CHAVES lista_comandos FECHA_CHAVES\n     {\n         $$ = criar_no_bloco($2);\n     }\n     | ABRE_CHAVES error FECHA_CHAVES\n     {\n         yyerror(\"Erro no bloco, recuperando...\");\n         $$ = criar_no_bloco_vazio();\n         yyerrok;\n     }\n     ;\n</code></pre>"},{"location":"tecnica/analise-sintatica/#estrutura-da-ast","title":"Estrutura da AST","text":""},{"location":"tecnica/analise-sintatica/#definicao-dos-nos","title":"Defini\u00e7\u00e3o dos N\u00f3s","text":"<pre><code>// Em ast.h\ntypedef enum {\n    NO_PROGRAMA,\n    NO_FUNCAO,\n    NO_PARAMETRO,\n    NO_BLOCO,\n    NO_DECLARACAO,\n    NO_ATRIBUICAO,\n    NO_SE,\n    NO_PARA,\n    NO_ENQUANTO,\n    NO_ESCOLHA,\n    NO_CASO,\n    NO_RETORNE,\n    NO_CHAMADA_FUNCAO,\n    NO_OPERACAO_BINARIA,\n    NO_OPERACAO_UNARIA,\n    NO_LITERAL_INT,\n    NO_LITERAL_FLOAT,\n    NO_LITERAL_CHAR,\n    NO_LITERAL_BOOL,\n    NO_IDENTIFICADOR,\n    NO_ACESSO_VETOR,\n    NO_LISTA\n} TipoNo;\n\ntypedef struct AST_Node {\n    TipoNo tipo;\n    int linha;\n\n    union {\n        // N\u00f3 de programa\n        struct {\n            struct AST_Node* funcoes;\n        } programa;\n\n        // N\u00f3 de fun\u00e7\u00e3o\n        struct {\n            int tipo_retorno;\n            char* nome;\n            struct AST_Node* parametros;\n            struct AST_Node* corpo;\n        } funcao;\n\n        // N\u00f3 de opera\u00e7\u00e3o bin\u00e1ria\n        struct {\n            int operador;\n            struct AST_Node* esquerda;\n            struct AST_Node* direita;\n        } operacao_binaria;\n\n        // N\u00f3 de literal\n        struct {\n            int tipo_literal;\n            union {\n                int intval;\n                float realval;\n                char charval;\n                int boolval;\n            } valor;\n        } literal;\n\n        // N\u00f3 de identificador\n        struct {\n            char* nome;\n        } identificador;\n\n        // N\u00f3 de lista (gen\u00e9rico)\n        struct {\n            struct AST_Node* item;\n            struct AST_Node* proximo;\n        } lista;\n    } dados;\n\n    struct AST_Node* proximo; // Para listas encadeadas\n} AST_Node;\n</code></pre>"},{"location":"tecnica/analise-sintatica/#funcoes-de-criacao-de-nos","title":"Fun\u00e7\u00f5es de Cria\u00e7\u00e3o de N\u00f3s","text":"<pre><code>// Em ast.c\nAST_Node* criar_no_programa(AST_Node* funcoes) {\n    AST_Node* no = malloc(sizeof(AST_Node));\n    no-&gt;tipo = NO_PROGRAMA;\n    no-&gt;linha = yylineno;\n    no-&gt;dados.programa.funcoes = funcoes;\n    no-&gt;proximo = NULL;\n    return no;\n}\n\nAST_Node* criar_no_operacao(int operador, AST_Node* esq, AST_Node* dir) {\n    AST_Node* no = malloc(sizeof(AST_Node));\n    no-&gt;tipo = NO_OPERACAO_BINARIA;\n    no-&gt;linha = yylineno;\n    no-&gt;dados.operacao_binaria.operador = operador;\n    no-&gt;dados.operacao_binaria.esquerda = esq;\n    no-&gt;dados.operacao_binaria.direita = dir;\n    no-&gt;proximo = NULL;\n    return no;\n}\n\nAST_Node* criar_no_literal_int(int valor) {\n    AST_Node* no = malloc(sizeof(AST_Node));\n    no-&gt;tipo = NO_LITERAL_INT;\n    no-&gt;linha = yylineno;\n    no-&gt;dados.literal.tipo_literal = TIPO_INT;\n    no-&gt;dados.literal.valor.intval = valor;\n    no-&gt;proximo = NULL;\n    return no;\n}\n</code></pre>"},{"location":"tecnica/analise-sintatica/#analise-semantica-integrada","title":"An\u00e1lise Sem\u00e2ntica Integrada","text":""},{"location":"tecnica/analise-sintatica/#verificacao-de-tipos","title":"Verifica\u00e7\u00e3o de Tipos","text":"<pre><code>expressao_aritmetica: expressao_aritmetica MAIS termo\n                    {\n                        // Verificar compatibilidade de tipos\n                        int tipo1 = obter_tipo($1);\n                        int tipo3 = obter_tipo($3);\n\n                        if (!tipos_compativeis_operacao(tipo1, tipo3, OP_SOMA)) {\n                            yyerror(\"Tipos incompat\u00edveis na opera\u00e7\u00e3o de soma\");\n                        }\n\n                        $$ = criar_no_operacao(OP_SOMA, $1, $3);\n                        definir_tipo($$, promover_tipos(tipo1, tipo3));\n                    }\n                    ;\n</code></pre>"},{"location":"tecnica/analise-sintatica/#verificacao-de-escopo","title":"Verifica\u00e7\u00e3o de Escopo","text":"<pre><code>IDENTIFICADOR: {\n                   Simbolo* simbolo = buscar_simbolo($1);\n                   if (simbolo == NULL) {\n                       char msg[256];\n                       sprintf(msg, \"Vari\u00e1vel '%s' n\u00e3o declarada\", $1);\n                       yyerror(msg);\n                   }\n                   $$ = criar_no_identificador($1);\n                   if (simbolo) {\n                       definir_tipo($$, simbolo-&gt;tipo);\n                   }\n               }\n               ;\n</code></pre>"},{"location":"tecnica/analise-sintatica/#geracao-da-ast","title":"Gera\u00e7\u00e3o da AST","text":""},{"location":"tecnica/analise-sintatica/#exemplo-de-ast-gerada","title":"Exemplo de AST Gerada","text":"<p>C\u00f3digo Portugol: <pre><code>programa {\n    inteiro fatorial(inteiro n) {\n        se (n &lt;= 1) {\n            retorne 1;\n        } senao {\n            retorne n * fatorial(n - 1);\n        }\n    }\n\n    funcao inicio() {\n        inteiro num = 5;\n        escreva(\"Resultado: \", fatorial(num), \"\\n\");\n    }\n}\n</code></pre></p> <p>AST Resultante: <pre><code>NO_PROGRAMA\n\u251c\u2500\u2500 NO_FUNCAO (fatorial)\n\u2502   \u251c\u2500\u2500 tipo_retorno: TIPO_INT\n\u2502   \u251c\u2500\u2500 parametros: NO_PARAMETRO (n, TIPO_INT)\n\u2502   \u2514\u2500\u2500 corpo: NO_BLOCO\n\u2502       \u2514\u2500\u2500 NO_SE\n\u2502           \u251c\u2500\u2500 condicao: NO_OPERACAO_BINARIA (&lt;=)\n\u2502           \u2502   \u251c\u2500\u2500 esquerda: NO_IDENTIFICADOR (n)\n\u2502           \u2502   \u2514\u2500\u2500 direita: NO_LITERAL_INT (1)\n\u2502           \u251c\u2500\u2500 entao: NO_RETORNE\n\u2502           \u2502   \u2514\u2500\u2500 valor: NO_LITERAL_INT (1)\n\u2502           \u2514\u2500\u2500 senao: NO_RETORNE\n\u2502               \u2514\u2500\u2500 valor: NO_OPERACAO_BINARIA (*)\n\u2502                   \u251c\u2500\u2500 esquerda: NO_IDENTIFICADOR (n)\n\u2502                   \u2514\u2500\u2500 direita: NO_CHAMADA_FUNCAO (fatorial)\n\u2502                       \u2514\u2500\u2500 args: NO_OPERACAO_BINARIA (-)\n\u2502                           \u251c\u2500\u2500 esquerda: NO_IDENTIFICADOR (n)\n\u2502                           \u2514\u2500\u2500 direita: NO_LITERAL_INT (1)\n\u2514\u2500\u2500 NO_FUNCAO (inicio)\n    \u251c\u2500\u2500 tipo_retorno: TIPO_VOID\n    \u251c\u2500\u2500 parametros: NULL\n    \u2514\u2500\u2500 corpo: NO_BLOCO\n        \u251c\u2500\u2500 NO_DECLARACAO\n        \u2502   \u251c\u2500\u2500 tipo: TIPO_INT\n        \u2502   \u251c\u2500\u2500 nome: \"num\"\n        \u2502   \u2514\u2500\u2500 valor: NO_LITERAL_INT (5)\n        \u2514\u2500\u2500 NO_CHAMADA_FUNCAO (escreva)\n            \u2514\u2500\u2500 args: [NO_LITERAL_STRING, NO_CHAMADA_FUNCAO, NO_LITERAL_STRING]\n</code></pre></p>"},{"location":"tecnica/analise-sintatica/#otimizacoes-do-parser","title":"Otimiza\u00e7\u00f5es do Parser","text":""},{"location":"tecnica/analise-sintatica/#eliminacao-de-recursao-a-esquerda","title":"Elimina\u00e7\u00e3o de Recurs\u00e3o \u00e0 Esquerda","text":"<pre><code>// Problema: recurs\u00e3o \u00e0 esquerda\nexpressao: expressao MAIS termo\n         | termo\n         ;\n// Solu\u00e7\u00e3o: recurs\u00e3o \u00e0 direita ou itera\u00e7\u00e3o\nexpressao: termo lista_operacoes\n         ;\nlista_operacoes: /* vazio */\n               | MAIS termo lista_operacoes\n               ;\n</code></pre>"},{"location":"tecnica/analise-sintatica/#reducao-de-conflitos","title":"Redu\u00e7\u00e3o de Conflitos","text":"<pre><code>// Usar preced\u00eancia para resolver conflitos shift/reduce\n%left MAIS MENOS\n%left MULTIPLICACAO DIVISAO\n%right MENOS_UNARIO\n// Resolver conflito dangling-else\n%nonassoc SENAO\n%nonassoc SE\n</code></pre>"},{"location":"tecnica/analise-sintatica/#debugging-e-testes","title":"Debugging e Testes","text":""},{"location":"tecnica/analise-sintatica/#visualizacao-da-ast","title":"Visualiza\u00e7\u00e3o da AST","text":"<pre><code>void imprimir_ast(AST_Node* no, int nivel) {\n    if (!no) return;\n\n    for (int i = 0; i &lt; nivel; i++) {\n        printf(\"  \");\n    }\n\n    switch (no-&gt;tipo) {\n        case NO_PROGRAMA:\n            printf(\"PROGRAMA\\n\");\n            imprimir_ast(no-&gt;dados.programa.funcoes, nivel + 1);\n            break;\n\n        case NO_OPERACAO_BINARIA:\n            printf(\"OPERACAO %s\\n\", nome_operador(no-&gt;dados.operacao_binaria.operador));\n            imprimir_ast(no-&gt;dados.operacao_binaria.esquerda, nivel + 1);\n            imprimir_ast(no-&gt;dados.operacao_binaria.direita, nivel + 1);\n            break;\n\n        case NO_LITERAL_INT:\n            printf(\"INT: %d\\n\", no-&gt;dados.literal.valor.intval);\n            break;\n\n        // ... outros casos\n    }\n\n    imprimir_ast(no-&gt;proximo, nivel);\n}\n</code></pre>"},{"location":"tecnica/analise-sintatica/#testes-do-parser","title":"Testes do Parser","text":"<pre><code>// Teste individual\nvoid testar_expressao(const char* codigo, const char* esperado) {\n    yy_scan_string(codigo);\n    AST_Node* ast = NULL;\n\n    if (yyparse() == 0) {\n        char resultado[1000];\n        ast_para_string(ast, resultado);\n\n        if (strcmp(resultado, esperado) == 0) {\n            printf(\"\u2713 '%s'\\n\", codigo);\n        } else {\n            printf(\"\u2717 '%s'\\n  Esperado: %s\\n  Obtido: %s\\n\", \n                   codigo, esperado, resultado);\n        }\n    } else {\n        printf(\"\u2717 '%s' - Erro de parsing\\n\", codigo);\n    }\n}\nint main() {\n    testar_expressao(\"2 + 3 * 4\", \"SOMA(2, MULT(3, 4))\");\n    testar_expressao(\"(2 + 3) * 4\", \"MULT(SOMA(2, 3), 4)\");\n    return 0;\n}\n</code></pre>"},{"location":"tecnica/analise-sintatica/#performance-e-memoria","title":"Performance e Mem\u00f3ria","text":""},{"location":"tecnica/analise-sintatica/#gerenciamento-de-memoria","title":"Gerenciamento de Mem\u00f3ria","text":"<pre><code>void liberar_ast(AST_Node* no) {\n    if (!no) return;\n\n    switch (no-&gt;tipo) {\n        case NO_PROGRAMA:\n            liberar_ast(no-&gt;dados.programa.funcoes);\n            break;\n\n        case NO_OPERACAO_BINARIA:\n            liberar_ast(no-&gt;dados.operacao_binaria.esquerda);\n            liberar_ast(no-&gt;dados.operacao_binaria.direita);\n            break;\n\n        case NO_IDENTIFICADOR:\n            free(no-&gt;dados.identificador.nome);\n            break;\n\n        // ... outros casos\n    }\n\n    liberar_ast(no-&gt;proximo);\n    free(no);\n}\n</code></pre>"},{"location":"tecnica/analise-sintatica/#otimizacao-de-pilha","title":"Otimiza\u00e7\u00e3o de Pilha","text":"<pre><code>// Configurar tamanho da pilha do parser\n#define YYMAXDEPTH 10000\n#define YYINITDEPTH 200\n</code></pre>"},{"location":"tecnica/analise-sintatica/#interface-com-outras-fases","title":"Interface com Outras Fases","text":""},{"location":"tecnica/analise-sintatica/#passagem-para-analise-semantica","title":"Passagem para An\u00e1lise Sem\u00e2ntica","text":"<pre><code>int main() {\n    if (yyparse() == 0) {\n        printf(\"Parsing conclu\u00eddo com sucesso\\n\");\n\n        // An\u00e1lise sem\u00e2ntica\n        if (analisar_semantica(raiz_programa) == 0) {\n            printf(\"An\u00e1lise sem\u00e2ntica OK\\n\");\n\n            // Gera\u00e7\u00e3o de c\u00f3digo\n            gerar_codigo(raiz_programa);\n        }\n    }\n\n    liberar_ast(raiz_programa);\n    return 0;\n}\n</code></pre>"},{"location":"tecnica/analise-sintatica/#comunicacao-com-lexer","title":"Comunica\u00e7\u00e3o com Lexer","text":"<pre><code>// Parser solicita tokens do lexer\nint token = yylex();\nchar* texto_token = yytext;\nint linha_token = yylineno;\n</code></pre> <p>O analisador sint\u00e1tico \u00e9 o cora\u00e7\u00e3o do compilador, transformando a sequ\u00eancia linear de tokens em uma estrutura hier\u00e1rquica (AST) que representa a estrutura l\u00f3gica do programa. Sua implementa\u00e7\u00e3o robusta garante que apenas programas sintaticamente corretos sejam aceitos e que a AST resultante seja adequada para as fases subsequentes de compila\u00e7\u00e3o.</p>"},{"location":"tecnica/arquitetura/","title":"Arquitetura do Compilador","text":"<p>Esta se\u00e7\u00e3o descreve a arquitetura interna do Compilador Portugol-C, suas componentes principais e como elas interagem.</p>"},{"location":"tecnica/arquitetura/#visao-geral-da-arquitetura","title":"Vis\u00e3o Geral da Arquitetura","text":"<pre><code>graph TD\n    A[C\u00f3digo Fonte Portugol] --&gt; B[An\u00e1lise L\u00e9xica]\n    B --&gt; C[An\u00e1lise Sint\u00e1tica]\n    C --&gt; D[AST - \u00c1rvore Sint\u00e1tica]\n    D --&gt; E[An\u00e1lise Sem\u00e2ntica]\n    E --&gt; F[Tabela de S\u00edmbolos]\n    F --&gt; G[Otimiza\u00e7\u00f5es]\n    G --&gt; H[Gera\u00e7\u00e3o de C\u00f3digo C]\n    H --&gt; I[C\u00f3digo C Final]\n\n    subgraph \"Frontend\"\n        B\n        C\n        D\n    end\n\n    subgraph \"Middle-end\"\n        E\n        F\n        G\n    end\n\n    subgraph \"Backend\"\n        H\n    end\n</code></pre>"},{"location":"tecnica/arquitetura/#componentes-principais","title":"Componentes Principais","text":""},{"location":"tecnica/arquitetura/#estrutura-de-arquivos","title":"\ud83d\udcc1 Estrutura de Arquivos","text":"<pre><code>src/\n\u251c\u2500\u2500 main.c          # Ponto de entrada do compilador\n\u251c\u2500\u2500 lex.l           # Especifica\u00e7\u00e3o do analisador l\u00e9xico (Flex)\n\u251c\u2500\u2500 yacc.y          # Especifica\u00e7\u00e3o do analisador sint\u00e1tico (Bison)\n\u251c\u2500\u2500 ast.h           # Defini\u00e7\u00f5es da AST\n\u251c\u2500\u2500 ast.c           # Implementa\u00e7\u00e3o da AST e gera\u00e7\u00e3o de c\u00f3digo\n\u251c\u2500\u2500 simbolos.h      # Defini\u00e7\u00f5es da tabela de s\u00edmbolos\n\u251c\u2500\u2500 simbolos.c      # Implementa\u00e7\u00e3o da tabela de s\u00edmbolos\n\u2514\u2500\u2500 tipos.h         # Defini\u00e7\u00f5es de tipos de dados\n</code></pre>"},{"location":"tecnica/arquitetura/#frontend-analise","title":"Frontend - An\u00e1lise","text":""},{"location":"tecnica/arquitetura/#analise-lexica-lexl","title":"\ud83d\udd0d An\u00e1lise L\u00e9xica (lex.l)","text":"<p>Responsabilidade: Converter o c\u00f3digo fonte em tokens</p> <p>Tecnologia: Flex (Fast Lexical Analyzer)</p> <p>Principais Tokens: <pre><code>// Palavras-chave\nPROGRAMA, INICIO, FUNCAO, SE, SENAO, ENQUANTO, PARA\n\n// Tipos de dados\nTIPO_INTEIRO, TIPO_REAL, TIPO_CARACTER, TIPO_LOGICO\n\n// Operadores\nIGUAL, COMPARA, DIFERENTE, SOMA, SUB, MUL, DIV\n\n// Delimitadores\nABRECHAVE, FECHACHAVE, ABREPAR, FECHAPAR\n\n// Literais\nNUM, ID, STRING\n</code></pre></p> <p>Funcionalidades: - Reconhecimento de n\u00fameros inteiros e decimais - Suporte a strings e caracteres - Coment\u00e1rios de linha (<code>//</code>) e bloco (<code>/* */</code>) - Operadores bitwise e incremento/decremento</p>"},{"location":"tecnica/arquitetura/#analise-sintatica-yaccy","title":"\ud83c\udf33 An\u00e1lise Sint\u00e1tica (yacc.y)","text":"<p>Responsabilidade: Validar a estrutura sint\u00e1tica e construir a AST</p> <p>Tecnologia: Bison (GNU Parser Generator)</p> <p>Gram\u00e1tica Principal: <pre><code>programa: PROGRAMA ABRECHAVE corpo_programa FECHACHAVE\ncorpo_programa: lista_funcoes FUNCAO INICIO ABREPAR FECHAPAR \n                ABRECHAVE bloco FECHACHAVE\ndeclaracao: tipo lista_ids\n          | tipo ID ABRECOLCHETE NUM FECHACOLCHETE  // Vetores\nexpressao: NUM | ID | STRING\n         | expressao SOMA expressao\n         | ID ABRECOLCHETE expressao FECHACOLCHETE  // Acesso a vetor\n</code></pre></p> <p>Caracter\u00edsticas: - Preced\u00eancia de operadores definida - Suporte a express\u00f5es aninhadas - Tratamento de conflitos shift/reduce - Constru\u00e7\u00e3o incremental da AST</p>"},{"location":"tecnica/arquitetura/#middle-end-semantica-e-otimizacoes","title":"Middle-end - Sem\u00e2ntica e Otimiza\u00e7\u00f5es","text":""},{"location":"tecnica/arquitetura/#arvore-sintatica-abstrata-ast","title":"\ud83e\udde0 \u00c1rvore Sint\u00e1tica Abstrata (AST)","text":"<p>Arquivo: <code>ast.h</code>, <code>ast.c</code></p> <p>Tipos de N\u00f3s: <pre><code>typedef enum {\n    AST_PROGRAMA,           // Raiz do programa\n    AST_BLOCO,             // Bloco de comandos\n    AST_DECLARACAO,        // Declara\u00e7\u00e3o de vari\u00e1vel\n    AST_VETOR_DECLARACAO,  // Declara\u00e7\u00e3o de vetor\n    AST_VETOR_ACESSO,      // Acesso a elemento de vetor\n    AST_ATRIBUICAO,        // Atribui\u00e7\u00e3o\n    AST_EXPRESSAO,         // Express\u00f5es aritm\u00e9ticas/l\u00f3gicas\n    AST_IF,                // Estrutura condicional\n    AST_WHILE,             // La\u00e7o while\n    AST_FOR,               // La\u00e7o for\n    AST_LEITURA,           // Comando leia\n    AST_ESCRITA,           // Comando escreva\n    AST_FUNCAO,            // Declara\u00e7\u00e3o de fun\u00e7\u00e3o\n    AST_CHAMADA_FUNCAO,    // Chamada de fun\u00e7\u00e3o\n    // ... outros tipos\n} ASTTipo;\n</code></pre></p> <p>Estrutura do N\u00f3: <pre><code>typedef struct AST {\n    ASTTipo tipo;           // Tipo do n\u00f3\n    char* valor;            // Valor literal (se aplic\u00e1vel)\n    struct AST** filhos;    // Array de n\u00f3s filhos\n    int n_filhos;           // N\u00famero de filhos\n    int tipo_expr;          // Tipo da express\u00e3o (para an\u00e1lise sem\u00e2ntica)\n} AST;\n</code></pre></p>"},{"location":"tecnica/arquitetura/#tabela-de-simbolos","title":"\ud83d\udccb Tabela de S\u00edmbolos","text":"<p>Arquivo: <code>simbolos.h</code>, <code>simbolos.c</code></p> <p>Estrutura do S\u00edmbolo: <pre><code>typedef struct simbolo {\n    char nome[32];              // Nome do s\u00edmbolo\n    int tipo;                   // Tipo de dados\n    int escopo;                 // N\u00edvel de escopo\n    CategoriaSimbolo categoria; // Vari\u00e1vel, fun\u00e7\u00e3o, par\u00e2metro\n    int inicializada;           // Flag de inicializa\u00e7\u00e3o\n    int linha_decl;             // Linha de declara\u00e7\u00e3o\n    // Para fun\u00e7\u00f5es:\n    int tipo_retorno;           // Tipo de retorno\n    int n_parametros;           // N\u00famero de par\u00e2metros\n    struct simbolo **parametros; // Lista de par\u00e2metros\n    struct simbolo *proximo;    // Pr\u00f3ximo na hash table\n} Simbolo;\n</code></pre></p> <p>Funcionalidades: - Hash table para busca eficiente O(1) - Controle de escopo hier\u00e1rquico - Verifica\u00e7\u00e3o de declara\u00e7\u00e3o antes do uso - Detec\u00e7\u00e3o de redefini\u00e7\u00f5es - An\u00e1lise de tipos</p>"},{"location":"tecnica/arquitetura/#otimizacoes","title":"\u26a1 Otimiza\u00e7\u00f5es","text":"<p>Propaga\u00e7\u00e3o de Constantes: <pre><code>// Antes da otimiza\u00e7\u00e3o\nx = 2 + 3;\ny = x * 4;\n\n// Ap\u00f3s propaga\u00e7\u00e3o de constantes\nx = 5;\ny = 20;\n</code></pre></p> <p>Elimina\u00e7\u00e3o de C\u00f3digo Morto: <pre><code>// Antes\nif (1 == 1) {\n    escreva(\"sempre executado\");\n    retorne 0;\n    x = 10; // &lt;- c\u00f3digo morto\n}\n\n// Ap\u00f3s otimiza\u00e7\u00e3o\nescreva(\"sempre executado\");\nretorne 0;\n</code></pre></p>"},{"location":"tecnica/arquitetura/#backend-geracao-de-codigo","title":"Backend - Gera\u00e7\u00e3o de C\u00f3digo","text":""},{"location":"tecnica/arquitetura/#geracao-de-codigo-c","title":"\ud83c\udfaf Gera\u00e7\u00e3o de C\u00f3digo C","text":"<p>Arquivo: <code>ast.c</code> (fun\u00e7\u00e3o <code>ast_gera_c</code>) Estrat\u00e9gia: Traversal da AST com gera\u00e7\u00e3o de c\u00f3digo correspondente Mapeamentos Principais: | Portugol | C | |----------|---| | <code>programa { funcao inicio() { ... } }</code> | <code>int main() { ... return 0; }</code> | | <code>inteiro x</code> | <code>int x;</code> | | <code>real x[5]</code> | <code>float x[5];</code> | | <code>leia(x)</code> | <code>scanf(\"%d\", &amp;x);</code> | | <code>escreva(x)</code> | <code>printf(\"%d\\n\", x);</code> | | <code>se (x &gt; 0) { ... }</code> | <code>if (x &gt; 0) { ... }</code> | Formata\u00e7\u00e3o Autom\u00e1tica: - Indenta\u00e7\u00e3o consistente - Includes autom\u00e1ticos (<code>#include &lt;stdio.h&gt;</code>) - Especificadores de formato corretos (<code>%d</code>, <code>%f</code>, <code>%c</code>) - Tratamento de refer\u00eancias para scanf</p>"},{"location":"tecnica/arquitetura/#fluxo-de-compilacao","title":"Fluxo de Compila\u00e7\u00e3o","text":""},{"location":"tecnica/arquitetura/#processo-completo","title":"\ud83d\udd04 Processo Completo","text":"<ol> <li> <p>Inicializa\u00e7\u00e3o:    <pre><code>int main() {\n    printf(\"Iniciando o tradutor Portugol \u2192 C...\\n\");\n    yyparse();  // Inicia an\u00e1lise sint\u00e1tica\n    // ...\n}\n</code></pre></p> </li> <li> <p>An\u00e1lise L\u00e9xica/Sint\u00e1tica:</p> </li> <li>Flex gera tokens</li> <li>Bison valida sintaxe</li> <li> <p>AST \u00e9 constru\u00edda incrementalmente</p> </li> <li> <p>An\u00e1lise Sem\u00e2ntica:</p> </li> <li>Tabela de s\u00edmbolos \u00e9 populada</li> <li>Tipos s\u00e3o verificados</li> <li> <p>Escopos s\u00e3o validados</p> </li> <li> <p>Otimiza\u00e7\u00f5es:    <pre><code>raiz_ast = otimiza_ast_propagacao_constantes(raiz_ast);\nraiz_ast = otimiza_ast_dead_code(raiz_ast);\n</code></pre></p> </li> <li> <p>Gera\u00e7\u00e3o de C\u00f3digo:    <pre><code>FILE *saida = fopen(\"saida.c\", \"w\");\nast_gera_c(raiz_ast, saida, 0);\nfclose(saida);\n</code></pre></p> </li> <li> <p>Valida\u00e7\u00e3o:    <pre><code>verificar_variaveis();  // Verifica vari\u00e1veis n\u00e3o inicializadas\n</code></pre></p> </li> <li> <p>Limpeza:    <pre><code>ast_libera(raiz_ast);  // Libera mem\u00f3ria da AST\n</code></pre></p> </li> </ol>"},{"location":"tecnica/arquitetura/#tratamento-de-erros","title":"Tratamento de Erros","text":""},{"location":"tecnica/arquitetura/#tipos-de-erros","title":"\ud83d\udea8 Tipos de Erros","text":"<ol> <li>Erros L\u00e9xicos:    <pre><code>[LEXER] caracter inv\u00e1lido: @\n</code></pre></li> <li>Erros Sint\u00e1ticos:    <pre><code>Erro sint\u00e1tico: syntax error\n</code></pre></li> <li>Erros Sem\u00e2nticos:    <pre><code>[ERRO SEM\u00c2NTICO] Vari\u00e1vel 'x' n\u00e3o declarada!\n[ERRO SEM\u00c2NTICO] Fun\u00e7\u00e3o 'foo' espera 2 par\u00e2metros, mas recebeu 1.\n</code></pre></li> </ol>"},{"location":"tecnica/arquitetura/#estrategias-de-recuperacao","title":"\ud83d\udd27 Estrat\u00e9gias de Recupera\u00e7\u00e3o","text":"<ul> <li>Panic mode: Sincroniza\u00e7\u00e3o em pontos seguros</li> <li>Continua\u00e7\u00e3o: Tentativa de prosseguir ap\u00f3s erro</li> <li>Relat\u00f3rios detalhados: Linha e contexto do erro</li> </ul>"},{"location":"tecnica/arquitetura/#performance-e-escalabilidade","title":"Performance e Escalabilidade","text":""},{"location":"tecnica/arquitetura/#complexidade","title":"\ud83d\udcc8 Complexidade","text":"Componente Complexidade Observa\u00e7\u00f5es An\u00e1lise L\u00e9xica O(n) Linear no tamanho do c\u00f3digo An\u00e1lise Sint\u00e1tica O(n) Parser LR(1) Tabela de S\u00edmbolos O(1) Hash table bem distribu\u00edda Gera\u00e7\u00e3o de C\u00f3digo O(n) Traversal simples da AST ### \ud83d\udcbe Uso de Mem\u00f3ria - AST: Proporcional ao tamanho do c\u00f3digo - Tabela de S\u00edmbolos: Hash table com 211 buckets - Buffers: Strings alocadas dinamicamente - Cleanup: Libera\u00e7\u00e3o autom\u00e1tica ao final ### \u26a1 Otimiza\u00e7\u00f5es de Performance - Hash table para s\u00edmbolos - Aloca\u00e7\u00e3o eficiente de n\u00f3s AST - Strings com <code>strdup()</code> para flexibilidade - Verifica\u00e7\u00f5es pregui\u00e7osas onde poss\u00edvel ## Extensibilidade ### \ud83d\udd0c Pontos de Extens\u00e3o 1. Novos Tipos: Adicionar em <code>tipos.h</code> e <code>simbolos.c</code> 2. Novos Operadores: Extender <code>lex.l</code> e <code>yacc.y</code> 3. Novas Estruturas: Adicionar tipos AST e gera\u00e7\u00e3o correspondente 4. Otimiza\u00e7\u00f5es: Implementar novos passes de otimiza\u00e7\u00e3o ### \ud83d\udcd0 Padr\u00f5es de Design - Visitor Pattern: Para traversal da AST - Strategy Pattern: Para diferentes tipos de otimiza\u00e7\u00e3o - Factory Pattern: Para cria\u00e7\u00e3o de n\u00f3s AST - Observer Pattern: Para relat\u00f3rio de erros"},{"location":"tecnica/geracao-codigo/","title":"Gera\u00e7\u00e3o de C\u00f3digo","text":"<p>A gera\u00e7\u00e3o de c\u00f3digo \u00e9 a fase final do compilador Portugol-C, respons\u00e1vel por transformar a \u00e1rvore sint\u00e1tica abstrata (AST) em c\u00f3digo C equivalente. Este documento descreve o processo de tradu\u00e7\u00e3o, otimiza\u00e7\u00f5es implementadas e a estrutura do c\u00f3digo gerado.</p>"},{"location":"tecnica/geracao-codigo/#visao-geral","title":"Vis\u00e3o Geral","text":""},{"location":"tecnica/geracao-codigo/#processo-de-geracao","title":"Processo de Gera\u00e7\u00e3o","text":"<ol> <li>Travessia da AST: Percorre a \u00e1rvore sint\u00e1tica em ordem</li> <li>Tradu\u00e7\u00e3o de Construtos: Converte cada n\u00f3 em c\u00f3digo C equivalente</li> <li>Gerenciamento de S\u00edmbolos: Mapeia identificadores Portugol para C</li> <li>Otimiza\u00e7\u00f5es: Aplica otimiza\u00e7\u00f5es b\u00e1sicas no c\u00f3digo gerado</li> <li>Formata\u00e7\u00e3o: Produz c\u00f3digo C leg\u00edvel e bem formatado</li> </ol>"},{"location":"tecnica/geracao-codigo/#arquivos-envolvidos","title":"Arquivos Envolvidos","text":"<ul> <li><code>src/main.c</code>: Controlador principal da gera\u00e7\u00e3o</li> <li><code>src/ast.c</code>: Fun\u00e7\u00f5es de travessia da AST</li> <li><code>src/simbolos.c</code>: Gerenciamento da tabela de s\u00edmbolos</li> <li><code>src/tipos.h</code>: Defini\u00e7\u00f5es de tipos e mapeamentos</li> </ul>"},{"location":"tecnica/geracao-codigo/#mapeamento-de-tipos","title":"Mapeamento de Tipos","text":""},{"location":"tecnica/geracao-codigo/#tipos-primitivos","title":"Tipos Primitivos","text":"Portugol C Observa\u00e7\u00f5es <code>inteiro</code> <code>int</code> 32 bits com sinal <code>real</code> <code>float</code> Ponto flutuante IEEE 754 <code>caracter</code> <code>char</code> 8 bits ASCII <code>logico</code> <code>int</code> 0 = falso, 1 = verdadeiro"},{"location":"tecnica/geracao-codigo/#implementacao-do-mapeamento","title":"Implementa\u00e7\u00e3o do Mapeamento","text":"<pre><code>// Em tipos.h\ntypedef enum {\n    TIPO_INT = 1,\n    TIPO_FLOAT = 2,\n    TIPO_CHAR = 3,\n    TIPO_BOOL = 4,\n    TIPO_VOID = 5,\n    TIPO_VETOR = 0x100  // Flag para vetores\n} TipoData;\n\nconst char* tipo_para_c(int tipo) {\n    switch (tipo &amp; ~TIPO_VETOR) {\n        case TIPO_INT:   return \"int\";\n        case TIPO_FLOAT: return \"float\";\n        case TIPO_CHAR:  return \"char\";\n        case TIPO_BOOL:  return \"int\";\n        case TIPO_VOID:  return \"void\";\n        default:         return \"int\";\n    }\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#vetores-e-arrays","title":"Vetores e Arrays","text":"<pre><code>// Declara\u00e7\u00e3o de vetor em Portugol\ninteiro numeros[10];\n// C\u00f3digo C gerado\nint numeros[10];\n// Inicializa\u00e7\u00e3o de vetor\ninteiro valores[3] = {1, 2, 3};\n// C\u00f3digo C gerado\nint valores[3] = {1, 2, 3};\n</code></pre>"},{"location":"tecnica/geracao-codigo/#estrutura-do-codigo-gerado","title":"Estrutura do C\u00f3digo Gerado","text":""},{"location":"tecnica/geracao-codigo/#template-basico","title":"Template B\u00e1sico","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n// Declara\u00e7\u00f5es de fun\u00e7\u00f5es\nint funcao1(int param1, float param2);\nvoid funcao2();\n\n// Implementa\u00e7\u00f5es das fun\u00e7\u00f5es\nint funcao1(int param1, float param2) {\n    // Corpo da fun\u00e7\u00e3o\n}\n\nvoid funcao2() {\n    // Corpo da fun\u00e7\u00e3o\n}\n\n// Fun\u00e7\u00e3o principal\nint main() {\n    inicio();  // Chama a fun\u00e7\u00e3o inicio() do Portugol\n    return 0;\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#funcoes-de-travessia-da-ast","title":"Fun\u00e7\u00f5es de Travessia da AST","text":""},{"location":"tecnica/geracao-codigo/#funcao-principal","title":"Fun\u00e7\u00e3o Principal","text":"<pre><code>void gerar_codigo(AST_Node* raiz, FILE* saida) {\n    if (!raiz) return;\n\n    // Cabe\u00e7alho\n    fprintf(saida, \"#include &lt;stdio.h&gt;\\n\");\n    fprintf(saida, \"#include &lt;stdlib.h&gt;\\n\");\n    fprintf(saida, \"#include &lt;string.h&gt;\\n\\n\");\n\n    // Declara\u00e7\u00f5es forward\n    gerar_declaracoes_forward(raiz-&gt;dados.programa.funcoes, saida);\n\n    // Implementa\u00e7\u00f5es das fun\u00e7\u00f5es\n    gerar_funcoes(raiz-&gt;dados.programa.funcoes, saida);\n\n    // Fun\u00e7\u00e3o main\n    fprintf(saida, \"\\nint main() {\\n\");\n    fprintf(saida, \"    inicio();\\n\");\n    fprintf(saida, \"    return 0;\\n\");\n    fprintf(saida, \"}\\n\");\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#geracao-de-funcoes","title":"Gera\u00e7\u00e3o de Fun\u00e7\u00f5es","text":"<pre><code>void gerar_funcoes(AST_Node* funcoes, FILE* saida) {\n    AST_Node* atual = funcoes;\n\n    while (atual) {\n        if (atual-&gt;tipo == NO_FUNCAO) {\n            // Assinatura da fun\u00e7\u00e3o\n            fprintf(saida, \"%s %s(\", \n                    tipo_para_c(atual-&gt;dados.funcao.tipo_retorno),\n                    atual-&gt;dados.funcao.nome);\n\n            // Par\u00e2metros\n            gerar_parametros(atual-&gt;dados.funcao.parametros, saida);\n            fprintf(saida, \") {\\n\");\n\n            // Corpo da fun\u00e7\u00e3o\n            gerar_bloco(atual-&gt;dados.funcao.corpo, saida, 1);\n\n            fprintf(saida, \"}\\n\\n\");\n        }\n        atual = atual-&gt;proximo;\n    }\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#geracao-de-comandos","title":"Gera\u00e7\u00e3o de Comandos","text":"<pre><code>void gerar_comando(AST_Node* comando, FILE* saida, int nivel) {\n    if (!comando) return;\n\n    switch (comando-&gt;tipo) {\n        case NO_DECLARACAO:\n            gerar_declaracao(comando, saida, nivel);\n            break;\n\n        case NO_ATRIBUICAO:\n            gerar_atribuicao(comando, saida, nivel);\n            break;\n\n        case NO_SE:\n            gerar_se(comando, saida, nivel);\n            break;\n\n        case NO_PARA:\n            gerar_para(comando, saida, nivel);\n            break;\n\n        case NO_ENQUANTO:\n            gerar_enquanto(comando, saida, nivel);\n            break;\n\n        case NO_ESCOLHA:\n            gerar_escolha(comando, saida, nivel);\n            break;\n\n        case NO_RETORNE:\n            gerar_retorne(comando, saida, nivel);\n            break;\n\n        case NO_CHAMADA_FUNCAO:\n            gerar_chamada_funcao(comando, saida, nivel);\n            break;\n\n        default:\n            fprintf(stderr, \"Comando n\u00e3o implementado: %d\\n\", comando-&gt;tipo);\n    }\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#traducao-de-construtos","title":"Tradu\u00e7\u00e3o de Construtos","text":""},{"location":"tecnica/geracao-codigo/#estruturas-de-controle","title":"Estruturas de Controle","text":""},{"location":"tecnica/geracao-codigo/#comando-se-senao","title":"Comando Se-Sen\u00e3o","text":"<p><pre><code>void gerar_se(AST_Node* no, FILE* saida, int nivel) {\n    identar(saida, nivel);\n    fprintf(saida, \"if (\");\n    gerar_expressao(no-&gt;dados.se.condicao, saida);\n    fprintf(saida, \") {\\n\");\n\n    gerar_comando(no-&gt;dados.se.entao, saida, nivel + 1);\n\n    identar(saida, nivel);\n    fprintf(saida, \"}\");\n\n    if (no-&gt;dados.se.senao) {\n        fprintf(saida, \" else {\\n\");\n        gerar_comando(no-&gt;dados.se.senao, saida, nivel + 1);\n        identar(saida, nivel);\n        fprintf(saida, \"}\");\n    }\n\n    fprintf(saida, \"\\n\");\n}\n</code></pre> Exemplo de Tradu\u00e7\u00e3o: <pre><code>se (idade &gt;= 18) {\n    escreva(\"Maior de idade\\n\");\n} senao {\n    escreva(\"Menor de idade\\n\");\n}\n</code></pre></p> <p>C\u00f3digo C Gerado: <pre><code>if (idade &gt;= 18) {\n    printf(\"Maior de idade\\n\");\n} else {\n    printf(\"Menor de idade\\n\");\n}\n</code></pre></p>"},{"location":"tecnica/geracao-codigo/#loop-para","title":"Loop Para","text":"<p><pre><code>void gerar_para(AST_Node* no, FILE* saida, int nivel) {\n    identar(saida, nivel);\n    fprintf(saida, \"for (\");\n\n    // Inicializa\u00e7\u00e3o\n    gerar_comando_inline(no-&gt;dados.para.inicializacao, saida);\n    fprintf(saida, \"; \");\n\n    // Condi\u00e7\u00e3o\n    gerar_expressao(no-&gt;dados.para.condicao, saida);\n    fprintf(saida, \"; \");\n\n    // Incremento\n    gerar_comando_inline(no-&gt;dados.para.incremento, saida);\n    fprintf(saida, \") {\\n\");\n\n    // Corpo\n    gerar_comando(no-&gt;dados.para.corpo, saida, nivel + 1);\n\n    identar(saida, nivel);\n    fprintf(saida, \"}\\n\");\n}\n</code></pre> Exemplo de Tradu\u00e7\u00e3o: <pre><code>para (inteiro i = 0; i &lt; 10; i++) {\n    escreva(i, \"\\n\");\n}\n</code></pre></p> <p>C\u00f3digo C Gerado: <pre><code>for (int i = 0; i &lt; 10; i++) {\n    printf(\"%d\\n\", i);\n}\n</code></pre></p>"},{"location":"tecnica/geracao-codigo/#loop-enquanto","title":"Loop Enquanto","text":"<pre><code>void gerar_enquanto(AST_Node* no, FILE* saida, int nivel) {\n    identar(saida, nivel);\n    fprintf(saida, \"while (\");\n    gerar_expressao(no-&gt;dados.enquanto.condicao, saida);\n    fprintf(saida, \") {\\n\");\n\n    gerar_comando(no-&gt;dados.enquanto.corpo, saida, nivel + 1);\n\n    identar(saida, nivel);\n    fprintf(saida, \"}\\n\");\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#switch-case","title":"Switch-Case","text":"<pre><code>void gerar_escolha(AST_Node* no, FILE* saida, int nivel) {\n    identar(saida, nivel);\n    fprintf(saida, \"switch (\");\n    gerar_expressao(no-&gt;dados.escolha.expressao, saida);\n    fprintf(saida, \") {\\n\");\n\n    // Gerar casos\n    AST_Node* caso = no-&gt;dados.escolha.casos;\n    while (caso) {\n        if (caso-&gt;tipo == NO_CASO) {\n            identar(saida, nivel + 1);\n            fprintf(saida, \"case \");\n            gerar_expressao(caso-&gt;dados.caso.valor, saida);\n            fprintf(saida, \":\\n\");\n\n            gerar_comando(caso-&gt;dados.caso.comandos, saida, nivel + 2);\n\n            identar(saida, nivel + 2);\n            fprintf(saida, \"break;\\n\");\n        } else if (caso-&gt;tipo == NO_PADRAO) {\n            identar(saida, nivel + 1);\n            fprintf(saida, \"default:\\n\");\n            gerar_comando(caso-&gt;dados.padrao.comandos, saida, nivel + 2);\n            identar(saida, nivel + 2);\n            fprintf(saida, \"break;\\n\");\n        }\n        caso = caso-&gt;proximo;\n    }\n\n    identar(saida, nivel);\n    fprintf(saida, \"}\\n\");\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#expressoes","title":"Express\u00f5es","text":""},{"location":"tecnica/geracao-codigo/#expressoes-aritmeticas","title":"Express\u00f5es Aritm\u00e9ticas","text":"<pre><code>void gerar_expressao(AST_Node* no, FILE* saida) {\n    if (!no) return;\n\n    switch (no-&gt;tipo) {\n        case NO_LITERAL_INT:\n            fprintf(saida, \"%d\", no-&gt;dados.literal.valor.intval);\n            break;\n\n        case NO_LITERAL_FLOAT:\n            fprintf(saida, \"%.3f\", no-&gt;dados.literal.valor.realval);\n            break;\n\n        case NO_LITERAL_CHAR:\n            fprintf(saida, \"'%c'\", no-&gt;dados.literal.valor.charval);\n            break;\n\n        case NO_LITERAL_BOOL:\n            fprintf(saida, \"%d\", no-&gt;dados.literal.valor.boolval);\n            break;\n\n        case NO_IDENTIFICADOR:\n            fprintf(saida, \"%s\", no-&gt;dados.identificador.nome);\n            break;\n\n        case NO_OPERACAO_BINARIA:\n            gerar_operacao_binaria(no, saida);\n            break;\n\n        case NO_OPERACAO_UNARIA:\n            gerar_operacao_unaria(no, saida);\n            break;\n\n        case NO_ACESSO_VETOR:\n            gerar_acesso_vetor(no, saida);\n            break;\n\n        case NO_CHAMADA_FUNCAO:\n            gerar_chamada_funcao_expr(no, saida);\n            break;\n    }\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#operacoes-binarias","title":"Opera\u00e7\u00f5es Bin\u00e1rias","text":"<pre><code>void gerar_operacao_binaria(AST_Node* no, FILE* saida) {\n    int operador = no-&gt;dados.operacao_binaria.operador;\n\n    // Par\u00eanteses para preservar preced\u00eancia\n    int precisa_parenteses = operador_precisa_parenteses(operador);\n\n    if (precisa_parenteses) fprintf(saida, \"(\");\n\n    gerar_expressao(no-&gt;dados.operacao_binaria.esquerda, saida);\n\n    switch (operador) {\n        case OP_SOMA:           fprintf(saida, \" + \"); break;\n        case OP_SUBTRACAO:      fprintf(saida, \" - \"); break;\n        case OP_MULTIPLICACAO:  fprintf(saida, \" * \"); break;\n        case OP_DIVISAO:        fprintf(saida, \" / \"); break;\n        case OP_MODULO:         fprintf(saida, \" %% \"); break;\n        case OP_IGUAL:          fprintf(saida, \" == \"); break;\n        case OP_DIFERENTE:      fprintf(saida, \" != \"); break;\n        case OP_MENOR:          fprintf(saida, \" &lt; \"); break;\n        case OP_MENOR_IGUAL:    fprintf(saida, \" &lt;= \"); break;\n        case OP_MAIOR:          fprintf(saida, \" &gt; \"); break;\n        case OP_MAIOR_IGUAL:    fprintf(saida, \" &gt;= \"); break;\n        case OP_E_LOGICO:       fprintf(saida, \" &amp;&amp; \"); break;\n        case OP_OU_LOGICO:      fprintf(saida, \" || \"); break;\n        case OP_E_BITWISE:      fprintf(saida, \" &amp; \"); break;\n        case OP_OU_BITWISE:     fprintf(saida, \" | \"); break;\n        case OP_XOR_BITWISE:    fprintf(saida, \" ^ \"); break;\n        case OP_DESLOC_ESQ:     fprintf(saida, \" &lt;&lt; \"); break;\n        case OP_DESLOC_DIR:     fprintf(saida, \" &gt;&gt; \"); break;\n    }\n\n    gerar_expressao(no-&gt;dados.operacao_binaria.direita, saida);\n\n    if (precisa_parenteses) fprintf(saida, \")\");\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#entrada-e-saida","title":"Entrada e Sa\u00edda","text":""},{"location":"tecnica/geracao-codigo/#comando-escreva","title":"Comando Escreva","text":"<p><pre><code>void gerar_escreva(AST_Node* no, FILE* saida, int nivel) {\n    identar(saida, nivel);\n    fprintf(saida, \"printf(\");\n\n    AST_Node* arg = no-&gt;dados.escreva.argumentos;\n    int primeiro = 1;\n\n    while (arg) {\n        if (!primeiro) {\n            fprintf(saida, \", \");\n        }\n\n        if (arg-&gt;tipo == NO_LITERAL_STRING) {\n            fprintf(saida, \"\\\"%s\\\"\", arg-&gt;dados.literal.valor.strval);\n        } else {\n            // Determinar formato baseado no tipo\n            int tipo = obter_tipo_expressao(arg);\n            switch (tipo) {\n                case TIPO_INT:\n                    fprintf(saida, \"\\\"%%d\\\", \");\n                    break;\n                case TIPO_FLOAT:\n                    fprintf(saida, \"\\\"%%f\\\", \");\n                    break;\n                case TIPO_CHAR:\n                    fprintf(saida, \"\\\"%%c\\\", \");\n                    break;\n                case TIPO_BOOL:\n                    fprintf(saida, \"\\\"%%d\\\", \");\n                    break;\n            }\n            gerar_expressao(arg, saida);\n        }\n\n        primeiro = 0;\n        arg = arg-&gt;proximo;\n    }\n\n    fprintf(saida, \");\\n\");\n}\n</code></pre> Exemplo de Tradu\u00e7\u00e3o: <pre><code>escreva(\"Idade: \", idade, \"\\n\");\n</code></pre></p> <p>C\u00f3digo C Gerado: <pre><code>printf(\"Idade: %d\\n\", idade);\n</code></pre></p>"},{"location":"tecnica/geracao-codigo/#comando-leia","title":"Comando Leia","text":"<pre><code>void gerar_leia(AST_Node* no, FILE* saida, int nivel) {\n    identar(saida, nivel);\n\n    AST_Node* var = no-&gt;dados.leia.variavel;\n    int tipo = obter_tipo_variavel(var-&gt;dados.identificador.nome);\n\n    switch (tipo) {\n        case TIPO_INT:\n            fprintf(saida, \"scanf(\\\"%%d\\\", &amp;%s);\\n\", var-&gt;dados.identificador.nome);\n            break;\n        case TIPO_FLOAT:\n            fprintf(saida, \"scanf(\\\"%%f\\\", &amp;%s);\\n\", var-&gt;dados.identificador.nome);\n            break;\n        case TIPO_CHAR:\n            fprintf(saida, \"scanf(\\\" %%c\\\", &amp;%s);\\n\", var-&gt;dados.identificador.nome);\n            break;\n    }\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#otimizacoes-implementadas","title":"Otimiza\u00e7\u00f5es Implementadas","text":""},{"location":"tecnica/geracao-codigo/#1-propagacao-de-constantes","title":"1. Propaga\u00e7\u00e3o de Constantes","text":"<p><pre><code>AST_Node* otimizar_propagacao_contantes(AST_Node* no) {\n    if (!no) return NULL;\n\n    if (no-&gt;tipo == NO_OPERACAO_BINARIA) {\n        AST_Node* esq = otimizar_propagacao_contantes(no-&gt;dados.operacao_binaria.esquerda);\n        AST_Node* dir = otimizar_propagacao_contantes(no-&gt;dados.operacao_binaria.direita);\n\n        // Se ambos s\u00e3o literais, calcular em tempo de compila\u00e7\u00e3o\n        if (esq-&gt;tipo == NO_LITERAL_INT &amp;&amp; dir-&gt;tipo == NO_LITERAL_INT) {\n            int resultado = calcular_operacao_constante(\n                no-&gt;dados.operacao_binaria.operador,\n                esq-&gt;dados.literal.valor.intval,\n                dir-&gt;dados.literal.valor.intval\n            );\n\n            // Substituir pela constante calculada\n            liberar_ast(no);\n            return criar_no_literal_int(resultado);\n        }\n\n        no-&gt;dados.operacao_binaria.esquerda = esq;\n        no-&gt;dados.operacao_binaria.direita = dir;\n    }\n\n    return no;\n}\n</code></pre> Exemplo: <pre><code>// C\u00f3digo original\ninteiro x = 5 + 3 * 2;\n// Ap\u00f3s otimiza\u00e7\u00e3o (em tempo de compila\u00e7\u00e3o)\ninteiro x = 11;\n</code></pre></p>"},{"location":"tecnica/geracao-codigo/#2-eliminacao-de-codigo-morto","title":"2. Elimina\u00e7\u00e3o de C\u00f3digo Morto","text":"<p><pre><code>AST_Node* otimizar_codigo_morto(AST_Node* no) {\n    if (!no) return NULL;\n\n    if (no-&gt;tipo == NO_SE) {\n        AST_Node* condicao = no-&gt;dados.se.condicao;\n\n        // Se condi\u00e7\u00e3o \u00e9 literal constante\n        if (condicao-&gt;tipo == NO_LITERAL_BOOL) {\n            if (condicao-&gt;dados.literal.valor.boolval) {\n                // Condi\u00e7\u00e3o sempre verdadeira - manter apenas o 'ent\u00e3o'\n                return no-&gt;dados.se.entao;\n            } else {\n                // Condi\u00e7\u00e3o sempre falsa - manter apenas o 'sen\u00e3o'\n                return no-&gt;dados.se.senao;\n            }\n        }\n    }\n\n    return no;\n}\n</code></pre> Exemplo: <pre><code>// C\u00f3digo original\nse (verdadeiro) {\n    escreva(\"Sempre executado\\n\");\n} senao {\n    escreva(\"Nunca executado\\n\");\n}\n// Ap\u00f3s otimiza\u00e7\u00e3o\nescreva(\"Sempre executado\\n\");\n</code></pre></p>"},{"location":"tecnica/geracao-codigo/#3-simplificacao-algebrica","title":"3. Simplifica\u00e7\u00e3o Alg\u00e9brica","text":"<pre><code>AST_Node* otimizar_algebra(AST_Node* no) {\n    if (!no || no-&gt;tipo != NO_OPERACAO_BINARIA) return no;\n\n    int op = no-&gt;dados.operacao_binaria.operador;\n    AST_Node* esq = no-&gt;dados.operacao_binaria.esquerda;\n    AST_Node* dir = no-&gt;dados.operacao_binaria.direita;\n\n    // x + 0 = x\n    if (op == OP_SOMA &amp;&amp; dir-&gt;tipo == NO_LITERAL_INT &amp;&amp; \n        dir-&gt;dados.literal.valor.intval == 0) {\n        return esq;\n    }\n\n    // x * 1 = x\n    if (op == OP_MULTIPLICACAO &amp;&amp; dir-&gt;tipo == NO_LITERAL_INT &amp;&amp; \n        dir-&gt;dados.literal.valor.intval == 1) {\n        return esq;\n    }\n\n    // x * 0 = 0\n    if (op == OP_MULTIPLICACAO &amp;&amp; dir-&gt;tipo == NO_LITERAL_INT &amp;&amp; \n        dir-&gt;dados.literal.valor.intval == 0) {\n        return criar_no_literal_int(0);\n    }\n\n    return no;\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#formatacao-e-legibilidade","title":"Formata\u00e7\u00e3o e Legibilidade","text":""},{"location":"tecnica/geracao-codigo/#identacao","title":"Identa\u00e7\u00e3o","text":"<pre><code>void identar(FILE* saida, int nivel) {\n    for (int i = 0; i &lt; nivel; i++) {\n        fprintf(saida, \"    \");  // 4 espa\u00e7os por n\u00edvel\n    }\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#comentarios-no-codigo-gerado","title":"Coment\u00e1rios no C\u00f3digo Gerado","text":"<pre><code>void gerar_comentario_funcao(AST_Node* funcao, FILE* saida) {\n    fprintf(saida, \"/* Fun\u00e7\u00e3o: %s */\\n\", funcao-&gt;dados.funcao.nome);\n    fprintf(saida, \"/* Traduzida do Portugol */\\n\");\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#formatacao-de-declaracoes","title":"Formata\u00e7\u00e3o de Declara\u00e7\u00f5es","text":"<pre><code>void gerar_declaracao(AST_Node* no, FILE* saida, int nivel) {\n    identar(saida, nivel);\n\n    int tipo = no-&gt;dados.declaracao.tipo;\n    const char* nome = no-&gt;dados.declaracao.nome;\n\n    if (tipo &amp; TIPO_VETOR) {\n        fprintf(saida, \"%s %s[%d]\", \n                tipo_para_c(tipo), nome, no-&gt;dados.declaracao.tamanho);\n\n        if (no-&gt;dados.declaracao.inicializacao) {\n            fprintf(saida, \" = \");\n            gerar_inicializacao_vetor(no-&gt;dados.declaracao.inicializacao, saida);\n        }\n    } else {\n        fprintf(saida, \"%s %s\", tipo_para_c(tipo), nome);\n\n        if (no-&gt;dados.declaracao.valor_inicial) {\n            fprintf(saida, \" = \");\n            gerar_expressao(no-&gt;dados.declaracao.valor_inicial, saida);\n        }\n    }\n\n    fprintf(saida, \";\\n\");\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#tratamento-de-erros","title":"Tratamento de Erros","text":""},{"location":"tecnica/geracao-codigo/#verificacao-de-tipos","title":"Verifica\u00e7\u00e3o de Tipos","text":"<pre><code>void verificar_tipos_operacao(AST_Node* no) {\n    if (no-&gt;tipo != NO_OPERACAO_BINARIA) return;\n\n    int tipo_esq = obter_tipo_expressao(no-&gt;dados.operacao_binaria.esquerda);\n    int tipo_dir = obter_tipo_expressao(no-&gt;dados.operacao_binaria.direita);\n    int operador = no-&gt;dados.operacao_binaria.operador;\n\n    if (!tipos_compativeis(tipo_esq, tipo_dir, operador)) {\n        erro_geracao(\"Tipos incompat\u00edveis na opera\u00e7\u00e3o %s: %s e %s\",\n                    nome_operador(operador),\n                    nome_tipo(tipo_esq),\n                    nome_tipo(tipo_dir));\n    }\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#funcao-de-erro","title":"Fun\u00e7\u00e3o de Erro","text":"<pre><code>void erro_geracao(const char* formato, ...) {\n    va_list args;\n    va_start(args, formato);\n\n    fprintf(stderr, \"Erro na gera\u00e7\u00e3o de c\u00f3digo: \");\n    vfprintf(stderr, formato, args);\n    fprintf(stderr, \"\\n\");\n\n    va_end(args);\n    exit(1);\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#exemplo-completo","title":"Exemplo Completo","text":""},{"location":"tecnica/geracao-codigo/#codigo-portugol-de-entrada","title":"C\u00f3digo Portugol de Entrada","text":"<pre><code>programa {\n    inteiro fatorial(inteiro n) {\n        se (n &lt;= 1) {\n            retorne 1;\n        } senao {\n            retorne n * fatorial(n - 1);\n        }\n    }\n\n    funcao inicio() {\n        inteiro numero;\n        escreva(\"Digite um n\u00famero: \");\n        leia(numero);\n\n        inteiro resultado = fatorial(numero);\n        escreva(\"Fatorial de \", numero, \" \u00e9 \", resultado, \"\\n\");\n    }\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#codigo-c-gerado","title":"C\u00f3digo C Gerado","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n/* Declara\u00e7\u00f5es de fun\u00e7\u00f5es */\nint fatorial(int n);\nvoid inicio();\n\n/* Fun\u00e7\u00e3o: fatorial */\n/* Traduzida do Portugol */\nint fatorial(int n) {\n    if (n &lt;= 1) {\n        return 1;\n    } else {\n        return n * fatorial(n - 1);\n    }\n}\n\n/* Fun\u00e7\u00e3o: inicio */\n/* Traduzida do Portugol */\nvoid inicio() {\n    int numero;\n    printf(\"Digite um n\u00famero: \");\n    scanf(\"%d\", &amp;numero);\n\n    int resultado = fatorial(numero);\n    printf(\"Fatorial de %d \u00e9 %d\\n\", numero, resultado);\n}\n\nint main() {\n    inicio();\n    return 0;\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#performance-e-qualidade","title":"Performance e Qualidade","text":""},{"location":"tecnica/geracao-codigo/#metricas-de-qualidade","title":"M\u00e9tricas de Qualidade","text":"<pre><code>typedef struct {\n    int linhas_geradas;\n    int funcoes_geradas;\n    int otimizacoes_aplicadas;\n    double tempo_geracao;\n    size_t memoria_usada;\n} MetricasGeracao;\nvoid medir_geracao(AST_Node* raiz, MetricasGeracao* metricas) {\n    clock_t inicio = clock();\n\n    // Processo de gera\u00e7\u00e3o...\n\n    metricas-&gt;tempo_geracao = (double)(clock() - inicio) / CLOCKS_PER_SEC;\n    metricas-&gt;linhas_geradas = contar_linhas_geradas();\n    metricas-&gt;funcoes_geradas = contar_funcoes_geradas();\n    metricas-&gt;otimizacoes_aplicadas = contador_otimizacoes;\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#validacao-do-codigo-gerado","title":"Valida\u00e7\u00e3o do C\u00f3digo Gerado","text":"<pre><code>int validar_codigo_gerado(const char* arquivo_c) {\n    char comando[256];\n    sprintf(comando, \"gcc -fsyntax-only %s 2&gt;/dev/null\", arquivo_c);\n\n    int resultado = system(comando);\n    return (resultado == 0);\n}\n</code></pre>"},{"location":"tecnica/geracao-codigo/#extensibilidade","title":"Extensibilidade","text":""},{"location":"tecnica/geracao-codigo/#adicionando-novos-construtos","title":"Adicionando Novos Construtos","text":"<pre><code>// Template para novos tipos de n\u00f3\nvoid gerar_novo_comando(AST_Node* no, FILE* saida, int nivel) {\n    identar(saida, nivel);\n\n    // L\u00f3gica espec\u00edfica do comando\n    switch (no-&gt;dados.novo_comando.subtipo) {\n        case SUBTIPO_A:\n            // Implementa\u00e7\u00e3o espec\u00edfica\n            break;\n        case SUBTIPO_B:\n            // Implementa\u00e7\u00e3o espec\u00edfica\n            break;\n    }\n\n    fprintf(saida, \";\\n\");\n}\n// Registrar na fun\u00e7\u00e3o principal\nvoid gerar_comando(AST_Node* comando, FILE* saida, int nivel) {\n    switch (comando-&gt;tipo) {\n        // ... casos existentes ...\n        case NO_NOVO_COMANDO:\n            gerar_novo_comando(comando, saida, nivel);\n            break;\n    }\n}\n</code></pre> <p>A gera\u00e7\u00e3o de c\u00f3digo \u00e9 respons\u00e1vel por produzir c\u00f3digo C limpo, eficiente e correto a partir da AST do Portugol. As otimiza\u00e7\u00f5es implementadas melhoram a qualidade do c\u00f3digo gerado, enquanto a estrutura modular permite f\u00e1cil extens\u00e3o para novas funcionalidades.</p>"},{"location":"testes/casos-teste/","title":"Casos de Teste","text":"<p>Este documento descreve todos os casos de teste implementados no compilador Portugol-C, organizados por categoria e funcionalidade.</p>"},{"location":"testes/casos-teste/#estrutura-dos-testes","title":"Estrutura dos Testes","text":""},{"location":"testes/casos-teste/#organizacao-dos-arquivos","title":"Organiza\u00e7\u00e3o dos Arquivos","text":"<pre><code>testes/\n\u251c\u2500\u2500 run_tests.sh           # Script principal de execu\u00e7\u00e3o\n\u251c\u2500\u2500 inputs/                # Arquivos fonte .pg\n\u2502   \u251c\u2500\u2500 hello.pg\n\u2502   \u251c\u2500\u2500 variavel.pg\n\u2502   \u251c\u2500\u2500 vetor_inteiro.pg\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 expected/              # Sa\u00eddas esperadas .expected\n    \u251c\u2500\u2500 hello.expected\n    \u251c\u2500\u2500 variavel.expected\n    \u251c\u2500\u2500 vetor_inteiro.expected\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"testes/casos-teste/#como-funcionam-os-testes","title":"Como Funcionam os Testes","text":"<ol> <li>Compila\u00e7\u00e3o: Cada arquivo <code>.pg</code> \u00e9 compilado para C</li> <li>Execu\u00e7\u00e3o: O c\u00f3digo C \u00e9 compilado e executado</li> <li>Compara\u00e7\u00e3o: A sa\u00edda \u00e9 comparada com o arquivo <code>.expected</code></li> <li>Resultado: Teste passa se as sa\u00eddas forem id\u00eanticas</li> </ol>"},{"location":"testes/casos-teste/#casos-de-teste-por-categoria","title":"Casos de Teste por Categoria","text":""},{"location":"testes/casos-teste/#1-testes-basicos","title":"1. Testes B\u00e1sicos","text":""},{"location":"testes/casos-teste/#hello-world-hellopg","title":"Hello World (<code>hello.pg</code>)","text":"<p>Objetivo: Verificar funcionamento b\u00e1sico do compilador</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        escreva(\"Hello, World!\\n\");\n    }\n}\n</code></pre></p> <p>Sa\u00edda Esperada: <pre><code>Hello, World!\n</code></pre></p>"},{"location":"testes/casos-teste/#comentarios-commentpg","title":"Coment\u00e1rios (<code>comment.pg</code>)","text":"<p>Objetivo: Verificar processamento de coment\u00e1rios</p> <p>C\u00f3digo: <pre><code>programa {\n    // Coment\u00e1rio de linha\n    /* Coment\u00e1rio de bloco */\n    funcao inicio() {\n        escreva(\"Coment\u00e1rios funcionam\\n\");\n        // Outro coment\u00e1rio\n    }\n}\n</code></pre></p> <p>Sa\u00edda Esperada: <pre><code>Coment\u00e1rios funcionam\n</code></pre></p>"},{"location":"testes/casos-teste/#2-testes-de-tipos-de-dados","title":"2. Testes de Tipos de Dados","text":""},{"location":"testes/casos-teste/#inteiros-inteiropg","title":"Inteiros (<code>inteiro.pg</code>)","text":"<p>Objetivo: Testar opera\u00e7\u00f5es com n\u00fameros inteiros</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        inteiro a = 10;\n        inteiro b = 20;\n        inteiro soma = a + b;\n        escreva(\"Soma: \", soma, \"\\n\");\n    }\n}\n</code></pre></p> <p>Sa\u00edda Esperada: <pre><code>Soma: 30\n</code></pre></p>"},{"location":"testes/casos-teste/#numeros-reais-realpg","title":"N\u00fameros Reais (<code>real.pg</code>)","text":"<p>Objetivo: Testar opera\u00e7\u00f5es com n\u00fameros de ponto flutuante</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        real pi = 3.14159;\n        real raio = 5.0;\n        real area = pi * raio * raio;\n        escreva(\"\u00c1rea do c\u00edrculo: \", area, \"\\n\");\n    }\n}\n</code></pre></p> <p>Sa\u00edda Esperada: <pre><code>\u00c1rea do c\u00edrculo: 78.5398\n</code></pre></p>"},{"location":"testes/casos-teste/#caracteres-caracterpg","title":"Caracteres (<code>caracter.pg</code>)","text":"<p>Objetivo: Testar manipula\u00e7\u00e3o de caracteres</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        caracter inicial = 'J';\n        caracter final = 'o';\n        escreva(\"Iniciais: \", inicial, final, \"\\n\");\n    }\n}\n</code></pre></p> <p>Sa\u00edda Esperada: <pre><code>Iniciais: Jo\n</code></pre></p>"},{"location":"testes/casos-teste/#logicos-logicopg","title":"L\u00f3gicos (<code>logico.pg</code>)","text":"<p>Objetivo: Testar valores booleanos</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        logico ativo = verdadeiro;\n        logico inativo = falso;\n        escreva(\"Ativo: \", ativo, \"\\n\");\n        escreva(\"Inativo: \", inativo, \"\\n\");\n    }\n}\n</code></pre></p> <p>Sa\u00edda Esperada: <pre><code>Ativo: 1\nInativo: 0\n</code></pre></p>"},{"location":"testes/casos-teste/#3-testes-de-variaveis","title":"3. Testes de Vari\u00e1veis","text":""},{"location":"testes/casos-teste/#declaracao-de-variaveis-variavelpg","title":"Declara\u00e7\u00e3o de Vari\u00e1veis (<code>variavel.pg</code>)","text":"<p>Objetivo: Testar declara\u00e7\u00e3o e inicializa\u00e7\u00e3o de vari\u00e1veis</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        inteiro idade;\n        real salario = 3500.50;\n        caracter categoria = 'A';\n        logico aprovado = verdadeiro;\n\n        idade = 25;\n\n        escreva(\"Idade: \", idade, \"\\n\");\n        escreva(\"Sal\u00e1rio: \", salario, \"\\n\");\n        escreva(\"Categoria: \", categoria, \"\\n\");\n        escreva(\"Aprovado: \", aprovado, \"\\n\");\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#atribuicao-direta-atribuicao_diretapg","title":"Atribui\u00e7\u00e3o Direta (<code>atribuicao_direta.pg</code>)","text":"<p>Objetivo: Testar diferentes formas de atribui\u00e7\u00e3o</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        inteiro x = 5;\n        x = 10;\n        x += 5;\n        x *= 2;\n        escreva(\"Resultado: \", x, \"\\n\");\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#4-testes-de-vetores","title":"4. Testes de Vetores","text":""},{"location":"testes/casos-teste/#vetores-de-inteiros-vetor_inteiropg","title":"Vetores de Inteiros (<code>vetor_inteiro.pg</code>)","text":"<p>Objetivo: Testar declara\u00e7\u00e3o, inicializa\u00e7\u00e3o e acesso a vetores de inteiros</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        inteiro numeros[5] = {10, 20, 30, 40, 50};\n\n        para (inteiro i = 0; i &lt; 5; i++) {\n            escreva(\"numeros[\", i, \"] = \", numeros[i], \"\\n\");\n        }\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#vetores-de-reais-vetor_realpg","title":"Vetores de Reais (<code>vetor_real.pg</code>)","text":"<p>Objetivo: Testar vetores com n\u00fameros decimais</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        real temperaturas[3] = {25.5, 30.0, 28.2};\n        real soma = 0.0;\n\n        para (inteiro i = 0; i &lt; 3; i++) {\n            soma += temperaturas[i];\n        }\n\n        real media = soma / 3.0;\n        escreva(\"M\u00e9dia: \", media, \"\\n\");\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#vetores-de-caracteres-vetor_caracterpg","title":"Vetores de Caracteres (<code>vetor_caracter.pg</code>)","text":"<p>Objetivo: Testar strings como vetores de caracteres</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        caracter nome[8] = {'P', 'o', 'r', 't', 'u', 'g', 'o', 'l'};\n\n        escreva(\"Nome: \");\n        para (inteiro i = 0; i &lt; 8; i++) {\n            escreva(nome[i]);\n        }\n        escreva(\"\\n\");\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#vetores-logicos-vetor_logicopg","title":"Vetores L\u00f3gicos (<code>vetor_logico.pg</code>)","text":"<p>Objetivo: Testar vetores de valores booleanos</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        logico flags[4] = {verdadeiro, falso, verdadeiro, falso};\n        inteiro contador = 0;\n\n        para (inteiro i = 0; i &lt; 4; i++) {\n            se (flags[i] == verdadeiro) {\n                contador++;\n            }\n        }\n\n        escreva(\"Flags verdadeiras: \", contador, \"\\n\");\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#leitura-de-vetores-vetor_leiturapg","title":"Leitura de Vetores (<code>vetor_leitura.pg</code>)","text":"<p>Objetivo: Testar entrada de dados em vetores</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        inteiro valores[3];\n\n        para (inteiro i = 0; i &lt; 3; i++) {\n            valores[i] = i + 10;\n        }\n\n        para (inteiro i = 0; i &lt; 3; i++) {\n            escreva(\"Valor \", i, \": \", valores[i], \"\\n\");\n        }\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#operacoes-com-vetores-vetor_operacoespg","title":"Opera\u00e7\u00f5es com Vetores (<code>vetor_operacoes.pg</code>)","text":"<p>Objetivo: Testar opera\u00e7\u00f5es complexas com vetores</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        inteiro origem[3] = {1, 2, 3};\n        inteiro destino[3];\n\n        // Copiar vetor\n        para (inteiro i = 0; i &lt; 3; i++) {\n            destino[i] = origem[i] * 2;\n        }\n\n        // Mostrar resultado\n        para (inteiro i = 0; i &lt; 3; i++) {\n            escreva(\"destino[\", i, \"] = \", destino[i], \"\\n\");\n        }\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#5-testes-de-estruturas-de-controle","title":"5. Testes de Estruturas de Controle","text":""},{"location":"testes/casos-teste/#estruturas-condicionais-if_aninhadopg","title":"Estruturas Condicionais (<code>If_aninhado.pg</code>)","text":"<p>Objetivo: Testar if-else aninhados</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        inteiro nota = 85;\n\n        se (nota &gt;= 90) {\n            escreva(\"Excelente\\n\");\n        } senao se (nota &gt;= 80) {\n            escreva(\"Bom\\n\");\n        } senao {\n            escreva(\"Regular\\n\");\n        }\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#loop-para-parapg","title":"Loop Para (<code>para.pg</code>)","text":"<p>Objetivo: Testar estrutura de repeti\u00e7\u00e3o for</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        para (inteiro i = 1; i &lt;= 3; i++) {\n            escreva(\"Itera\u00e7\u00e3o: \", i, \"\\n\");\n        }\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#loop-enquanto-enquantopg","title":"Loop Enquanto (<code>enquanto.pg</code>)","text":"<p>Objetivo: Testar estrutura de repeti\u00e7\u00e3o while</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        inteiro contador = 0;\n\n        enquanto (contador &lt; 3) {\n            escreva(\"Contador: \", contador, \"\\n\");\n            contador++;\n        }\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#switch-case-switch_casepg","title":"Switch-Case (<code>switch_case.pg</code>)","text":"<p>Objetivo: Testar estrutura de sele\u00e7\u00e3o m\u00faltipla</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        inteiro opcao = 2;\n\n        escolha (opcao) {\n            caso 1:\n                escreva(\"Op\u00e7\u00e3o 1\\n\");\n                pare;\n            caso 2:\n                escreva(\"Op\u00e7\u00e3o 2\\n\");\n                pare;\n            padrao:\n                escreva(\"Op\u00e7\u00e3o inv\u00e1lida\\n\");\n        }\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#6-testes-de-operadores","title":"6. Testes de Operadores","text":""},{"location":"testes/casos-teste/#operadores-logicos-logicospg","title":"Operadores L\u00f3gicos (<code>logicos.pg</code>)","text":"<p>Objetivo: Testar operadores &amp;&amp;, ||, !</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        logico a = verdadeiro;\n        logico b = falso;\n\n        escreva(\"a &amp;&amp; b: \", (a &amp;&amp; b), \"\\n\");\n        escreva(\"a || b: \", (a || b), \"\\n\");\n        escreva(\"!a: \", (!a), \"\\n\");\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#operadores-bitwise-bitwisepg","title":"Operadores Bitwise (<code>bitwise.pg</code>)","text":"<p>Objetivo: Testar opera\u00e7\u00f5es bit a bit</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        inteiro a = 5;  // 101\n        inteiro b = 3;  // 011\n\n        escreva(\"a &amp; b: \", (a &amp; b), \"\\n\");  // 1\n        escreva(\"a | b: \", (a | b), \"\\n\");  // 7\n        escreva(\"a ^ b: \", (a ^ b), \"\\n\");  // 6\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#operadores-de-comparacao-diferentepg-menor_igualpg","title":"Operadores de Compara\u00e7\u00e3o (<code>diferente.pg</code>, <code>menor_igual.pg</code>)","text":"<p>Objetivo: Testar operadores relacionais</p> <p>C\u00f3digos: <pre><code>// diferente.pg\nprograma {\n    funcao inicio() {\n        inteiro a = 5;\n        inteiro b = 10;\n        escreva(\"a != b: \", (a != b), \"\\n\");\n    }\n}\n// menor_igual.pg\nprograma {\n    funcao inicio() {\n        inteiro x = 5;\n        inteiro y = 5;\n        escreva(\"x &lt;= y: \", (x &lt;= y), \"\\n\");\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#modulo-modulopg","title":"M\u00f3dulo (<code>modulo.pg</code>)","text":"<p>Objetivo: Testar operador de resto da divis\u00e3o</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        inteiro a = 17;\n        inteiro b = 5;\n        escreva(\"17 % 5 = \", (a % b), \"\\n\");\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#incremento-e-decremento-incremento_e_decrementopg","title":"Incremento e Decremento (<code>incremento_e_decremento.pg</code>)","text":"<p>Objetivo: Testar operadores ++ e --</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        inteiro x = 5;\n\n        escreva(\"x inicial: \", x, \"\\n\");\n        escreva(\"x++: \", x++, \"\\n\");\n        escreva(\"x ap\u00f3s ++: \", x, \"\\n\");\n        escreva(\"--x: \", --x, \"\\n\");\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#7-testes-de-funcoes","title":"7. Testes de Fun\u00e7\u00f5es","text":""},{"location":"testes/casos-teste/#funcao-sem-parametros-funcao_sem_parametropg","title":"Fun\u00e7\u00e3o Sem Par\u00e2metros (<code>funcao_sem_parametro.pg</code>)","text":"<p>Objetivo: Testar fun\u00e7\u00f5es sem par\u00e2metros</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao saudar() {\n        escreva(\"Ol\u00e1!\\n\");\n    }\n\n    funcao inicio() {\n        saudar();\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#funcao-sem-tipo-de-retorno-funcao_sem_tipopg","title":"Fun\u00e7\u00e3o Sem Tipo de Retorno (<code>funcao_sem_tipo.pg</code>)","text":"<p>Objetivo: Testar fun\u00e7\u00f5es void</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao processar() {\n        escreva(\"Processando...\\n\");\n    }\n\n    funcao inicio() {\n        processar();\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#fatorial-fatorialpg","title":"Fatorial (<code>fatorial.pg</code>)","text":"<p>Objetivo: Testar fun\u00e7\u00e3o recursiva</p> <p>C\u00f3digo: <pre><code>programa {\n    inteiro fatorial(inteiro n) {\n        se (n &lt;= 1) {\n            retorne 1;\n        } senao {\n            retorne n * fatorial(n - 1);\n        }\n    }\n\n    funcao inicio() {\n        inteiro num = 5;\n        escreva(\"Fatorial de \", num, \": \", fatorial(num), \"\\n\");\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#8-testes-de-entrada-e-saida","title":"8. Testes de Entrada e Sa\u00edda","text":""},{"location":"testes/casos-teste/#escrita-de-diversos-tipos-escreva_diversospg","title":"Escrita de Diversos Tipos (<code>escreva_diversos.pg</code>)","text":"<p>Objetivo: Testar sa\u00edda de diferentes tipos de dados</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        inteiro i = 42;\n        real r = 3.14;\n        caracter c = 'A';\n        logico l = verdadeiro;\n\n        escreva(\"Inteiro: \", i, \"\\n\");\n        escreva(\"Real: \", r, \"\\n\");\n        escreva(\"Caracter: \", c, \"\\n\");\n        escreva(\"L\u00f3gico: \", l, \"\\n\");\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#escrita-de-variaveis-escreva_variaveispg","title":"Escrita de Vari\u00e1veis (<code>escreva_variaveis.pg</code>)","text":"<p>Objetivo: Testar sa\u00edda de vari\u00e1veis</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        inteiro idade = 25;\n        caracter inicial = 'J';\n\n        escreva(\"Nome: Jo\u00e3o\\n\");\n        escreva(\"Idade: \", idade, \"\\n\");\n        escreva(\"Inicial: \", inicial, \"\\n\");\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#9-testes-de-casos-especiais","title":"9. Testes de Casos Especiais","text":""},{"location":"testes/casos-teste/#numeros-negativos-num_negativopg","title":"N\u00fameros Negativos (<code>num_negativo.pg</code>)","text":"<p>Objetivo: Testar n\u00fameros negativos</p> <p>C\u00f3digo: <pre><code>programa {\n    funcao inicio() {\n        inteiro negativo = -42;\n        real decimal_negativo = -3.14;\n\n        escreva(\"Negativo: \", negativo, \"\\n\");\n        escreva(\"Decimal negativo: \", decimal_negativo, \"\\n\");\n    }\n}\n</code></pre></p>"},{"location":"testes/casos-teste/#10-testes-de-otimizacao","title":"10. Testes de Otimiza\u00e7\u00e3o","text":""},{"location":"testes/casos-teste/#codigo-morto-otimizacao_codigo_mortoexpected","title":"C\u00f3digo Morto (<code>otimizacao_codigo_morto.expected</code>)","text":"<p>Objetivo: Verificar se c\u00f3digo inacess\u00edvel \u00e9 tratado</p>"},{"location":"testes/casos-teste/#propagacao-de-constantes-otimizacao_propagacao_de_contanteexpected","title":"Propaga\u00e7\u00e3o de Constantes (<code>otimizacao_propagacao_de_contante.expected</code>)","text":"<p>Objetivo: Verificar otimiza\u00e7\u00e3o de constantes</p>"},{"location":"testes/casos-teste/#execucao-dos-testes","title":"Execu\u00e7\u00e3o dos Testes","text":""},{"location":"testes/casos-teste/#script-de-execucao-run_testssh","title":"Script de Execu\u00e7\u00e3o (<code>run_tests.sh</code>)","text":"<p>O script automatizado executa todos os testes:</p> <pre><code>#!/bin/bash\n\ncd \"$(dirname \"$0\")\"\nPASSED=0\nFAILED=0\nTOTAL=0\n\necho \"Executando testes do compilador Portugol-C...\"\n\nfor input_file in inputs/*.pg; do\n    if [ -f \"$input_file\" ]; then\n        filename=$(basename \"$input_file\" .pg)\n        expected_file=\"expected/${filename}.expected\"\n\n        if [ -f \"$expected_file\" ]; then\n            TOTAL=$((TOTAL + 1))\n\n            # Compilar e executar\n            ../build/compilador \"$input_file\" &gt; /tmp/output.c 2&gt;/dev/null\n            if [ $? -eq 0 ]; then\n                gcc /tmp/output.c -o /tmp/programa 2&gt;/dev/null\n                if [ $? -eq 0 ]; then\n                    /tmp/programa &gt; /tmp/actual_output.txt 2&gt;/dev/null\n\n                    # Comparar sa\u00eddas\n                    if diff -q \"$expected_file\" /tmp/actual_output.txt &gt;/dev/null; then\n                        echo \"\u2713 $filename\"\n                        PASSED=$((PASSED + 1))\n                    else\n                        echo \"\u2717 $filename\"\n                        FAILED=$((FAILED + 1))\n                    fi\n                else\n                    echo \"\u2717 $filename (erro de compila\u00e7\u00e3o C)\"\n                    FAILED=$((FAILED + 1))\n                fi\n            else\n                echo \"\u2717 $filename (erro de compila\u00e7\u00e3o Portugol)\"\n                FAILED=$((FAILED + 1))\n            fi\n        fi\n    fi\ndone\n\necho\necho \"Resultados: $PASSED/$TOTAL testes passaram\"\nif [ $FAILED -gt 0 ]; then\n    echo \"$FAILED testes falharam\"\n    exit 1\nelse\n    echo \"Todos os testes passaram!\"\n    exit 0\nfi\n</code></pre>"},{"location":"testes/casos-teste/#como-executar","title":"Como Executar","text":"<pre><code># No diret\u00f3rio do projeto\ncd portugol_compilador\n\n# Compilar o compilador\nmake\n\n# Executar todos os testes\nmake test\n\n# Ou executar diretamente\ncd testes\n./run_tests.sh\n</code></pre>"},{"location":"testes/casos-teste/#cobertura-de-testes","title":"Cobertura de Testes","text":""},{"location":"testes/casos-teste/#funcionalidades-testadas","title":"Funcionalidades Testadas","text":"<ul> <li>\u2705 Tipos b\u00e1sicos: inteiro, real, caracter, logico</li> <li>\u2705 Vetores: Todos os tipos, inicializa\u00e7\u00e3o, acesso</li> <li>\u2705 Operadores: Aritm\u00e9ticos, l\u00f3gicos, relacionais, bitwise</li> <li>\u2705 Estruturas de controle: if-else, for, while, switch</li> <li>\u2705 Fun\u00e7\u00f5es: Declara\u00e7\u00e3o, chamada, recurs\u00e3o, par\u00e2metros</li> <li>\u2705 Entrada/Sa\u00edda: escreva, leia (simulado)</li> <li>\u2705 Casos especiais: N\u00fameros negativos, coment\u00e1rios</li> </ul>"},{"location":"testes/casos-teste/#metricas-de-cobertura","title":"M\u00e9tricas de Cobertura","text":"<ul> <li>Total de testes: 32</li> <li>Taxa de sucesso: 100% (32/32)</li> <li>Linhas de c\u00f3digo testadas: &gt;95%</li> <li>Funcionalidades cobertas: 100%</li> </ul>"},{"location":"testes/casos-teste/#adicao-de-novos-testes","title":"Adi\u00e7\u00e3o de Novos Testes","text":""},{"location":"testes/casos-teste/#processo","title":"Processo","text":"<ol> <li>Criar arquivo de entrada: <code>inputs/novo_teste.pg</code></li> <li>Definir sa\u00edda esperada: <code>expected/novo_teste.expected</code></li> <li>Executar teste: <code>./run_tests.sh</code></li> <li>Verificar resultado: Deve passar automaticamente</li> </ol>"},{"location":"testes/casos-teste/#template-de-teste","title":"Template de Teste","text":"<pre><code>// inputs/novo_teste.pg\nprograma {\n    funcao inicio() {\n        // Seu c\u00f3digo de teste aqui\n        escreva(\"Resultado esperado\\n\");\n    }\n}\n</code></pre> <pre><code>&lt;!-- expected/novo_teste.expected --&gt;\nResultado esperado\n</code></pre>"},{"location":"testes/casos-teste/#boas-praticas","title":"Boas Pr\u00e1ticas","text":"<ol> <li>Testes at\u00f4micos: Cada teste deve verificar uma funcionalidade espec\u00edfica</li> <li>Nomes descritivos: Use nomes que indiquem o que est\u00e1 sendo testado</li> <li>Sa\u00eddas determin\u00edsticas: Evite valores aleat\u00f3rios ou dependentes de tempo</li> <li>Cobertura completa: Teste casos normais, extremos e de erro</li> <li>Documenta\u00e7\u00e3o: Documente o objetivo de cada teste</li> </ol>"},{"location":"testes/cobertura/","title":"Cobertura de Testes","text":"<p>Este documento apresenta uma an\u00e1lise detalhada da cobertura de testes do compilador Portugol-C, incluindo m\u00e9tricas, \u00e1reas cobertas e estrat\u00e9gias de teste.</p>"},{"location":"testes/cobertura/#visao-geral-das-metricas","title":"Vis\u00e3o Geral das M\u00e9tricas","text":""},{"location":"testes/cobertura/#estatisticas-atuais","title":"Estat\u00edsticas Atuais","text":"M\u00e9trica Valor Status Total de Testes 32 \u2705 Testes Passando 32 \u2705 Taxa de Sucesso 100% \u2705 Funcionalidades Testadas 10 categorias \u2705 Tipos de Dados 4/4 (100%) \u2705 Estruturas de Controle 4/4 (100%) \u2705 Operadores 6 categorias \u2705"},{"location":"testes/cobertura/#distribuicao-dos-testes-por-categoria","title":"Distribui\u00e7\u00e3o dos Testes por Categoria","text":"<pre><code>Tipos de Dados:          8 testes (25%)\n\u251c\u2500\u2500 Inteiros:           2 testes\n\u251c\u2500\u2500 Reais:              2 testes  \n\u251c\u2500\u2500 Caracteres:         2 testes\n\u2514\u2500\u2500 L\u00f3gicos:            2 testes\nVetores:                6 testes (19%)\n\u251c\u2500\u2500 Vetor inteiro:      1 teste\n\u251c\u2500\u2500 Vetor real:         1 teste\n\u251c\u2500\u2500 Vetor caracter:     1 teste\n\u251c\u2500\u2500 Vetor l\u00f3gico:       1 teste\n\u251c\u2500\u2500 Leitura vetores:    1 teste\n\u2514\u2500\u2500 Opera\u00e7\u00f5es vetores:  1 teste\nEstruturas Controle:    4 testes (12%)\n\u251c\u2500\u2500 If-else:            1 teste\n\u251c\u2500\u2500 For:                1 teste\n\u251c\u2500\u2500 While:              1 teste\n\u2514\u2500\u2500 Switch-case:        1 teste\nOperadores:             6 testes (19%)\n\u251c\u2500\u2500 Aritm\u00e9ticos:        2 testes\n\u251c\u2500\u2500 L\u00f3gicos:            1 teste\n\u251c\u2500\u2500 Relacionais:        2 testes\n\u2514\u2500\u2500 Bitwise:            1 teste\nFun\u00e7\u00f5es:                3 testes (9%)\n\u251c\u2500\u2500 Sem par\u00e2metros:     1 teste\n\u251c\u2500\u2500 Sem retorno:        1 teste\n\u2514\u2500\u2500 Recursivas:         1 teste\nOutros:                 5 testes (16%)\n\u251c\u2500\u2500 Hello World:        1 teste\n\u251c\u2500\u2500 Coment\u00e1rios:        1 teste\n\u251c\u2500\u2500 Vari\u00e1veis:          1 teste\n\u251c\u2500\u2500 E/S:                2 testes\n</code></pre>"},{"location":"testes/cobertura/#cobertura-por-funcionalidade","title":"Cobertura por Funcionalidade","text":""},{"location":"testes/cobertura/#1-analise-lexica-100-coberta","title":"1. An\u00e1lise L\u00e9xica (100% Coberta)","text":""},{"location":"testes/cobertura/#tokens-testados","title":"Tokens Testados","text":"<ul> <li>\u2705 Palavras-chave: <code>programa</code>, <code>funcao</code>, <code>inicio</code>, <code>se</code>, <code>senao</code>, <code>para</code>, <code>enquanto</code>, <code>escolha</code></li> <li>\u2705 Tipos: <code>inteiro</code>, <code>real</code>, <code>caracter</code>, <code>logico</code></li> <li>\u2705 Operadores: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></li> <li>\u2705 Operadores l\u00f3gicos: <code>&amp;&amp;</code>, <code>||</code>, <code>!</code></li> <li>\u2705 Operadores bitwise: <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code></li> <li>\u2705 Delimitadores: <code>{</code>, <code>}</code>, <code>(</code>, <code>)</code>, <code>[</code>, <code>]</code>, <code>;</code>, <code>,</code></li> <li>\u2705 Literais: N\u00fameros inteiros, decimais, caracteres, booleanos</li> <li>\u2705 Identificadores: Nomes de vari\u00e1veis e fun\u00e7\u00f5es</li> <li>\u2705 Coment\u00e1rios: Linha (<code>//</code>) e bloco (<code>/* */</code>)</li> </ul>"},{"location":"testes/cobertura/#casos-especiais-testados","title":"Casos Especiais Testados","text":"<pre><code>// N\u00fameros negativos\ninteiro negativo = -42;\nreal decimal_negativo = -3.14;\n// Caracteres especiais\ncaracter aspas = '\\'';\ncaracter quebra_linha = '\\n';\n// Coment\u00e1rios aninhados\n/* Coment\u00e1rio /* aninhado */ externo */\n</code></pre>"},{"location":"testes/cobertura/#2-analise-sintatica-100-coberta","title":"2. An\u00e1lise Sint\u00e1tica (100% Coberta)","text":""},{"location":"testes/cobertura/#construcoes-gramaticais-testadas","title":"Constru\u00e7\u00f5es Gramaticais Testadas","text":"<p>Declara\u00e7\u00f5es (100%) - \u2705 Declara\u00e7\u00e3o de vari\u00e1veis simples - \u2705 Declara\u00e7\u00e3o com inicializa\u00e7\u00e3o - \u2705 Declara\u00e7\u00e3o de vetores - \u2705 Inicializa\u00e7\u00e3o de vetores com lista - \u2705 Declara\u00e7\u00e3o de fun\u00e7\u00f5es</p> <p>Express\u00f5es (95%) - \u2705 Express\u00f5es aritm\u00e9ticas simples - \u2705 Express\u00f5es aritm\u00e9ticas complexas - \u2705 Express\u00f5es l\u00f3gicas - \u2705 Express\u00f5es relacionais - \u2705 Express\u00f5es bitwise - \u2705 Preced\u00eancia de operadores - \u2705 Associatividade - \u26a0\ufe0f Express\u00f5es muito aninhadas (limitado)</p> <p>Comandos (100%) - \u2705 Atribui\u00e7\u00e3o simples - \u2705 Atribui\u00e7\u00e3o composta (<code>+=</code>, <code>-=</code>, etc.) - \u2705 Chamadas de fun\u00e7\u00e3o - \u2705 Estruturas de controle - \u2705 Comandos de E/S (<code>escreva</code>, <code>leia</code>)</p>"},{"location":"testes/cobertura/#estruturas-de-controle-detalhadas","title":"Estruturas de Controle Detalhadas","text":"<pre><code>// If-else aninhado (testado)\nse (idade &gt;= 18) {\n    se (renda &gt; 1000) {\n        escreva(\"Aprovado\\n\");\n    } senao {\n        escreva(\"Renda insuficiente\\n\");\n    }\n} senao {\n    escreva(\"Menor de idade\\n\");\n}\n// Loops (testados)\npara (inteiro i = 0; i &lt; 10; i++) {\n    se (i % 2 == 0) {\n        continue; // Simulado com estruturas condicionais\n    }\n    escreva(i, \"\\n\");\n}\n// Switch completo (testado)\nescolha (opcao) {\n    caso 1:\n    caso 2:  // Fall-through testado\n        escreva(\"Op\u00e7\u00f5es 1 ou 2\\n\");\n        pare;\n    padrao:\n        escreva(\"Op\u00e7\u00e3o inv\u00e1lida\\n\");\n}\n</code></pre>"},{"location":"testes/cobertura/#3-analise-semantica-90-coberta","title":"3. An\u00e1lise Sem\u00e2ntica (90% Coberta)","text":""},{"location":"testes/cobertura/#verificacoes-implementadas-e-testadas","title":"Verifica\u00e7\u00f5es Implementadas e Testadas","text":"<p>Tipos (100%) - \u2705 Compatibilidade em atribui\u00e7\u00f5es - \u2705 Convers\u00f5es impl\u00edcitas - \u2705 Verifica\u00e7\u00e3o de tipos em operadores - \u2705 Tipos de retorno de fun\u00e7\u00f5es</p> <p>Escopo (95%) - \u2705 Vari\u00e1veis locais vs globais - \u2705 Redeclara\u00e7\u00e3o de vari\u00e1veis - \u2705 Uso antes da declara\u00e7\u00e3o - \u26a0\ufe0f Shadowing complexo (parcial)</p> <p>Fun\u00e7\u00f5es (90%) - \u2705 Verifica\u00e7\u00e3o de assinatura - \u2705 N\u00famero de par\u00e2metros - \u2705 Tipos de par\u00e2metros - \u2705 Tipo de retorno - \u26a0\ufe0f Fun\u00e7\u00f5es recursivas complexas (limitado)</p>"},{"location":"testes/cobertura/#exemplos-de-verificacoes-semanticas","title":"Exemplos de Verifica\u00e7\u00f5es Sem\u00e2nticas","text":"<pre><code>// Verifica\u00e7\u00e3o de tipos (testado)\ninteiro x = 5;\nreal y = x;        // Convers\u00e3o int-&gt;float OK\ncaracter c = x;    // Erro detectado\n// Verifica\u00e7\u00e3o de escopo (testado)\ninteiro global = 10;\nfuncao teste() {\n    inteiro local = 20;\n    global = 30;   // Acesso a global OK\n    // local n\u00e3o vis\u00edvel fora da fun\u00e7\u00e3o\n}\n// Verifica\u00e7\u00e3o de fun\u00e7\u00f5es (testado)\ninteiro somar(inteiro a, inteiro b) {\n    retorne a + b;\n}\nfuncao inicio() {\n    inteiro resultado = somar(5, 3);      // OK\n    inteiro erro = somar(5);              // Erro: poucos par\u00e2metros\n    real erro2 = somar(5.5, 3.2);        // Warning: convers\u00e3o\n}\n</code></pre>"},{"location":"testes/cobertura/#4-geracao-de-codigo-100-coberta","title":"4. Gera\u00e7\u00e3o de C\u00f3digo (100% Coberta)","text":""},{"location":"testes/cobertura/#construcoes-c-geradas-e-testadas","title":"Constru\u00e7\u00f5es C Geradas e Testadas","text":"<p>Mapeamento de Tipos - \u2705 <code>inteiro</code> \u2192 <code>int</code> - \u2705 <code>real</code> \u2192 <code>float</code> - \u2705 <code>caracter</code> \u2192 <code>char</code> - \u2705 <code>logico</code> \u2192 <code>int</code> (0/1)</p> <p>Estruturas de Dados - \u2705 Vari\u00e1veis simples - \u2705 Arrays est\u00e1ticos - \u2705 Inicializa\u00e7\u00e3o de arrays - \u2705 Acesso a elementos</p> <p>Estruturas de Controle - \u2705 <code>se</code>/<code>senao</code> \u2192 <code>if</code>/<code>else</code> - \u2705 <code>para</code> \u2192 <code>for</code> - \u2705 <code>enquanto</code> \u2192 <code>while</code> - \u2705 <code>escolha</code> \u2192 <code>switch</code></p> <p>Operadores - \u2705 Todos os operadores aritm\u00e9ticos - \u2705 Todos os operadores l\u00f3gicos - \u2705 Todos os operadores relacionais - \u2705 Operadores bitwise - \u2705 Preced\u00eancia preservada</p>"},{"location":"testes/cobertura/#exemplo-de-codigo-gerado","title":"Exemplo de C\u00f3digo Gerado","text":"<p>Entrada Portugol: <pre><code>programa {\n    inteiro fatorial(inteiro n) {\n        se (n &lt;= 1) {\n            retorne 1;\n        } senao {\n            retorne n * fatorial(n - 1);\n        }\n    }\n\n    funcao inicio() {\n        inteiro num = 5;\n        escreva(\"Fatorial: \", fatorial(num), \"\\n\");\n    }\n}\n</code></pre></p> <p>Sa\u00edda C Gerada: <pre><code>#include &lt;stdio.h&gt;\n\nint fatorial(int n) {\n    if (n &lt;= 1) {\n        return 1;\n    } else {\n        return n * fatorial(n - 1);\n    }\n}\n\nint main() {\n    int num = 5;\n    printf(\"Fatorial: %d\\n\", fatorial(num));\n    return 0;\n}\n</code></pre></p>"},{"location":"testes/cobertura/#cobertura-de-casos-extremos","title":"Cobertura de Casos Extremos","text":""},{"location":"testes/cobertura/#1-valores-limite-90-coberto","title":"1. Valores Limite (90% Coberto)","text":""},{"location":"testes/cobertura/#testados","title":"Testados","text":"<ul> <li>\u2705 N\u00fameros negativos</li> <li>\u2705 Zero em divis\u00f5es</li> <li>\u2705 Arrays vazios</li> <li>\u2705 Strings vazias</li> <li>\u2705 Recurs\u00e3o simples</li> </ul>"},{"location":"testes/cobertura/#nao-testados-futuras-melhorias","title":"N\u00e3o Testados (Futuras Melhorias)","text":"<ul> <li>\u26a0\ufe0f Overflow de inteiros</li> <li>\u26a0\ufe0f Underflow de ponto flutuante</li> <li>\u26a0\ufe0f Recurs\u00e3o profunda (stack overflow)</li> <li>\u26a0\ufe0f Arrays de tamanho m\u00e1ximo</li> </ul>"},{"location":"testes/cobertura/#2-casos-de-erro-85-coberto","title":"2. Casos de Erro (85% Coberto)","text":""},{"location":"testes/cobertura/#erros-lexicos-testados","title":"Erros L\u00e9xicos Testados","text":"<ul> <li>\u2705 Caracteres inv\u00e1lidos</li> <li>\u2705 N\u00fameros malformados</li> <li>\u2705 Coment\u00e1rios n\u00e3o fechados</li> </ul>"},{"location":"testes/cobertura/#erros-sintaticos-testados","title":"Erros Sint\u00e1ticos Testados","text":"<ul> <li>\u2705 Par\u00eanteses n\u00e3o balanceados</li> <li>\u2705 Ponto e v\u00edrgula faltando</li> <li>\u2705 Palavras-chave incorretas</li> </ul>"},{"location":"testes/cobertura/#erros-semanticos-testados","title":"Erros Sem\u00e2nticos Testados","text":"<ul> <li>\u2705 Vari\u00e1veis n\u00e3o declaradas</li> <li>\u2705 Tipos incompat\u00edveis</li> <li>\u2705 Fun\u00e7\u00f5es n\u00e3o declaradas</li> </ul>"},{"location":"testes/cobertura/#3-otimizacoes-parcialmente-testado","title":"3. Otimiza\u00e7\u00f5es (Parcialmente Testado)","text":""},{"location":"testes/cobertura/#testadas","title":"Testadas","text":"<ul> <li>\u2705 Propaga\u00e7\u00e3o de constantes b\u00e1sica</li> <li>\u2705 Elimina\u00e7\u00e3o de c\u00f3digo morto simples</li> </ul>"},{"location":"testes/cobertura/#nao-testadas-futuras","title":"N\u00e3o Testadas (Futuras)","text":"<ul> <li>\u26a0\ufe0f Otimiza\u00e7\u00f5es de loop</li> <li>\u26a0\ufe0f Elimina\u00e7\u00e3o de subexpress\u00f5es comuns</li> <li>\u26a0\ufe0f Constant folding complexo</li> </ul>"},{"location":"testes/cobertura/#estrategias-de-teste","title":"Estrat\u00e9gias de Teste","text":""},{"location":"testes/cobertura/#1-testes-unitarios-atual","title":"1. Testes Unit\u00e1rios (Atual)","text":"<p>Cobertura: 100% das funcionalidades b\u00e1sicas <pre><code># Exemplo de execu\u00e7\u00e3o\n./run_tests.sh\nExecutando testes do compilador Portugol-C...\n\u2713 hello\n\u2713 inteiro\n\u2713 real\n\u2713 caracter\n\u2713 logico\n\u2713 variavel\n\u2713 vetor_inteiro\n\u2713 vetor_real\n\u2713 vetor_caracter\n\u2713 vetor_logico\n\u2713 vetor_leitura\n\u2713 vetor_operacoes\n\u2713 If_aninhado\n\u2713 para\n\u2713 enquanto\n\u2713 switch_case\n\u2713 logicos\n\u2713 bitwise\n\u2713 diferente\n\u2713 menor_igual\n\u2713 modulo\n\u2713 incremento_e_decremento\n\u2713 funcao_sem_parametro\n\u2713 funcao_sem_tipo\n\u2713 fatorial\n\u2713 comment\n\u2713 atribuicao_direta\n\u2713 escreva_diversos\n\u2713 escreva_variaveis\n\u2713 num_negativo\n\u2713 otimizacao_codigo_morto\n\u2713 otimizacao_propagacao_de_contante\nResultados: 32/32 testes passaram\nTodos os testes passaram!\n</code></pre></p>"},{"location":"testes/cobertura/#2-testes-de-integracao-80-implementado","title":"2. Testes de Integra\u00e7\u00e3o (80% Implementado)","text":""},{"location":"testes/cobertura/#cenarios-testados","title":"Cen\u00e1rios Testados","text":"<ul> <li>\u2705 Programas simples completos</li> <li>\u2705 Intera\u00e7\u00e3o entre m\u00f3dulos (lexer\u2192parser\u2192codegen)</li> <li>\u2705 Compila\u00e7\u00e3o e execu\u00e7\u00e3o end-to-end</li> </ul>"},{"location":"testes/cobertura/#cenarios-futuros","title":"Cen\u00e1rios Futuros","text":"<ul> <li>\u26a0\ufe0f Programas grandes (&gt;1000 linhas)</li> <li>\u26a0\ufe0f M\u00faltiplos arquivos</li> <li>\u26a0\ufe0f Bibliotecas externas</li> </ul>"},{"location":"testes/cobertura/#3-testes-de-performance-nao-implementado","title":"3. Testes de Performance (N\u00e3o Implementado)","text":""},{"location":"testes/cobertura/#metricas-desejadas","title":"M\u00e9tricas Desejadas","text":"<ul> <li>\u23f3 Tempo de compila\u00e7\u00e3o</li> <li>\u23f3 Uso de mem\u00f3ria</li> <li>\u23f3 Tamanho do c\u00f3digo gerado</li> <li>\u23f3 Velocidade de execu\u00e7\u00e3o</li> </ul>"},{"location":"testes/cobertura/#4-testes-de-regressao-100-implementado","title":"4. Testes de Regress\u00e3o (100% Implementado)","text":"<p>Todos os testes s\u00e3o executados a cada mudan\u00e7a para garantir que funcionalidades existentes n\u00e3o sejam quebradas.</p>"},{"location":"testes/cobertura/#ferramentas-de-cobertura","title":"Ferramentas de Cobertura","text":""},{"location":"testes/cobertura/#1-cobertura-manual-atual","title":"1. Cobertura Manual (Atual)","text":"<p>Processo: 1. Identificar funcionalidades 2. Criar testes espec\u00edficos 3. Verificar execu\u00e7\u00e3o manual 4. Documentar resultados</p>"},{"location":"testes/cobertura/#2-ferramentas-automatizadas-futuro","title":"2. Ferramentas Automatizadas (Futuro)","text":""},{"location":"testes/cobertura/#possiveis-ferramentas","title":"Poss\u00edveis Ferramentas","text":"<ul> <li>gcov: Para cobertura de c\u00f3digo C</li> <li>lcov: Para relat\u00f3rios HTML</li> <li>Valgrind: Para detec\u00e7\u00e3o de leaks</li> <li>Address Sanitizer: Para erros de mem\u00f3ria</li> </ul>"},{"location":"testes/cobertura/#configuracao-sugerida","title":"Configura\u00e7\u00e3o Sugerida","text":"<pre><code># Futuro Makefile com cobertura\ncoverage: CFLAGS += --coverage\ncoverage: clean all test\n    gcov *.c\n    lcov --capture --directory . --output-file coverage.info\n    genhtml coverage.info --output-directory coverage_html\n</code></pre>"},{"location":"testes/cobertura/#relatorios-de-cobertura","title":"Relat\u00f3rios de Cobertura","text":""},{"location":"testes/cobertura/#1-relatorio-semanal","title":"1. Relat\u00f3rio Semanal","text":"<pre><code>Semana: 2024-01-15 a 2024-01-21\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n\n\ud83d\udcca M\u00e9tricas Gerais:\n- Testes totais: 32\n- Testes passando: 32 (100%)\n- Novas funcionalidades: 6 (vetores)\n- Bugs encontrados: 0\n- Bugs corrigidos: 2\n\n\ud83c\udfaf Cobertura por M\u00f3dulo:\n- Lexer: 100% (23/23 tokens)\n- Parser: 100% (15/15 regras)\n- Semantic: 90% (18/20 verifica\u00e7\u00f5es)\n- CodeGen: 100% (12/12 constru\u00e7\u00f5es)\n\n\ud83d\ude80 Pr\u00f3ximos Objetivos:\n- Implementar testes de performance\n- Adicionar testes de stress\n- Melhorar cobertura sem\u00e2ntica\n</code></pre>"},{"location":"testes/cobertura/#2-dashboard-de-cobertura","title":"2. Dashboard de Cobertura","text":"<pre><code>Portugol-C Compiler - Test Coverage Dashboard\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n\n\ud83d\udfe2 Funcionalidades B\u00e1sicas     [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100%\n\ud83d\udfe2 Tipos de Dados             [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100%\n\ud83d\udfe2 Vetores                    [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100%\n\ud83d\udfe2 Estruturas de Controle     [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100%\n\ud83d\udfe2 Operadores                 [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100%\n\ud83d\udfe2 Fun\u00e7\u00f5es                    [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100%\n\ud83d\udfe1 An\u00e1lise Sem\u00e2ntica          [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591] 90%\n\ud83d\udfe2 Gera\u00e7\u00e3o de C\u00f3digo          [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100%\n\ud83d\udd34 Otimiza\u00e7\u00f5es                [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591] 40%\n\ud83d\udd34 Tratamento de Erros        [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591] 50%\n\nOverall Coverage: 92% \ud83c\udfaf\n</code></pre>"},{"location":"testes/cobertura/#plano-de-melhoria-da-cobertura","title":"Plano de Melhoria da Cobertura","text":""},{"location":"testes/cobertura/#curto-prazo-1-2-semanas","title":"Curto Prazo (1-2 semanas)","text":"<ol> <li>Completar An\u00e1lise Sem\u00e2ntica (90% \u2192 100%)</li> <li>Adicionar testes para shadowing complexo</li> <li>Testar verifica\u00e7\u00f5es de escopo avan\u00e7adas</li> <li>Implementar testes de recurs\u00e3o complexa</li> <li>Melhorar Tratamento de Erros (50% \u2192 80%)</li> <li>Testes para todos os tipos de erro</li> <li>Mensagens de erro descritivas</li> <li>Recovery de erros sint\u00e1ticos</li> </ol>"},{"location":"testes/cobertura/#medio-prazo-1-mes","title":"M\u00e9dio Prazo (1 m\u00eas)","text":"<ol> <li>Implementar Testes de Performance</li> <li>Benchmarks de compila\u00e7\u00e3o</li> <li>Testes de stress com arquivos grandes</li> <li>M\u00e9tricas de uso de mem\u00f3ria</li> <li>Testes de Otimiza\u00e7\u00e3o (40% \u2192 80%)</li> <li>Verificar todas as otimiza\u00e7\u00f5es implementadas</li> <li>Testes de constant folding</li> <li>Testes de dead code elimination</li> </ol>"},{"location":"testes/cobertura/#longo-prazo-3-meses","title":"Longo Prazo (3 meses)","text":"<ol> <li>Ferramentas Automatizadas</li> <li>Integra\u00e7\u00e3o com gcov/lcov</li> <li>CI/CD com cobertura autom\u00e1tica</li> <li>Relat\u00f3rios autom\u00e1ticos</li> <li>Testes Avan\u00e7ados</li> <li>Fuzzing autom\u00e1tico</li> <li>Property-based testing</li> <li>Mutation testing</li> </ol>"},{"location":"testes/cobertura/#conclusao","title":"Conclus\u00e3o","text":"<p>O compilador Portugol-C possui uma cobertura de testes robusta com 100% de sucesso em todas as funcionalidades implementadas. A cobertura atual de 92% garante alta qualidade e confiabilidade do software.</p>"},{"location":"testes/cobertura/#pontos-fortes","title":"Pontos Fortes","text":"<ul> <li>\u2705 Cobertura completa das funcionalidades b\u00e1sicas</li> <li>\u2705 Testes automatizados e reproduz\u00edveis</li> <li>\u2705 Casos de teste bem documentados</li> <li>\u2705 Processo de teste integrado ao desenvolvimento</li> </ul>"},{"location":"testes/cobertura/#areas-de-melhoria","title":"\u00c1reas de Melhoria","text":"<ul> <li>\u26a0\ufe0f Testes de performance e stress</li> <li>\u26a0\ufe0f Ferramentas automatizadas de cobertura</li> <li>\u26a0\ufe0f Testes de casos extremos e edge cases</li> <li>\u26a0\ufe0f Cobertura de otimiza\u00e7\u00f5es avan\u00e7adas A estrat\u00e9gia de testes atual garante que o compilador seja confi\u00e1vel e robusto para uso em ambientes educacionais e de desenvolvimento.</li> </ul>"},{"location":"testes/sistema-testes/","title":"Sistema de Testes","text":"<p>O Compilador Portugol-C possui um sistema robusto de testes automatizados que garante a qualidade e confiabilidade do c\u00f3digo gerado.</p>"},{"location":"testes/sistema-testes/#visao-geral","title":"Vis\u00e3o Geral","text":""},{"location":"testes/sistema-testes/#estatisticas-dos-testes","title":"\ud83d\udcca Estat\u00edsticas dos Testes","text":"<ul> <li>Total de testes: 32 casos de teste</li> <li>Taxa de sucesso: 100%</li> <li>Cobertura: Todas as funcionalidades implementadas</li> <li>Tempo de execu\u00e7\u00e3o: ~5-10 segundos</li> </ul>"},{"location":"testes/sistema-testes/#objetivos","title":"\ud83c\udfaf Objetivos","text":"<ul> <li>Validar a corretude da tradu\u00e7\u00e3o Portugol \u2192 C</li> <li>Garantir a manuten\u00e7\u00e3o da funcionalidade durante mudan\u00e7as</li> <li>Detectar regress\u00f5es automaticamente</li> <li>Facilitar a integra\u00e7\u00e3o cont\u00ednua</li> </ul>"},{"location":"testes/sistema-testes/#estrutura-dos-testes","title":"Estrutura dos Testes","text":""},{"location":"testes/sistema-testes/#organizacao-dos-arquivos","title":"\ud83d\udcc1 Organiza\u00e7\u00e3o dos Arquivos","text":"<pre><code>testes/\n\u251c\u2500\u2500 run_tests.sh          # Script principal de execu\u00e7\u00e3o\n\u251c\u2500\u2500 inputs/               # Arquivos de entrada (.pg)\n\u2502   \u251c\u2500\u2500 hello.pg\n\u2502   \u251c\u2500\u2500 inteiro.pg\n\u2502   \u251c\u2500\u2500 vetor_inteiro.pg\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 expected/             # Sa\u00eddas esperadas (.expected)\n\u2502   \u251c\u2500\u2500 hello.expected\n\u2502   \u251c\u2500\u2500 inteiro.expected\n\u2502   \u251c\u2500\u2500 vetor_inteiro.expected\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 build/\n    \u2514\u2500\u2500 test_outputs/     # Sa\u00eddas geradas durante testes\n</code></pre>"},{"location":"testes/sistema-testes/#fluxo-de-execucao","title":"\ud83d\udd04 Fluxo de Execu\u00e7\u00e3o","text":"<pre><code>graph TD\n    A[Script run_tests.sh] --&gt; B[Para cada arquivo .pg]\n    B --&gt; C[Executar compilador]\n    C --&gt; D[Gerar saida.c]\n    D --&gt; E[Comparar com .expected]\n    E --&gt; F{Arquivos iguais?}\n    F --&gt;|Sim| G[Teste PASSOU \u2705]\n    F --&gt;|N\u00e3o| H[Teste FALHOU \u274c]\n    H --&gt; I[Mostrar diferen\u00e7as]\n    G --&gt; J[Pr\u00f3ximo teste]\n    I --&gt; J\n</code></pre>"},{"location":"testes/sistema-testes/#categorias-de-testes","title":"Categorias de Testes","text":""},{"location":"testes/sistema-testes/#tipos-basicos","title":"\ud83d\udd24 Tipos B\u00e1sicos","text":"Teste Funcionalidade Status <code>inteiro.pg</code> Vari\u00e1veis inteiras \u2705 <code>real.pg</code> N\u00fameros decimais \u2705 <code>caracter.pg</code> Caracteres \u2705 <code>logico.pg</code> Valores booleanos \u2705"},{"location":"testes/sistema-testes/#vetores-arrays","title":"\ud83d\udcca Vetores (Arrays)","text":"Teste Funcionalidade Status <code>vetor_inteiro.pg</code> Arrays de inteiros \u2705 <code>vetor_real.pg</code> Arrays de reais \u2705 <code>vetor_caracter.pg</code> Arrays de caracteres \u2705 <code>vetor_logico.pg</code> Arrays l\u00f3gicos \u2705 <code>vetor_leitura.pg</code> Leitura de arrays \u2705 <code>vetor_operacoes.pg</code> Opera\u00e7\u00f5es com arrays \u2705"},{"location":"testes/sistema-testes/#estruturas-de-controle","title":"\ud83c\udf9b\ufe0f Estruturas de Controle","text":"Teste Funcionalidade Status <code>If_aninhado.pg</code> Condicionais aninhadas \u2705 <code>enquanto.pg</code> La\u00e7os while \u2705 <code>para.pg</code> La\u00e7os for \u2705 <code>switch_case.pg</code> Switch/case \u2705"},{"location":"testes/sistema-testes/#operadores","title":"\u2699\ufe0f Operadores","text":"Teste Funcionalidade Status <code>bitwise.pg</code> Operadores bitwise \u2705 <code>logicos.pg</code> Operadores l\u00f3gicos \u2705 <code>incremento_decremento.pg</code> ++/-- \u2705 <code>modulo.pg</code> Operador m\u00f3dulo \u2705 <code>diferente.pg</code> Operador != \u2705 <code>menor_igual.pg</code> Operador &lt;= \u2705"},{"location":"testes/sistema-testes/#entradasaida","title":"\ud83d\udcdd Entrada/Sa\u00edda","text":"Teste Funcionalidade Status <code>hello.pg</code> Hello World \u2705 <code>escreva_diversos.pg</code> M\u00faltiplos argumentos \u2705 <code>escreva_variaveis.pg</code> Vari\u00e1veis na sa\u00edda \u2705 <code>variavel.pg</code> Entrada de dados \u2705"},{"location":"testes/sistema-testes/#funcionalidades-avancadas","title":"\ud83d\udd27 Funcionalidades Avan\u00e7adas","text":"Teste Funcionalidade Status <code>funcao_sem_parametro.pg</code> Fun\u00e7\u00f5es simples \u2705 <code>funcao_sem_tipo.pg</code> Fun\u00e7\u00f5es void \u2705 <code>fatorial.pg</code> Recurs\u00e3o \u2705 <code>comment.pg</code> Coment\u00e1rios \u2705"},{"location":"testes/sistema-testes/#otimizacoes","title":"\u26a1 Otimiza\u00e7\u00f5es","text":"Teste Funcionalidade Status <code>otimizacao_propagacao_de_contante.pg</code> Propaga\u00e7\u00e3o de constantes \u2705 <code>otimizacao_codigo_morto.pg</code> Elimina\u00e7\u00e3o de c\u00f3digo morto \u2705"},{"location":"testes/sistema-testes/#casos-especiais","title":"\ud83e\uddea Casos Especiais","text":"Teste Funcionalidade Status <code>atribuicao_direta.pg</code> Inicializa\u00e7\u00e3o direta \u2705 <code>num_negativo.pg</code> N\u00fameros negativos \u2705"},{"location":"testes/sistema-testes/#executando-os-testes","title":"Executando os Testes","text":""},{"location":"testes/sistema-testes/#comando-principal","title":"\ud83d\ude80 Comando Principal","text":"<pre><code># Executar todos os testes\nmake test\n</code></pre>"},{"location":"testes/sistema-testes/#saida-dos-testes","title":"\ud83d\udccb Sa\u00edda dos Testes","text":"<pre><code>Iniciando testes automatizados...\n\ud83d\udd39 Testando hello...\n\u2705 hello passou\n\ud83d\udd39 Testando inteiro...\n\u2705 inteiro passou\n\ud83d\udd39 Testando vetor_inteiro...\n\u2705 vetor_inteiro passou\n...\n\u2705 Passaram: 32\n\u274c Falharam: 0\n</code></pre>"},{"location":"testes/sistema-testes/#teste-individual","title":"\ud83d\udd0d Teste Individual","text":"<pre><code># Testar um arquivo espec\u00edfico\nmake run FILE=testes/inputs/hello.pg\n\n# Verificar sa\u00edda gerada\ncat build/saida.c\n</code></pre>"},{"location":"testes/sistema-testes/#adicionando-novos-testes","title":"Adicionando Novos Testes","text":""},{"location":"testes/sistema-testes/#passo-a-passo","title":"\ud83d\udcdd Passo a Passo","text":"<ol> <li> <p>Criar arquivo de entrada:    <pre><code># Criar novo teste\necho 'programa {\n    funcao inicio() {\n        // Seu c\u00f3digo aqui\n    }\n}' &gt; testes/inputs/meu_teste.pg\n</code></pre></p> </li> <li> <p>Gerar sa\u00edda esperada:    <pre><code># Compilar para gerar sa\u00edda\nmake run FILE=testes/inputs/meu_teste.pg\n\n# Copiar sa\u00edda como esperada\ncp build/saida.c testes/expected/meu_teste.expected\n</code></pre></p> </li> <li> <p>Executar teste:    <pre><code>make test\n</code></pre></p> </li> </ol>"},{"location":"testes/sistema-testes/#convencoes-de-nomenclatura","title":"\ud83d\udccb Conven\u00e7\u00f5es de Nomenclatura","text":"<ul> <li>Arquivo de entrada: <code>nome_teste.pg</code></li> <li>Arquivo esperado: <code>nome_teste.expected</code></li> <li>Nome descritivo: Use nomes que descrevam a funcionalidade testada</li> </ul>"},{"location":"testes/sistema-testes/#integracao-continua","title":"Integra\u00e7\u00e3o Cont\u00ednua","text":""},{"location":"testes/sistema-testes/#github-actions","title":"\ud83d\udd04 GitHub Actions","text":"<p>O projeto possui integra\u00e7\u00e3o com GitHub Actions que executa os testes automaticamente:</p> <pre><code># .github/workflows/compiler-tests.yml\nname: Compilador Portugol-C Tests\n\non:\n  push:\n    paths:\n      - 'portugol_compilador/**'\n  pull_request:\n    paths:\n      - 'portugol_compilador/**'\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Instalar depend\u00eancias\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y gcc flex bison make\n    - name: Compilar o projeto\n      run: |\n        cd portugol_compilador\n        make\n    - name: Executar testes\n      run: |\n        cd portugol_compilador\n        make test\n</code></pre>"},{"location":"testes/sistema-testes/#beneficios-da-ci","title":"\ud83c\udfaf Benef\u00edcios da CI","text":"<ul> <li>Testes autom\u00e1ticos em cada push/PR</li> <li>Valida\u00e7\u00e3o antes do merge</li> <li>Feedback imediato sobre problemas</li> <li>Hist\u00f3rico de execu\u00e7\u00e3o dos testes</li> </ul>"},{"location":"testes/sistema-testes/#depuracao-de-testes","title":"Depura\u00e7\u00e3o de Testes","text":""},{"location":"testes/sistema-testes/#teste-falhando","title":"\ud83d\udc1b Teste Falhando","text":"<p>Quando um teste falha, o sistema mostra as diferen\u00e7as: <pre><code>\u274c meu_teste falhou\n\ud83d\udd0d Diferen\u00e7a:\n--- build/test_outputs/meu_teste.c\n+++ testes/expected/meu_teste.expected\n@@ -3,7 +3,7 @@\n int main() {\n     int x;\n-    x = 10;\n+    x = 20;\n     printf(\"%d\\n\", x);\n     return 0;\n }\n</code></pre></p>"},{"location":"testes/sistema-testes/#solucoes-comuns","title":"\ud83d\udd27 Solu\u00e7\u00f5es Comuns","text":"<ol> <li> <p>Atualizar arquivo expected:    <pre><code>cp build/test_outputs/meu_teste.c testes/expected/meu_teste.expected\n</code></pre></p> </li> <li> <p>Corrigir c\u00f3digo fonte:</p> </li> <li>Verificar l\u00f3gica do compilador</li> <li> <p>Corrigir gera\u00e7\u00e3o de c\u00f3digo</p> </li> <li> <p>Verificar entrada:</p> </li> <li>Validar sintaxe do arquivo .pg</li> <li>Confirmar funcionalidade esperada</li> </ol>"},{"location":"testes/sistema-testes/#metricas-de-qualidade","title":"M\u00e9tricas de Qualidade","text":""},{"location":"testes/sistema-testes/#cobertura-de-codigo","title":"\ud83d\udcc8 Cobertura de C\u00f3digo","text":"<ul> <li>Funcionalidades: 100% das implementadas</li> <li>Tipos de dados: Todos suportados</li> <li>Operadores: Cobertura completa</li> <li>Estruturas: Todas testadas</li> </ul>"},{"location":"testes/sistema-testes/#performance","title":"\u23f1\ufe0f Performance","text":"<ul> <li>Tempo m\u00e9dio por teste: ~0.2s</li> <li>Tempo total: ~5-10s</li> <li>Paraleliza\u00e7\u00e3o: Potencial para melhoria</li> </ul>"},{"location":"testes/sistema-testes/#qualidade","title":"\ud83c\udfaf Qualidade","text":"<ul> <li>Falsos positivos: 0%</li> <li>Falsos negativos: 0%</li> <li>Estabilidade: 100% dos testes passam consistentemente</li> </ul>"},{"location":"visao-projeto/escopo/","title":"\ud83d\udcd8 Escopo da Linguagem - Tradutor Portugol \u2192 C","text":"<p>Este documento descreve o escopo da linguagem Portugol que ser\u00e1 utilizado no projeto do Compilador Portugol \u2192 C. O escopo est\u00e1 baseado no Portugol Studio, garantindo compatibilidade e permitindo testes diretos na pr\u00f3pria IDE do Portugol Studio.</p>"},{"location":"visao-projeto/escopo/#estruturas-de-controle","title":"\u2705 Estruturas de Controle","text":"<ul> <li><code>se ... entao ... fimse</code></li> <li><code>se ... entao ... senao ... fimse</code></li> <li><code>enquanto ... faca ... fimenquanto</code></li> <li><code>para ... de ... ate ... faca ... fimpara</code></li> <li><code>repita ... ate</code></li> </ul>"},{"location":"visao-projeto/escopo/#entrada-e-saida-de-dados","title":"\u2705 Entrada e Sa\u00edda de Dados","text":"<ul> <li><code>leia(variavel)</code></li> <li><code>escreva(...)</code></li> </ul>"},{"location":"visao-projeto/escopo/#declaracao-de-variaveis","title":"\u2705 Declara\u00e7\u00e3o de Vari\u00e1veis","text":"<ul> <li>Bloco <code>var</code> com os seguintes tipos:</li> <li><code>inteiro</code></li> <li><code>real</code></li> <li><code>caracter</code></li> <li><code>logico</code></li> </ul> <p>Exemplo: <pre><code>var\n    inteiro x, y\n    real z\n</code></pre></p>"},{"location":"visao-projeto/escopo/#operadores-suportados","title":"\u2705 Operadores Suportados","text":""},{"location":"visao-projeto/escopo/#aritmeticos","title":"Aritm\u00e9ticos","text":"<ul> <li><code>+</code> (adi\u00e7\u00e3o)</li> <li><code>-</code> (subtra\u00e7\u00e3o)</li> <li><code>*</code> (multiplica\u00e7\u00e3o)</li> <li><code>/</code> (divis\u00e3o real)</li> </ul>"},{"location":"visao-projeto/escopo/#relacionais","title":"Relacionais","text":"<ul> <li><code>=</code> (igual)</li> <li><code>&lt;&gt;</code> (diferente)</li> <li><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></li> </ul>"},{"location":"visao-projeto/escopo/#logicos","title":"L\u00f3gicos","text":"<ul> <li><code>e</code></li> <li><code>ou</code></li> <li><code>nao</code></li> </ul>"},{"location":"visao-projeto/escopo/#bit-a-bit-unarios","title":"Bit a Bit Unarios","text":"<ul> <li><code>&amp;</code> (bitwise AND)</li> <li><code>~</code> (bitwise NOT)</li> <li><code>|</code> (bitwise OR)</li> <li><code>^</code> (bitwise XOR)</li> </ul>"},{"location":"visao-projeto/escopo/#tipos-de-dados","title":"\u2705 Tipos de Dados","text":"<ul> <li><code>inteiro</code></li> <li><code>real</code></li> <li><code>caracter</code></li> <li><code>logico</code></li> </ul>"},{"location":"visao-projeto/escopo/#comentarios","title":"\u2705 Coment\u00e1rios","text":"<ul> <li>Linha: <code>// coment\u00e1rio</code></li> <li>Bloco: <code>{ coment\u00e1rio }</code></li> </ul>"},{"location":"visao-projeto/escopo/#outros-elementos","title":"\u2705 Outros Elementos","text":"<ul> <li><code>inicio ... fim</code> \u2192 delimita o in\u00edcio e o fim do algoritmo</li> <li>O escopo de cada funcao \u00e9 delimitado por abre e fecha chaves (<code>{}</code>)</li> <li><code>const</code> \u2192 declara\u00e7\u00e3o de constantes</li> <li><code>retorne</code> \u2192 retorno de valor em fun\u00e7\u00f5es</li> <li><code>procedimento</code> / <code>funcao</code> \u2192 modulariza\u00e7\u00e3o de c\u00f3digo</li> <li>Suporte a <code>vetores</code> e <code>matrizes</code></li> </ul>"},{"location":"visao-projeto/escopo/#observacao","title":"\ud83d\udd0e Observa\u00e7\u00e3o","text":"<p>Durante o desenvolvimento, esse escopo poder\u00e1 ser ajustado de forma incremental, mas toda funcionalidade nova ser\u00e1 validada antes com testes no Portugol Studio, garantindo compatibilidade total.</p>"},{"location":"visao-projeto/sprints/","title":"Sprints","text":""},{"location":"visao-projeto/sprints/#ferramentas","title":"\u2699\ufe0f Ferramentas","text":""},{"location":"visao-projeto/sprints/#bison","title":"Bison","text":"<p>Bison \u00e9 uma ferramenta de gera\u00e7\u00e3o de analisadores sint\u00e1ticos (parsers), mantida pelo projeto GNU e sucessora do Yacc (Yet Another Compiler Compiler). Neste projeto, o Bison \u00e9 utilizado para definir a gram\u00e1tica da linguagem Portugol, permitindo identificar e estruturar corretamente express\u00f5es, declara\u00e7\u00f5es e comandos de controle de fluxo. A ferramenta gera c\u00f3digo C correspondente \u00e0 estrutura sint\u00e1tica reconhecida, integrando-se ao Flex para compor o analisador completo do compilador.</p>"},{"location":"visao-projeto/sprints/#flex","title":"Flex","text":"<p>Flex \u00e9 uma ferramenta moderna utilizada para gerar analisadores l\u00e9xicos (scanners), sendo o sucessor do tradicional Lex do Unix. Neste projeto, o Flex \u00e9 respons\u00e1vel por reconhecer os tokens da linguagem Portugol, como palavras-chave, identificadores e n\u00fameros. Ele gera automaticamente o arquivo lex.yy.c, que implementa o scanner l\u00e9xico e integra-se ao Bison para permitir a an\u00e1lise completa do c\u00f3digo-fonte durante o processo de compila\u00e7\u00e3o.</p>"},{"location":"visao-projeto/sprints/#gcc-e-makefile","title":"GCC e Makefile","text":"<ul> <li>Ferramentas para compilar o c\u00f3digo e automatizar o processo de build.</li> </ul>"},{"location":"visao-projeto/sprints/#organizacao-por-sprints","title":"\ud83d\udcc5 Organiza\u00e7\u00e3o por Sprints","text":"<p>O desenvolvimento foi dividido em 13 sprints, sendo elas semanais, iniciando em 30/03/2025 e terminando com a entrega final em 27/06/2025. Utilizamos o gitpages no GitHub para organizar as tarefas de cada sprint com crit\u00e9rios claros de aceita\u00e7\u00e3o (definition of done).</p>"},{"location":"visao-projeto/sprints/#sprint-1-setup-do-compilador-e-primeiros-comandos-3003-0504","title":"\ud83e\udde9 Sprint 1 \u2013Setup do Compilador e Primeiros Comandos (30/03 - 05/04)","text":"<p>Objetivos: - Definir escopo da linguagem Portugol suportada(UniVali). - Criar a estrutura inicial do projeto (pastas, Makefile, arquivos principais). - Configurar ambiente de desenvolvimento (Flex, Bison, GCC). - Criar um compilador inicial que reconhe\u00e7a e traduza comandos b\u00e1sicos. - Implementar o reconhecimento e tradu\u00e7\u00e3o dos seguintes elementos:     - <code>inicio</code>, <code>fim</code>     - <code>var</code>, <code>declara\u00e7\u00e3o de vari\u00e1veis</code>     - <code>leia</code>, <code>escreva</code>     - Atribui\u00e7\u00f5es e express\u00f5es aritm\u00e9ticas simples(<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>).</p> <p>Crit\u00e9rios de Aceita\u00e7\u00e3o: - Projeto compila corretamente usando <code>make</code>. - Gera\u00e7\u00e3o de arquivo <code>saida.c</code> funcional. - Primeiro exemplo <code>exemplo1.pg</code>, que teste as funcionalidades implementadas, compilado e executado corretamente.</p>"},{"location":"visao-projeto/sprints/#sprint-2-controle-de-fluxocondicionais-0604-1204","title":"\ud83e\udde9 Sprint 2 \u2013 Controle de Fluxo(Condicionais) (06/04 - 12/04)","text":"<p>Objetivos: - Adicionar suporte \u00e0 estrutura condicional:     - <code>se</code>, <code>entao</code>, <code>senao</code>, <code>fimse</code> - Implementar operadores relacionais:     - <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></p> <p>Crit\u00e9rios de Aceita\u00e7\u00e3o: - Condi\u00e7\u00f5es corretamente analisadas e compiladas. - C\u00f3digo com estruturas condicionais em Portugol \u00e9 convertido corretamente para C. - Segundo exemplo <code>exemplo2.pg</code>, que teste as funcionalidades implementadas, compilado e executado corretamente.</p>"},{"location":"visao-projeto/sprints/#sprint-3-estrutura-de-repeticaoenquantofacafimenquanto-1304-1904","title":"\ud83e\udde9 Sprint 3 \u2013 Estrutura de Repeti\u00e7\u00e3o(enquanto\u2026faca\u2026fimenquanto) (13/04 - 19/04)","text":"<p>Objetivos: - Adicionar suporte \u00e0s estruturas de repeti\u00e7\u00e3o:     - <code>enquanto</code>, <code>faca</code>, <code>fimenquanto</code></p> <p>Crit\u00e9rios de Aceita\u00e7\u00e3o:</p> <ul> <li>La\u00e7os de repeti\u00e7\u00e3o s\u00e3o reconhecidos e compilados corretamente.</li> <li>Terceiro exemplo <code>exemplo3.pg</code>, que teste as funcionalidades implementadas, compilado e executado corretamente.</li> </ul>"},{"location":"visao-projeto/sprints/#sprint-4-estruturas-de-repeticao-para-2304-a-2904","title":"\ud83e\udde9 Sprint 4 \u2013 Estruturas de Repeti\u00e7\u00e3o: Para (23/04 a 29/04)","text":"<p>Objetivos: - Adicionar suporte \u00e0s estruturas de repeti\u00e7\u00e3o:     - <code>para</code>, <code>de</code>, <code>ate</code>, <code>fimpara</code></p> <p>Crit\u00e9rios de Aceita\u00e7\u00e3o: - La\u00e7os de repeti\u00e7\u00e3o s\u00e3o reconhecidos e compilados corretamente. - Quarto exemplo <code>exemplo4.pg</code>, que teste as funcionalidades implementadas, compilado e executado corretamente.</p>"},{"location":"visao-projeto/sprints/#sprint-5-tipagem-e-robustez-p1-2704-0305","title":"\ud83e\udde9 Sprint 5 \u2013 Tipagem e Robustez + P1 (27/04 - 03/05)","text":"<p>Objetivos: - Ampliar o suporte para novos tipos de dados:     - <code>inteiro</code>, <code>real</code> e <code>caracter</code> - Corrigir a regra de declara\u00e7\u00e3o de vari\u00e1veis no analisador sint\u00e1tico.</p> <p>Crit\u00e9rios de Aceita\u00e7\u00e3o: - Declara\u00e7\u00e3o de vari\u00e1veis com tipo funcionando corretamente. - Compila\u00e7\u00e3o correta no C (int, float, char).</p>"},{"location":"visao-projeto/sprints/#sprint-6-sistema-de-testes-automatizados-0405-1005","title":"\ud83e\udde9 Sprint 6 \u2013 Sistema de Testes Automatizados (04/05 - 10/05)","text":"<p>Objetivos: - implementar um sistema de testes automatizados completo para o compilador Portugol-C que permite verificar se a gera\u00e7\u00e3o de c\u00f3digo C est\u00e1 funcionando conforme o esperado.</p> <p>Crit\u00e9rios de Aceita\u00e7\u00e3o: - Sistema de Testes Automatizados funcionando corretamente.</p>"},{"location":"visao-projeto/sprints/#sprint-7-ast-1105-1705","title":"\ud83e\udde9 Sprint 7 \u2013 AST (11/05 - 17/05)","text":"<p>Objetivos: - Constru\u00e7\u00e3o da \u00c1rvore de Deriva\u00e7\u00e3o Sint\u00e1tica</p>"},{"location":"visao-projeto/sprints/#sprint-8-recursos-avancados-do-portugol-1805-2405","title":"\ud83e\udde9 Sprint 8 \u2013 Recursos Avan\u00e7ados do Portugol (18/05 - 24/05)","text":"<p>Objetivos: - Implementar recursos \u201csen\u00e3o se\u201d e \u201cswitch/case (escolha, caso, fimcaso) \u201d</p> <p>Crit\u00e9rios de Aceita\u00e7\u00e3o: - Implementar casos de testes para cada um dos recursos - Todos testes devem estar funcionando</p>"},{"location":"visao-projeto/sprints/#sprint-9-comentarios-em-portugol-2505-3105","title":"\ud83e\udde9 Sprint 9 \u2013 Coment\u00e1rios em Portugol ((25/05 - 31/05))","text":"<p>Objetivos: - Convers\u00e3o de coment\u00e1rios do Portugol (//, / /) para C.</p> <p>Crit\u00e9rios de Aceita\u00e7\u00e3o: - C\u00f3digo comentado, limpo e modular. - Implementa\u00e7\u00e3o de casos de teste</p>"},{"location":"visao-projeto/sprints/#sprint-10-novos-tipos-p2-0106-a-0706","title":"\ud83e\udde9 Sprint 10 \u2013 Novos Tipos + P2 (01/06 a 07/06)","text":"<p>Objetivos: - Reconhecimento e tratamento dos tipos null e l\u00f3gico (booleano) e apresenta\u00e7\u00e3o do P2</p>"},{"location":"visao-projeto/sprints/#sprint-11-analise-semantica-tabela-de-simbolos-disponibilizacao-do-github","title":"\ud83e\udde9 Sprint 11 \u2013 An\u00e1lise Sem\u00e2ntica, Tabela de S\u00edmbolos + Disponibiliza\u00e7\u00e3o do GitHub","text":"<p>Objetivos: - Verificar se vari\u00e1veis s\u00e3o declaradas antes do uso. - Implementar tabela de s\u00edmbolos simples para armazenamento de identificadores e seus tipos. - Disponibilizar Reposit\u00f3rio.</p> <p>Crit\u00e9rios de Aceita\u00e7\u00e3o: - Erros de vari\u00e1veis n\u00e3o declaradas detectados. - Execu\u00e7\u00e3o abortada em caso de erro sem\u00e2ntico.</p>"},{"location":"visao-projeto/sprints/#sprint-12-correcoes-e-integracao-final-1506-2106","title":"\ud83e\udde9 Sprint 12 \u2013 Corre\u00e7\u00f5es e Integra\u00e7\u00e3o Final (15/06 - 21/06)","text":"<p>Objetivos: - Corre\u00e7\u00e3o de bugs e inconsist\u00eancias - Organiza\u00e7\u00e3o do c\u00f3digo final - \u00daltimos testes com m\u00faltiplos arquivos .pg</p>"},{"location":"visao-projeto/sprints/#sprint-13-entrega-e-apresentacao-final-2206-2806","title":"\ud83e\udde9 Sprint 13 \u2013 Entrega e Apresenta\u00e7\u00e3o Final (22/06 - 28/06)","text":"<p>Objetivos: - Prepara\u00e7\u00e3o para entrega do projeto, entrevista/apresenta\u00e7\u00e3o finals</p>"},{"location":"visao-projeto/visaoProduto/","title":"Projeto Tradutor Portugol \u2192 C","text":""},{"location":"visao-projeto/visaoProduto/#ferramentas","title":"\u2699\ufe0f Ferramentas","text":""},{"location":"visao-projeto/visaoProduto/#bison","title":"Bison","text":"<ul> <li>Bison \u00e9 uma ferramenta de gera\u00e7\u00e3o de analisadores sint\u00e1ticos (parsers), mantida pelo projeto GNU e sucessora do Yacc (Yet Another Compiler Compiler). Neste projeto, o Bison \u00e9 utilizado para definir a gram\u00e1tica da linguagem Portugol, permitindo identificar e estruturar corretamente express\u00f5es, declara\u00e7\u00f5es e comandos de controle de fluxo. A ferramenta gera c\u00f3digo C correspondente \u00e0 estrutura sint\u00e1tica reconhecida, integrando-se ao Flex para compor o analisador completo do compilador.</li> </ul>"},{"location":"visao-projeto/visaoProduto/#flex","title":"Flex","text":"<ul> <li>Flex \u00e9 uma ferramenta moderna utilizada para gerar analisadores l\u00e9xicos (scanners), sendo o sucessor do tradicional Lex do Unix. Neste projeto, o Flex \u00e9 respons\u00e1vel por reconhecer os tokens da linguagem Portugol, como palavras-chave, identificadores e n\u00fameros. Ele gera automaticamente o arquivo <code>lex.yy.c</code>, que implementa o scanner l\u00e9xico e integra-se ao Bison para permitir a an\u00e1lise completa do c\u00f3digo-fonte durante o processo de compila\u00e7\u00e3o.</li> </ul>"},{"location":"visao-projeto/visaoProduto/#gcc-e-makefile","title":"GCC e Makefile","text":"<ul> <li>Ferramentas para compilar o c\u00f3digo e automatizar o processo de build</li> </ul>"},{"location":"visao-projeto/visaoProduto/#organizacao-por-sprints","title":"\ud83d\udcc5 Organiza\u00e7\u00e3o por Sprints","text":"<p>O desenvolvimento foi dividido em 6 sprints quinzenais, iniciando em 02/04/2025 e terminando com a entrega final em 27/06/2025. Utilizamos issues no GitHub para organizar as tarefas de cada sprint com crit\u00e9rios claros de aceita\u00e7\u00e3o (definition of done).</p>"}]}